
M0_Motor_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001698  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000044  20000000  00001698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  20000044  000016dc  00020044  2**2
                  ALLOC
  3 .stack        00000400  200000c0  00001758  00020044  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00022fb5  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000285f  00000000  00000000  0004307a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000c3e1  00000000  00000000  000458d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000998  00000000  00000000  00051cba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000eb0  00000000  00000000  00052652  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017096  00000000  00000000  00053502  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c6ab  00000000  00000000  0006a598  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007e1e9  00000000  00000000  00076c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001890  00000000  00000000  000f4e2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 04 00 20 25 01 00 00 21 01 00 00 21 01 00 00     ... %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      4c:	01 09 00 00 21 01 00 00 21 01 00 00 21 01 00 00     ....!...!...!...
      5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      6c:	21 01 00 00 21 01 00 00 00 00 00 00 00 00 00 00     !...!...........
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      8c:	21 01 00 00 21 01 00 00 00 00 00 00 00 00 00 00     !...!...........
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000044 	.word	0x20000044
      d4:	00000000 	.word	0x00000000
      d8:	00001698 	.word	0x00001698

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000048 	.word	0x20000048
     108:	00001698 	.word	0x00001698
     10c:	00001698 	.word	0x00001698
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	000003b9 	.word	0x000003b9

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     126:	4a2a      	ldr	r2, [pc, #168]	; (1d0 <Reset_Handler+0xac>)
     128:	4b2a      	ldr	r3, [pc, #168]	; (1d4 <Reset_Handler+0xb0>)
     12a:	429a      	cmp	r2, r3
     12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     12e:	001a      	movs	r2, r3
     130:	4b29      	ldr	r3, [pc, #164]	; (1d8 <Reset_Handler+0xb4>)
     132:	429a      	cmp	r2, r3
     134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
     136:	4a29      	ldr	r2, [pc, #164]	; (1dc <Reset_Handler+0xb8>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xb0>)
     146:	4922      	ldr	r1, [pc, #136]	; (1d0 <Reset_Handler+0xac>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     152:	4a23      	ldr	r2, [pc, #140]	; (1e0 <Reset_Handler+0xbc>)
     154:	4b23      	ldr	r3, [pc, #140]	; (1e4 <Reset_Handler+0xc0>)
     156:	429a      	cmp	r2, r3
     158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
     15a:	43d3      	mvns	r3, r2
     15c:	4921      	ldr	r1, [pc, #132]	; (1e4 <Reset_Handler+0xc0>)
     15e:	185b      	adds	r3, r3, r1
     160:	2103      	movs	r1, #3
     162:	438b      	bics	r3, r1
     164:	3304      	adds	r3, #4
     166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     168:	2100      	movs	r1, #0
     16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     16c:	4293      	cmp	r3, r2
     16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     170:	4a1d      	ldr	r2, [pc, #116]	; (1e8 <Reset_Handler+0xc4>)
     172:	21ff      	movs	r1, #255	; 0xff
     174:	4b1d      	ldr	r3, [pc, #116]	; (1ec <Reset_Handler+0xc8>)
     176:	438b      	bics	r3, r1
     178:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17a:	39fd      	subs	r1, #253	; 0xfd
     17c:	2390      	movs	r3, #144	; 0x90
     17e:	005b      	lsls	r3, r3, #1
     180:	4a1b      	ldr	r2, [pc, #108]	; (1f0 <Reset_Handler+0xcc>)
     182:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     184:	4a1b      	ldr	r2, [pc, #108]	; (1f4 <Reset_Handler+0xd0>)
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	2503      	movs	r5, #3
     18a:	43ab      	bics	r3, r5
     18c:	2402      	movs	r4, #2
     18e:	4323      	orrs	r3, r4
     190:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     192:	78d3      	ldrb	r3, [r2, #3]
     194:	270c      	movs	r7, #12
     196:	43bb      	bics	r3, r7
     198:	2608      	movs	r6, #8
     19a:	4333      	orrs	r3, r6
     19c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     19e:	4b16      	ldr	r3, [pc, #88]	; (1f8 <Reset_Handler+0xd4>)
     1a0:	7b98      	ldrb	r0, [r3, #14]
     1a2:	2230      	movs	r2, #48	; 0x30
     1a4:	4390      	bics	r0, r2
     1a6:	2220      	movs	r2, #32
     1a8:	4310      	orrs	r0, r2
     1aa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1ac:	7b99      	ldrb	r1, [r3, #14]
     1ae:	43b9      	bics	r1, r7
     1b0:	4331      	orrs	r1, r6
     1b2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b4:	7b9a      	ldrb	r2, [r3, #14]
     1b6:	43aa      	bics	r2, r5
     1b8:	4322      	orrs	r2, r4
     1ba:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1bc:	4a0f      	ldr	r2, [pc, #60]	; (1fc <Reset_Handler+0xd8>)
     1be:	6853      	ldr	r3, [r2, #4]
     1c0:	2180      	movs	r1, #128	; 0x80
     1c2:	430b      	orrs	r3, r1
     1c4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1c6:	4b0e      	ldr	r3, [pc, #56]	; (200 <Reset_Handler+0xdc>)
     1c8:	4798      	blx	r3
        main();
     1ca:	4b0e      	ldr	r3, [pc, #56]	; (204 <Reset_Handler+0xe0>)
     1cc:	4798      	blx	r3
     1ce:	e7fe      	b.n	1ce <Reset_Handler+0xaa>
     1d0:	00001698 	.word	0x00001698
     1d4:	20000000 	.word	0x20000000
     1d8:	20000044 	.word	0x20000044
     1dc:	20000004 	.word	0x20000004
     1e0:	20000044 	.word	0x20000044
     1e4:	200000c0 	.word	0x200000c0
     1e8:	e000ed00 	.word	0xe000ed00
     1ec:	00000000 	.word	0x00000000
     1f0:	41007000 	.word	0x41007000
     1f4:	41005000 	.word	0x41005000
     1f8:	41004800 	.word	0x41004800
     1fc:	41004000 	.word	0x41004000
     200:	00001575 	.word	0x00001575
     204:	0000135d 	.word	0x0000135d

00000208 <SPI_0_PORT_init>:
struct timer_descriptor      TIMER_0;

struct i2c_m_sync_desc I2C_0;

void SPI_0_PORT_init(void)
{
     208:	b5f0      	push	{r4, r5, r6, r7, lr}
     20a:	46c6      	mov	lr, r8
     20c:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     20e:	24c0      	movs	r4, #192	; 0xc0
     210:	05e4      	lsls	r4, r4, #23
     212:	2380      	movs	r3, #128	; 0x80
     214:	005b      	lsls	r3, r3, #1
     216:	6063      	str	r3, [r4, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     218:	4b24      	ldr	r3, [pc, #144]	; (2ac <SPI_0_PORT_init+0xa4>)
     21a:	4a25      	ldr	r2, [pc, #148]	; (2b0 <SPI_0_PORT_init+0xa8>)
     21c:	629a      	str	r2, [r3, #40]	; 0x28
     21e:	4a25      	ldr	r2, [pc, #148]	; (2b4 <SPI_0_PORT_init+0xac>)
     220:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     222:	2148      	movs	r1, #72	; 0x48
     224:	5c5a      	ldrb	r2, [r3, r1]
     226:	2004      	movs	r0, #4
     228:	4382      	bics	r2, r0
     22a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     22c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     22e:	3803      	subs	r0, #3
     230:	4680      	mov	r8, r0
     232:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     234:	4684      	mov	ip, r0
     236:	4660      	mov	r0, ip
     238:	4302      	orrs	r2, r0
     23a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     23e:	2734      	movs	r7, #52	; 0x34
     240:	5dda      	ldrb	r2, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     242:	3939      	subs	r1, #57	; 0x39
     244:	438a      	bics	r2, r1
	tmp |= PORT_PMUX_PMUXE(data);
     246:	390d      	subs	r1, #13
     248:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     24a:	55da      	strb	r2, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     24c:	2280      	movs	r2, #128	; 0x80
     24e:	0092      	lsls	r2, r2, #2
     250:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     252:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     254:	4a18      	ldr	r2, [pc, #96]	; (2b8 <SPI_0_PORT_init+0xb0>)
     256:	629a      	str	r2, [r3, #40]	; 0x28
     258:	21c0      	movs	r1, #192	; 0xc0
     25a:	0609      	lsls	r1, r1, #24
     25c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     25e:	2049      	movs	r0, #73	; 0x49
     260:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     262:	4645      	mov	r5, r8
     264:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     266:	4665      	mov	r5, ip
     268:	432a      	orrs	r2, r5
     26a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     26c:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     26e:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     270:	260f      	movs	r6, #15
     272:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
     274:	2520      	movs	r5, #32
     276:	4328      	orrs	r0, r5
     278:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     27a:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     27c:	2280      	movs	r2, #128	; 0x80
     27e:	0112      	lsls	r2, r2, #4
     280:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     282:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     284:	4a0d      	ldr	r2, [pc, #52]	; (2bc <SPI_0_PORT_init+0xb4>)
     286:	629a      	str	r2, [r3, #40]	; 0x28
     288:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     28a:	224b      	movs	r2, #75	; 0x4b
     28c:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     28e:	4640      	mov	r0, r8
     290:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     292:	4660      	mov	r0, ip
     294:	4301      	orrs	r1, r0
     296:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     298:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     29a:	2135      	movs	r1, #53	; 0x35
     29c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     29e:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
     2a0:	432a      	orrs	r2, r5
     2a2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2a4:	545a      	strb	r2, [r3, r1]

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
}
     2a6:	bc04      	pop	{r2}
     2a8:	4690      	mov	r8, r2
     2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2ac:	41004400 	.word	0x41004400
     2b0:	40020100 	.word	0x40020100
     2b4:	c0020000 	.word	0xc0020000
     2b8:	40000200 	.word	0x40000200
     2bc:	40000800 	.word	0x40000800

000002c0 <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     2c0:	4a04      	ldr	r2, [pc, #16]	; (2d4 <SPI_0_CLOCK_init+0x14>)
     2c2:	6a13      	ldr	r3, [r2, #32]
     2c4:	2104      	movs	r1, #4
     2c6:	430b      	orrs	r3, r1
     2c8:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     2ca:	4a03      	ldr	r2, [pc, #12]	; (2d8 <SPI_0_CLOCK_init+0x18>)
     2cc:	4b03      	ldr	r3, [pc, #12]	; (2dc <SPI_0_CLOCK_init+0x1c>)
     2ce:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     2d0:	4770      	bx	lr
     2d2:	46c0      	nop			; (mov r8, r8)
     2d4:	40000400 	.word	0x40000400
     2d8:	00004014 	.word	0x00004014
     2dc:	40000c00 	.word	0x40000c00

000002e0 <SPI_0_init>:

void SPI_0_init(void)
{
     2e0:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     2e2:	4b07      	ldr	r3, [pc, #28]	; (300 <SPI_0_init+0x20>)
     2e4:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     2e6:	4c07      	ldr	r4, [pc, #28]	; (304 <SPI_0_init+0x24>)
     2e8:	4907      	ldr	r1, [pc, #28]	; (308 <SPI_0_init+0x28>)
     2ea:	0020      	movs	r0, r4
     2ec:	4b07      	ldr	r3, [pc, #28]	; (30c <SPI_0_init+0x2c>)
     2ee:	4798      	blx	r3
	spi_m_sync_set_mode(&SPI_0, SPI_MODE_3);
     2f0:	2103      	movs	r1, #3
     2f2:	0020      	movs	r0, r4
     2f4:	4b06      	ldr	r3, [pc, #24]	; (310 <SPI_0_init+0x30>)
     2f6:	4798      	blx	r3
	SPI_0_PORT_init();
     2f8:	4b06      	ldr	r3, [pc, #24]	; (314 <SPI_0_init+0x34>)
     2fa:	4798      	blx	r3
}
     2fc:	bd10      	pop	{r4, pc}
     2fe:	46c0      	nop			; (mov r8, r8)
     300:	000002c1 	.word	0x000002c1
     304:	20000068 	.word	0x20000068
     308:	42000800 	.word	0x42000800
     30c:	000004ed 	.word	0x000004ed
     310:	00000541 	.word	0x00000541
     314:	00000209 	.word	0x00000209

00000318 <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
     318:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     31a:	4b12      	ldr	r3, [pc, #72]	; (364 <I2C_0_PORT_init+0x4c>)
     31c:	2056      	movs	r0, #86	; 0x56
     31e:	5c19      	ldrb	r1, [r3, r0]
     320:	2204      	movs	r2, #4
     322:	4391      	bics	r1, r2
     324:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     326:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     328:	2501      	movs	r5, #1
     32a:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     32c:	2401      	movs	r4, #1
     32e:	4321      	orrs	r1, r4
     330:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     332:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     334:	381b      	subs	r0, #27
     336:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     338:	260f      	movs	r6, #15
     33a:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     33c:	3e0d      	subs	r6, #13
     33e:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     340:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     342:	2157      	movs	r1, #87	; 0x57
     344:	5c5e      	ldrb	r6, [r3, r1]
     346:	4396      	bics	r6, r2
     348:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     34a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     34c:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     34e:	4322      	orrs	r2, r4
     350:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     352:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     354:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     356:	3948      	subs	r1, #72	; 0x48
     358:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     35a:	3111      	adds	r1, #17
     35c:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     35e:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     360:	bd70      	pop	{r4, r5, r6, pc}
     362:	46c0      	nop			; (mov r8, r8)
     364:	41004400 	.word	0x41004400

00000368 <I2C_0_CLOCK_init>:
     368:	4a05      	ldr	r2, [pc, #20]	; (380 <I2C_0_CLOCK_init+0x18>)
     36a:	6a13      	ldr	r3, [r2, #32]
     36c:	2120      	movs	r1, #32
     36e:	430b      	orrs	r3, r1
     370:	6213      	str	r3, [r2, #32]
     372:	4b04      	ldr	r3, [pc, #16]	; (384 <I2C_0_CLOCK_init+0x1c>)
     374:	4a04      	ldr	r2, [pc, #16]	; (388 <I2C_0_CLOCK_init+0x20>)
     376:	805a      	strh	r2, [r3, #2]
     378:	4a04      	ldr	r2, [pc, #16]	; (38c <I2C_0_CLOCK_init+0x24>)
     37a:	805a      	strh	r2, [r3, #2]
void I2C_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
	_gclk_enable_channel(SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC);
}
     37c:	4770      	bx	lr
     37e:	46c0      	nop			; (mov r8, r8)
     380:	40000400 	.word	0x40000400
     384:	40000c00 	.word	0x40000c00
     388:	00004017 	.word	0x00004017
     38c:	00004313 	.word	0x00004313

00000390 <I2C_0_init>:

void I2C_0_init(void)
{
     390:	b510      	push	{r4, lr}
	I2C_0_CLOCK_init();
     392:	4b04      	ldr	r3, [pc, #16]	; (3a4 <I2C_0_init+0x14>)
     394:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM3);
     396:	4904      	ldr	r1, [pc, #16]	; (3a8 <I2C_0_init+0x18>)
     398:	4804      	ldr	r0, [pc, #16]	; (3ac <I2C_0_init+0x1c>)
     39a:	4b05      	ldr	r3, [pc, #20]	; (3b0 <I2C_0_init+0x20>)
     39c:	4798      	blx	r3
	I2C_0_PORT_init();
     39e:	4b05      	ldr	r3, [pc, #20]	; (3b4 <I2C_0_init+0x24>)
     3a0:	4798      	blx	r3
}
     3a2:	bd10      	pop	{r4, pc}
     3a4:	00000369 	.word	0x00000369
     3a8:	42001400 	.word	0x42001400
     3ac:	20000080 	.word	0x20000080
     3b0:	000004ad 	.word	0x000004ad
     3b4:	00000319 	.word	0x00000319

000003b8 <system_init>:
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
}

void system_init(void)
{
     3b8:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     3ba:	4b0b      	ldr	r3, [pc, #44]	; (3e8 <system_init+0x30>)
     3bc:	4798      	blx	r3
	init_mcu();

	SPI_0_init();
     3be:	4b0b      	ldr	r3, [pc, #44]	; (3ec <system_init+0x34>)
     3c0:	4798      	blx	r3

	I2C_0_init();
     3c2:	4b0b      	ldr	r3, [pc, #44]	; (3f0 <system_init+0x38>)
     3c4:	4798      	blx	r3
		PM->APBAMASK.reg |= 1 << peripheral;
     3c6:	4a0b      	ldr	r2, [pc, #44]	; (3f4 <system_init+0x3c>)
     3c8:	6993      	ldr	r3, [r2, #24]
     3ca:	2120      	movs	r1, #32
     3cc:	430b      	orrs	r3, r1
     3ce:	6193      	str	r3, [r2, #24]
     3d0:	4a09      	ldr	r2, [pc, #36]	; (3f8 <system_init+0x40>)
     3d2:	4b0a      	ldr	r3, [pc, #40]	; (3fc <system_init+0x44>)
     3d4:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     3d6:	4b0a      	ldr	r3, [pc, #40]	; (400 <STACK_SIZE>)
     3d8:	4798      	blx	r3
     3da:	0002      	movs	r2, r0
     3dc:	4909      	ldr	r1, [pc, #36]	; (404 <STACK_SIZE+0x4>)
     3de:	480a      	ldr	r0, [pc, #40]	; (408 <STACK_SIZE+0x8>)
     3e0:	4b0a      	ldr	r3, [pc, #40]	; (40c <STACK_SIZE+0xc>)
     3e2:	4798      	blx	r3

	TIMER_0_init();
}
     3e4:	bd10      	pop	{r4, pc}
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	00000831 	.word	0x00000831
     3ec:	000002e1 	.word	0x000002e1
     3f0:	00000391 	.word	0x00000391
     3f4:	40000400 	.word	0x40000400
     3f8:	00004004 	.word	0x00004004
     3fc:	40000c00 	.word	0x40000c00
     400:	000008fd 	.word	0x000008fd
     404:	40001400 	.word	0x40001400
     408:	200000a0 	.word	0x200000a0
     40c:	00000759 	.word	0x00000759

00000410 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     410:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     414:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     416:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     418:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     41c:	4770      	bx	lr

0000041e <atomic_leave_critical>:
     41e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     422:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     424:	f383 8810 	msr	PRIMASK, r3
}
     428:	4770      	bx	lr
	...

0000042c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     42c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     42e:	4b04      	ldr	r3, [pc, #16]	; (440 <delay_us+0x14>)
     430:	681c      	ldr	r4, [r3, #0]
     432:	4b04      	ldr	r3, [pc, #16]	; (444 <delay_us+0x18>)
     434:	4798      	blx	r3
     436:	0001      	movs	r1, r0
     438:	0020      	movs	r0, r4
     43a:	4b03      	ldr	r3, [pc, #12]	; (448 <delay_us+0x1c>)
     43c:	4798      	blx	r3
}
     43e:	bd10      	pop	{r4, pc}
     440:	20000060 	.word	0x20000060
     444:	0000080d 	.word	0x0000080d
     448:	00000829 	.word	0x00000829

0000044c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     44c:	b510      	push	{r4, lr}
     44e:	b084      	sub	sp, #16
     450:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     452:	ab01      	add	r3, sp, #4
     454:	3814      	subs	r0, #20
     456:	8b82      	ldrh	r2, [r0, #28]
     458:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     45a:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP;
     45c:	4a05      	ldr	r2, [pc, #20]	; (474 <i2c_m_sync_write+0x28>)
     45e:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     460:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     462:	0019      	movs	r1, r3
     464:	4b04      	ldr	r3, [pc, #16]	; (478 <i2c_m_sync_write+0x2c>)
     466:	4798      	blx	r3

	if (ret) {
     468:	2800      	cmp	r0, #0
     46a:	d100      	bne.n	46e <i2c_m_sync_write+0x22>
		return ret;
	}

	return n;
     46c:	0020      	movs	r0, r4
}
     46e:	b004      	add	sp, #16
     470:	bd10      	pop	{r4, pc}
     472:	46c0      	nop			; (mov r8, r8)
     474:	ffff8000 	.word	0xffff8000
     478:	00000a9d 	.word	0x00000a9d

0000047c <i2c_m_sync_read>:
{
     47c:	b510      	push	{r4, lr}
     47e:	b084      	sub	sp, #16
     480:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
     482:	ab01      	add	r3, sp, #4
     484:	3814      	subs	r0, #20
     486:	8b82      	ldrh	r2, [r0, #28]
     488:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     48a:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     48c:	4a05      	ldr	r2, [pc, #20]	; (4a4 <i2c_m_sync_read+0x28>)
     48e:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     490:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     492:	0019      	movs	r1, r3
     494:	4b04      	ldr	r3, [pc, #16]	; (4a8 <i2c_m_sync_read+0x2c>)
     496:	4798      	blx	r3
	if (ret) {
     498:	2800      	cmp	r0, #0
     49a:	d100      	bne.n	49e <i2c_m_sync_read+0x22>
	return n;
     49c:	0020      	movs	r0, r4
}
     49e:	b004      	add	sp, #16
     4a0:	bd10      	pop	{r4, pc}
     4a2:	46c0      	nop			; (mov r8, r8)
     4a4:	ffff8001 	.word	0xffff8001
     4a8:	00000a9d 	.word	0x00000a9d

000004ac <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     4ac:	b570      	push	{r4, r5, r6, lr}
     4ae:	0004      	movs	r4, r0
     4b0:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     4b2:	1e43      	subs	r3, r0, #1
     4b4:	4198      	sbcs	r0, r3
     4b6:	b2c0      	uxtb	r0, r0
     4b8:	225e      	movs	r2, #94	; 0x5e
     4ba:	4907      	ldr	r1, [pc, #28]	; (4d8 <i2c_m_sync_init+0x2c>)
     4bc:	4b07      	ldr	r3, [pc, #28]	; (4dc <i2c_m_sync_init+0x30>)
     4be:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     4c0:	0029      	movs	r1, r5
     4c2:	0020      	movs	r0, r4
     4c4:	4b06      	ldr	r3, [pc, #24]	; (4e0 <i2c_m_sync_init+0x34>)
     4c6:	4798      	blx	r3
	if (init_status) {
     4c8:	2800      	cmp	r0, #0
     4ca:	d103      	bne.n	4d4 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     4cc:	4b05      	ldr	r3, [pc, #20]	; (4e4 <i2c_m_sync_init+0x38>)
     4ce:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     4d0:	4b05      	ldr	r3, [pc, #20]	; (4e8 <i2c_m_sync_init+0x3c>)
     4d2:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     4d4:	bd70      	pop	{r4, r5, r6, pc}
     4d6:	46c0      	nop			; (mov r8, r8)
     4d8:	000015bc 	.word	0x000015bc
     4dc:	0000079d 	.word	0x0000079d
     4e0:	00000a6d 	.word	0x00000a6d
     4e4:	0000047d 	.word	0x0000047d
     4e8:	0000044d 	.word	0x0000044d

000004ec <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     4ec:	b570      	push	{r4, r5, r6, lr}
     4ee:	0004      	movs	r4, r0
     4f0:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     4f2:	2800      	cmp	r0, #0
     4f4:	d016      	beq.n	524 <spi_m_sync_init+0x38>
     4f6:	0008      	movs	r0, r1
     4f8:	1e43      	subs	r3, r0, #1
     4fa:	4198      	sbcs	r0, r3
     4fc:	b2c0      	uxtb	r0, r0
     4fe:	2240      	movs	r2, #64	; 0x40
     500:	4909      	ldr	r1, [pc, #36]	; (528 <spi_m_sync_init+0x3c>)
     502:	4b0a      	ldr	r3, [pc, #40]	; (52c <spi_m_sync_init+0x40>)
     504:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     506:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     508:	1d20      	adds	r0, r4, #4
     50a:	0029      	movs	r1, r5
     50c:	4b08      	ldr	r3, [pc, #32]	; (530 <spi_m_sync_init+0x44>)
     50e:	4798      	blx	r3

	if (rc < 0) {
     510:	2800      	cmp	r0, #0
     512:	db06      	blt.n	522 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     514:	4b07      	ldr	r3, [pc, #28]	; (534 <spi_m_sync_init+0x48>)
     516:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     518:	4b07      	ldr	r3, [pc, #28]	; (538 <spi_m_sync_init+0x4c>)
     51a:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     51c:	4b07      	ldr	r3, [pc, #28]	; (53c <spi_m_sync_init+0x50>)
     51e:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     520:	2000      	movs	r0, #0
}
     522:	bd70      	pop	{r4, r5, r6, pc}
     524:	2000      	movs	r0, #0
     526:	e7ea      	b.n	4fe <spi_m_sync_init+0x12>
     528:	000015d8 	.word	0x000015d8
     52c:	0000079d 	.word	0x0000079d
     530:	00000fd5 	.word	0x00000fd5
     534:	ffff8000 	.word	0xffff8000
     538:	000005f1 	.word	0x000005f1
     53c:	000005b5 	.word	0x000005b5

00000540 <spi_m_sync_set_mode>:
	ASSERT(spi);
	return _spi_m_sync_set_baudrate(&spi->dev, baud_val);
}

int32_t spi_m_sync_set_mode(struct spi_m_sync_descriptor *spi, const enum spi_transfer_mode mode)
{
     540:	b570      	push	{r4, r5, r6, lr}
     542:	0004      	movs	r4, r0
     544:	000d      	movs	r5, r1
	ASSERT(spi);
     546:	1e43      	subs	r3, r0, #1
     548:	4198      	sbcs	r0, r3
     54a:	b2c0      	uxtb	r0, r0
     54c:	2269      	movs	r2, #105	; 0x69
     54e:	4904      	ldr	r1, [pc, #16]	; (560 <spi_m_sync_set_mode+0x20>)
     550:	4b04      	ldr	r3, [pc, #16]	; (564 <spi_m_sync_set_mode+0x24>)
     552:	4798      	blx	r3
	return _spi_m_sync_set_mode(&spi->dev, mode);
     554:	1d20      	adds	r0, r4, #4
     556:	0029      	movs	r1, r5
     558:	4b03      	ldr	r3, [pc, #12]	; (568 <spi_m_sync_set_mode+0x28>)
     55a:	4798      	blx	r3
}
     55c:	bd70      	pop	{r4, r5, r6, pc}
     55e:	46c0      	nop			; (mov r8, r8)
     560:	000015d8 	.word	0x000015d8
     564:	0000079d 	.word	0x0000079d
     568:	000010cd 	.word	0x000010cd

0000056c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     56c:	b530      	push	{r4, r5, lr}
     56e:	b087      	sub	sp, #28
     570:	0004      	movs	r4, r0
     572:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     574:	2800      	cmp	r0, #0
     576:	d014      	beq.n	5a2 <spi_m_sync_transfer+0x36>
     578:	0008      	movs	r0, r1
     57a:	1e43      	subs	r3, r0, #1
     57c:	4198      	sbcs	r0, r3
     57e:	b2c0      	uxtb	r0, r0
     580:	22b3      	movs	r2, #179	; 0xb3
     582:	4909      	ldr	r1, [pc, #36]	; (5a8 <spi_m_sync_transfer+0x3c>)
     584:	4b09      	ldr	r3, [pc, #36]	; (5ac <spi_m_sync_transfer+0x40>)
     586:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     588:	682b      	ldr	r3, [r5, #0]
     58a:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     58c:	686b      	ldr	r3, [r5, #4]
     58e:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     590:	68ab      	ldr	r3, [r5, #8]
     592:	9301      	str	r3, [sp, #4]
     594:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     596:	1d20      	adds	r0, r4, #4
     598:	a903      	add	r1, sp, #12
     59a:	4b05      	ldr	r3, [pc, #20]	; (5b0 <spi_m_sync_transfer+0x44>)
     59c:	4798      	blx	r3
}
     59e:	b007      	add	sp, #28
     5a0:	bd30      	pop	{r4, r5, pc}
     5a2:	2000      	movs	r0, #0
     5a4:	e7ec      	b.n	580 <spi_m_sync_transfer+0x14>
     5a6:	46c0      	nop			; (mov r8, r8)
     5a8:	000015d8 	.word	0x000015d8
     5ac:	0000079d 	.word	0x0000079d
     5b0:	00001105 	.word	0x00001105

000005b4 <_spi_m_sync_io_write>:
{
     5b4:	b570      	push	{r4, r5, r6, lr}
     5b6:	b084      	sub	sp, #16
     5b8:	0004      	movs	r4, r0
     5ba:	000e      	movs	r6, r1
     5bc:	0015      	movs	r5, r2
	ASSERT(io);
     5be:	1e43      	subs	r3, r0, #1
     5c0:	4198      	sbcs	r0, r3
     5c2:	b2c0      	uxtb	r0, r0
     5c4:	22a3      	movs	r2, #163	; 0xa3
     5c6:	4907      	ldr	r1, [pc, #28]	; (5e4 <_spi_m_sync_io_write+0x30>)
     5c8:	4b07      	ldr	r3, [pc, #28]	; (5e8 <_spi_m_sync_io_write+0x34>)
     5ca:	4798      	blx	r3
	xfer.rxbuf = 0;
     5cc:	2300      	movs	r3, #0
     5ce:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     5d0:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     5d2:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     5d4:	0020      	movs	r0, r4
     5d6:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     5d8:	a901      	add	r1, sp, #4
     5da:	4b04      	ldr	r3, [pc, #16]	; (5ec <_spi_m_sync_io_write+0x38>)
     5dc:	4798      	blx	r3
}
     5de:	b004      	add	sp, #16
     5e0:	bd70      	pop	{r4, r5, r6, pc}
     5e2:	46c0      	nop			; (mov r8, r8)
     5e4:	000015d8 	.word	0x000015d8
     5e8:	0000079d 	.word	0x0000079d
     5ec:	0000056d 	.word	0x0000056d

000005f0 <_spi_m_sync_io_read>:
{
     5f0:	b570      	push	{r4, r5, r6, lr}
     5f2:	b084      	sub	sp, #16
     5f4:	0004      	movs	r4, r0
     5f6:	000e      	movs	r6, r1
     5f8:	0015      	movs	r5, r2
	ASSERT(io);
     5fa:	1e43      	subs	r3, r0, #1
     5fc:	4198      	sbcs	r0, r3
     5fe:	b2c0      	uxtb	r0, r0
     600:	2287      	movs	r2, #135	; 0x87
     602:	4907      	ldr	r1, [pc, #28]	; (620 <_spi_m_sync_io_read+0x30>)
     604:	4b07      	ldr	r3, [pc, #28]	; (624 <_spi_m_sync_io_read+0x34>)
     606:	4798      	blx	r3
	xfer.rxbuf = buf;
     608:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     60a:	2300      	movs	r3, #0
     60c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     60e:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     610:	0020      	movs	r0, r4
     612:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     614:	a901      	add	r1, sp, #4
     616:	4b04      	ldr	r3, [pc, #16]	; (628 <_spi_m_sync_io_read+0x38>)
     618:	4798      	blx	r3
}
     61a:	b004      	add	sp, #16
     61c:	bd70      	pop	{r4, r5, r6, pc}
     61e:	46c0      	nop			; (mov r8, r8)
     620:	000015d8 	.word	0x000015d8
     624:	0000079d 	.word	0x0000079d
     628:	0000056d 	.word	0x0000056d

0000062c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     62c:	b570      	push	{r4, r5, r6, lr}
     62e:	0004      	movs	r4, r0
     630:	000d      	movs	r5, r1
	ASSERT(spi && io);
     632:	2800      	cmp	r0, #0
     634:	d00b      	beq.n	64e <spi_m_sync_get_io_descriptor+0x22>
     636:	0008      	movs	r0, r1
     638:	1e43      	subs	r3, r0, #1
     63a:	4198      	sbcs	r0, r3
     63c:	b2c0      	uxtb	r0, r0
     63e:	22bd      	movs	r2, #189	; 0xbd
     640:	4904      	ldr	r1, [pc, #16]	; (654 <spi_m_sync_get_io_descriptor+0x28>)
     642:	4b05      	ldr	r3, [pc, #20]	; (658 <spi_m_sync_get_io_descriptor+0x2c>)
     644:	4798      	blx	r3
	*io = &spi->io;
     646:	340c      	adds	r4, #12
     648:	602c      	str	r4, [r5, #0]
	return 0;
}
     64a:	2000      	movs	r0, #0
     64c:	bd70      	pop	{r4, r5, r6, pc}
     64e:	2000      	movs	r0, #0
     650:	e7f5      	b.n	63e <spi_m_sync_get_io_descriptor+0x12>
     652:	46c0      	nop			; (mov r8, r8)
     654:	000015d8 	.word	0x000015d8
     658:	0000079d 	.word	0x0000079d

0000065c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     65e:	46ce      	mov	lr, r9
     660:	4647      	mov	r7, r8
     662:	b580      	push	{r7, lr}
     664:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     666:	6803      	ldr	r3, [r0, #0]
     668:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     66a:	2b00      	cmp	r3, #0
     66c:	d005      	beq.n	67a <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     66e:	688e      	ldr	r6, [r1, #8]
     670:	001c      	movs	r4, r3
     672:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     674:	2701      	movs	r7, #1
     676:	1abf      	subs	r7, r7, r2
     678:	e00d      	b.n	696 <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     67a:	4b12      	ldr	r3, [pc, #72]	; (6c4 <timer_add_timer_task+0x68>)
     67c:	4798      	blx	r3
		return;
     67e:	e018      	b.n	6b2 <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     680:	18fb      	adds	r3, r7, r3
     682:	68a0      	ldr	r0, [r4, #8]
     684:	4680      	mov	r8, r0
     686:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     688:	42b3      	cmp	r3, r6
     68a:	d20c      	bcs.n	6a6 <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     68c:	6823      	ldr	r3, [r4, #0]
     68e:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     690:	2b00      	cmp	r3, #0
     692:	d00b      	beq.n	6ac <timer_add_timer_task+0x50>
     694:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     696:	6863      	ldr	r3, [r4, #4]
     698:	4293      	cmp	r3, r2
     69a:	d8f1      	bhi.n	680 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     69c:	68a0      	ldr	r0, [r4, #8]
     69e:	4680      	mov	r8, r0
     6a0:	4443      	add	r3, r8
     6a2:	1a9b      	subs	r3, r3, r2
     6a4:	e7f0      	b.n	688 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     6a6:	45a4      	cmp	ip, r4
     6a8:	d007      	beq.n	6ba <timer_add_timer_task+0x5e>
     6aa:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     6ac:	0020      	movs	r0, r4
     6ae:	4b06      	ldr	r3, [pc, #24]	; (6c8 <timer_add_timer_task+0x6c>)
     6b0:	4798      	blx	r3
	}
}
     6b2:	bc0c      	pop	{r2, r3}
     6b4:	4690      	mov	r8, r2
     6b6:	4699      	mov	r9, r3
     6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     6ba:	4648      	mov	r0, r9
     6bc:	4b01      	ldr	r3, [pc, #4]	; (6c4 <timer_add_timer_task+0x68>)
     6be:	4798      	blx	r3
     6c0:	e7f7      	b.n	6b2 <timer_add_timer_task+0x56>
     6c2:	46c0      	nop			; (mov r8, r8)
     6c4:	000007c9 	.word	0x000007c9
     6c8:	000007f5 	.word	0x000007f5

000006cc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ce:	46c6      	mov	lr, r8
     6d0:	b500      	push	{lr}
     6d2:	b082      	sub	sp, #8
     6d4:	0007      	movs	r7, r0
	return (void *)list->head;
     6d6:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     6d8:	6903      	ldr	r3, [r0, #16]
     6da:	3301      	adds	r3, #1
     6dc:	4698      	mov	r8, r3
     6de:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     6e0:	7e03      	ldrb	r3, [r0, #24]
     6e2:	07db      	lsls	r3, r3, #31
     6e4:	d411      	bmi.n	70a <timer_process_counted+0x3e>
     6e6:	7e03      	ldrb	r3, [r0, #24]
     6e8:	079b      	lsls	r3, r3, #30
     6ea:	d40e      	bmi.n	70a <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     6ec:	2c00      	cmp	r4, #0
     6ee:	d010      	beq.n	712 <timer_process_counted+0x46>
     6f0:	4643      	mov	r3, r8
     6f2:	6862      	ldr	r2, [r4, #4]
     6f4:	1a9b      	subs	r3, r3, r2
     6f6:	68a2      	ldr	r2, [r4, #8]
     6f8:	4293      	cmp	r3, r2
     6fa:	d30a      	bcc.n	712 <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     6fc:	2314      	movs	r3, #20
     6fe:	469c      	mov	ip, r3
     700:	4484      	add	ip, r0
     702:	4663      	mov	r3, ip
     704:	9301      	str	r3, [sp, #4]
     706:	4e12      	ldr	r6, [pc, #72]	; (750 <timer_process_counted+0x84>)
     708:	e014      	b.n	734 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     70a:	7e3b      	ldrb	r3, [r7, #24]
     70c:	2202      	movs	r2, #2
     70e:	4313      	orrs	r3, r2
     710:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     712:	b002      	add	sp, #8
     714:	bc04      	pop	{r2}
     716:	4690      	mov	r8, r2
     718:	bdf0      	pop	{r4, r5, r6, r7, pc}
     71a:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     71c:	68e3      	ldr	r3, [r4, #12]
     71e:	0020      	movs	r0, r4
     720:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     722:	2d00      	cmp	r5, #0
     724:	d0f5      	beq.n	712 <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     726:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     728:	4643      	mov	r3, r8
     72a:	686a      	ldr	r2, [r5, #4]
     72c:	1a9b      	subs	r3, r3, r2
     72e:	68aa      	ldr	r2, [r5, #8]
     730:	4293      	cmp	r3, r2
     732:	d3ee      	bcc.n	712 <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     734:	9801      	ldr	r0, [sp, #4]
     736:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     738:	7c23      	ldrb	r3, [r4, #16]
     73a:	2b01      	cmp	r3, #1
     73c:	d1ed      	bne.n	71a <timer_process_counted+0x4e>
			tmp->time_label = time;
     73e:	4643      	mov	r3, r8
     740:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     742:	4642      	mov	r2, r8
     744:	0021      	movs	r1, r4
     746:	9801      	ldr	r0, [sp, #4]
     748:	4b02      	ldr	r3, [pc, #8]	; (754 <timer_process_counted+0x88>)
     74a:	4798      	blx	r3
     74c:	e7e5      	b.n	71a <timer_process_counted+0x4e>
     74e:	46c0      	nop			; (mov r8, r8)
     750:	000007fd 	.word	0x000007fd
     754:	0000065d 	.word	0x0000065d

00000758 <timer_init>:
{
     758:	b570      	push	{r4, r5, r6, lr}
     75a:	0005      	movs	r5, r0
     75c:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     75e:	2800      	cmp	r0, #0
     760:	d011      	beq.n	786 <timer_init+0x2e>
     762:	0008      	movs	r0, r1
     764:	1e43      	subs	r3, r0, #1
     766:	4198      	sbcs	r0, r3
     768:	b2c0      	uxtb	r0, r0
     76a:	223b      	movs	r2, #59	; 0x3b
     76c:	4907      	ldr	r1, [pc, #28]	; (78c <timer_init+0x34>)
     76e:	4b08      	ldr	r3, [pc, #32]	; (790 <timer_init+0x38>)
     770:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     772:	0021      	movs	r1, r4
     774:	0028      	movs	r0, r5
     776:	4b07      	ldr	r3, [pc, #28]	; (794 <timer_init+0x3c>)
     778:	4798      	blx	r3
	descr->time                           = 0;
     77a:	2300      	movs	r3, #0
     77c:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     77e:	4b06      	ldr	r3, [pc, #24]	; (798 <timer_init+0x40>)
     780:	602b      	str	r3, [r5, #0]
}
     782:	2000      	movs	r0, #0
     784:	bd70      	pop	{r4, r5, r6, pc}
     786:	2000      	movs	r0, #0
     788:	e7ef      	b.n	76a <timer_init+0x12>
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	000015f4 	.word	0x000015f4
     790:	0000079d 	.word	0x0000079d
     794:	000008a1 	.word	0x000008a1
     798:	000006cd 	.word	0x000006cd

0000079c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     79c:	2800      	cmp	r0, #0
     79e:	d100      	bne.n	7a2 <assert+0x6>
		__asm("BKPT #0");
     7a0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     7a2:	4770      	bx	lr

000007a4 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     7a4:	6803      	ldr	r3, [r0, #0]
     7a6:	2b00      	cmp	r3, #0
     7a8:	d00a      	beq.n	7c0 <is_list_element+0x1c>
		if (it == element) {
     7aa:	428b      	cmp	r3, r1
     7ac:	d00a      	beq.n	7c4 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     7ae:	681b      	ldr	r3, [r3, #0]
     7b0:	2b00      	cmp	r3, #0
     7b2:	d003      	beq.n	7bc <is_list_element+0x18>
		if (it == element) {
     7b4:	4299      	cmp	r1, r3
     7b6:	d1fa      	bne.n	7ae <is_list_element+0xa>
			return true;
     7b8:	2001      	movs	r0, #1
     7ba:	e000      	b.n	7be <is_list_element+0x1a>
		}
	}

	return false;
     7bc:	2000      	movs	r0, #0
}
     7be:	4770      	bx	lr
	return false;
     7c0:	2000      	movs	r0, #0
     7c2:	e7fc      	b.n	7be <is_list_element+0x1a>
			return true;
     7c4:	2001      	movs	r0, #1
     7c6:	e7fa      	b.n	7be <is_list_element+0x1a>

000007c8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     7c8:	b570      	push	{r4, r5, r6, lr}
     7ca:	0004      	movs	r4, r0
     7cc:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     7ce:	4b06      	ldr	r3, [pc, #24]	; (7e8 <list_insert_as_head+0x20>)
     7d0:	4798      	blx	r3
     7d2:	2301      	movs	r3, #1
     7d4:	4058      	eors	r0, r3
     7d6:	b2c0      	uxtb	r0, r0
     7d8:	2239      	movs	r2, #57	; 0x39
     7da:	4904      	ldr	r1, [pc, #16]	; (7ec <list_insert_as_head+0x24>)
     7dc:	4b04      	ldr	r3, [pc, #16]	; (7f0 <list_insert_as_head+0x28>)
     7de:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     7e0:	6823      	ldr	r3, [r4, #0]
     7e2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     7e4:	6025      	str	r5, [r4, #0]
}
     7e6:	bd70      	pop	{r4, r5, r6, pc}
     7e8:	000007a5 	.word	0x000007a5
     7ec:	0000160c 	.word	0x0000160c
     7f0:	0000079d 	.word	0x0000079d

000007f4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     7f4:	6803      	ldr	r3, [r0, #0]
     7f6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     7f8:	6001      	str	r1, [r0, #0]
}
     7fa:	4770      	bx	lr

000007fc <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     7fc:	6803      	ldr	r3, [r0, #0]
     7fe:	2b00      	cmp	r3, #0
     800:	d001      	beq.n	806 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     802:	681a      	ldr	r2, [r3, #0]
     804:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     806:	0018      	movs	r0, r3
     808:	4770      	bx	lr
	...

0000080c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
     80c:	b510      	push	{r4, lr}
     80e:	0003      	movs	r3, r0
		return (us * (freq / 10000) + 299) / 300;
     810:	2064      	movs	r0, #100	; 0x64
     812:	4358      	muls	r0, r3
     814:	302c      	adds	r0, #44	; 0x2c
     816:	30ff      	adds	r0, #255	; 0xff
     818:	2196      	movs	r1, #150	; 0x96
     81a:	0049      	lsls	r1, r1, #1
     81c:	4b01      	ldr	r3, [pc, #4]	; (824 <_get_cycles_for_us+0x18>)
     81e:	4798      	blx	r3
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     820:	bd10      	pop	{r4, pc}
     822:	46c0      	nop			; (mov r8, r8)
     824:	0000145d 	.word	0x0000145d

00000828 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     828:	3901      	subs	r1, #1
     82a:	d8fd      	bhi.n	828 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     82c:	4770      	bx	lr
	...

00000830 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     830:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     832:	4b06      	ldr	r3, [pc, #24]	; (84c <_init_chip+0x1c>)
     834:	685a      	ldr	r2, [r3, #4]
     836:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     838:	4b05      	ldr	r3, [pc, #20]	; (850 <_init_chip+0x20>)
     83a:	4798      	blx	r3
	_sysctrl_init_sources();
     83c:	4b05      	ldr	r3, [pc, #20]	; (854 <_init_chip+0x24>)
     83e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     840:	4b05      	ldr	r3, [pc, #20]	; (858 <_init_chip+0x28>)
     842:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     844:	20ff      	movs	r0, #255	; 0xff
     846:	4b05      	ldr	r3, [pc, #20]	; (85c <_init_chip+0x2c>)
     848:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     84a:	bd10      	pop	{r4, pc}
     84c:	41004000 	.word	0x41004000
     850:	00000881 	.word	0x00000881
     854:	00001215 	.word	0x00001215
     858:	0000125d 	.word	0x0000125d
     85c:	00000861 	.word	0x00000861

00000860 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     860:	07c3      	lsls	r3, r0, #31
     862:	d50a      	bpl.n	87a <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     864:	4b05      	ldr	r3, [pc, #20]	; (87c <_gclk_init_generators_by_fref+0x1c>)
     866:	2280      	movs	r2, #128	; 0x80
     868:	0052      	lsls	r2, r2, #1
     86a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     86c:	2283      	movs	r2, #131	; 0x83
     86e:	0252      	lsls	r2, r2, #9
     870:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     872:	001a      	movs	r2, r3
     874:	7853      	ldrb	r3, [r2, #1]
     876:	09db      	lsrs	r3, r3, #7
     878:	d1fc      	bne.n	874 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     87a:	4770      	bx	lr
     87c:	40000c00 	.word	0x40000c00

00000880 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     880:	4b06      	ldr	r3, [pc, #24]	; (89c <_pm_init+0x1c>)
     882:	7a1a      	ldrb	r2, [r3, #8]
     884:	b2d2      	uxtb	r2, r2
     886:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     888:	7a5a      	ldrb	r2, [r3, #9]
     88a:	b2d2      	uxtb	r2, r2
     88c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     88e:	7a9a      	ldrb	r2, [r3, #10]
     890:	b2d2      	uxtb	r2, r2
     892:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     894:	7ada      	ldrb	r2, [r3, #11]
     896:	b2d2      	uxtb	r2, r2
     898:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     89a:	4770      	bx	lr
     89c:	40000400 	.word	0x40000400

000008a0 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
     8a0:	b570      	push	{r4, r5, r6, lr}
     8a2:	0004      	movs	r4, r0
     8a4:	000d      	movs	r5, r1
	ASSERT(dev);
     8a6:	1e43      	subs	r3, r0, #1
     8a8:	4198      	sbcs	r0, r3
     8aa:	b2c0      	uxtb	r0, r0
     8ac:	2233      	movs	r2, #51	; 0x33
     8ae:	4910      	ldr	r1, [pc, #64]	; (8f0 <_timer_init+0x50>)
     8b0:	4b10      	ldr	r3, [pc, #64]	; (8f4 <_timer_init+0x54>)
     8b2:	4798      	blx	r3

	uint16_t register_value;
	dev->hw = hw;
     8b4:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     8b6:	2301      	movs	r3, #1
     8b8:	802b      	strh	r3, [r5, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     8ba:	7aab      	ldrb	r3, [r5, #10]
     8bc:	09db      	lsrs	r3, r3, #7
     8be:	d1fc      	bne.n	8ba <_timer_init+0x1a>

	hri_rtcmode0_write_CTRL_reg(dev->hw, RTC_MODE0_CTRL_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw);
     8c0:	68e2      	ldr	r2, [r4, #12]
     8c2:	7a93      	ldrb	r3, [r2, #10]
     8c4:	09db      	lsrs	r3, r3, #7
     8c6:	d1fc      	bne.n	8c2 <_timer_init+0x22>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     8c8:	3380      	adds	r3, #128	; 0x80
     8ca:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     8cc:	7a93      	ldrb	r3, [r2, #10]
     8ce:	09db      	lsrs	r3, r3, #7
     8d0:	d1fc      	bne.n	8cc <_timer_init+0x2c>
	/* clear counter on compare/timer match */
	register_value |= RTC_MODE0_CTRL_MATCHCLR;

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
     8d2:	68e2      	ldr	r2, [r4, #12]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     8d4:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     8d6:	2380      	movs	r3, #128	; 0x80
     8d8:	00db      	lsls	r3, r3, #3
     8da:	6193      	str	r3, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     8dc:	7a93      	ldrb	r3, [r2, #10]
     8de:	09db      	lsrs	r3, r3, #7
     8e0:	d1fc      	bne.n	8dc <_timer_init+0x3c>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     8e2:	3301      	adds	r3, #1
     8e4:	68e2      	ldr	r2, [r4, #12]
     8e6:	71d3      	strb	r3, [r2, #7]
	        | (CONF_RTC_PEREO4 << RTC_MODE0_EVCTRL_PEREO4_Pos) | (CONF_RTC_PEREO5 << RTC_MODE0_EVCTRL_PEREO5_Pos)
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	_rtc_dev = dev;
     8e8:	4b03      	ldr	r3, [pc, #12]	; (8f8 <_timer_init+0x58>)
     8ea:	601c      	str	r4, [r3, #0]

	return ERR_NONE;
}
     8ec:	2000      	movs	r0, #0
     8ee:	bd70      	pop	{r4, r5, r6, pc}
     8f0:	0000162c 	.word	0x0000162c
     8f4:	0000079d 	.word	0x0000079d
     8f8:	20000064 	.word	0x20000064

000008fc <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     8fc:	2000      	movs	r0, #0
     8fe:	4770      	bx	lr

00000900 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     900:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     902:	4b07      	ldr	r3, [pc, #28]	; (920 <RTC_Handler+0x20>)
     904:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     906:	68e3      	ldr	r3, [r4, #12]
     908:	7a1b      	ldrb	r3, [r3, #8]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     90a:	07db      	lsls	r3, r3, #31
     90c:	d507      	bpl.n	91e <RTC_Handler+0x1e>
		if (dev->timer_cb.period_expired) {
     90e:	6823      	ldr	r3, [r4, #0]
     910:	2b00      	cmp	r3, #0
     912:	d001      	beq.n	918 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
     914:	0020      	movs	r0, r4
     916:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     918:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     91a:	2201      	movs	r2, #1
     91c:	721a      	strb	r2, [r3, #8]
}
     91e:	bd10      	pop	{r4, pc}
     920:	20000064 	.word	0x20000064

00000924 <_spi_set_mode>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     924:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
     926:	079b      	lsls	r3, r3, #30
     928:	d112      	bne.n	950 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     92a:	2203      	movs	r2, #3
     92c:	69c3      	ldr	r3, [r0, #28]
     92e:	421a      	tst	r2, r3
     930:	d1fc      	bne.n	92c <_spi_set_mode+0x8>
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_read_CTRLA_reg(const void *const hw)
{
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->SPI.CTRLA.reg;
     932:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
     934:	4a08      	ldr	r2, [pc, #32]	; (958 <_spi_set_mode+0x34>)
     936:	4013      	ands	r3, r2
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
     938:	0709      	lsls	r1, r1, #28
     93a:	22c0      	movs	r2, #192	; 0xc0
     93c:	0592      	lsls	r2, r2, #22
     93e:	4011      	ands	r1, r2
     940:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     942:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     944:	2203      	movs	r2, #3
     946:	69c3      	ldr	r3, [r0, #28]
     948:	421a      	tst	r2, r3
     94a:	d1fc      	bne.n	946 <_spi_set_mode+0x22>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
     94c:	2000      	movs	r0, #0
}
     94e:	4770      	bx	lr
		return ERR_BUSY;
     950:	2004      	movs	r0, #4
     952:	4240      	negs	r0, r0
     954:	e7fb      	b.n	94e <_spi_set_mode+0x2a>
     956:	46c0      	nop			; (mov r8, r8)
     958:	cfffffff 	.word	0xcfffffff

0000095c <_get_i2cm_index>:
{
     95c:	b510      	push	{r4, lr}
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     95e:	4b09      	ldr	r3, [pc, #36]	; (984 <_get_i2cm_index+0x28>)
     960:	469c      	mov	ip, r3
     962:	4460      	add	r0, ip
     964:	0a80      	lsrs	r0, r0, #10
		if (_i2cms[i].number == sercom_offset) {
     966:	b2c0      	uxtb	r0, r0
     968:	2803      	cmp	r0, #3
     96a:	d008      	beq.n	97e <_get_i2cm_index+0x22>
	ASSERT(false);
     96c:	22e6      	movs	r2, #230	; 0xe6
     96e:	0092      	lsls	r2, r2, #2
     970:	4905      	ldr	r1, [pc, #20]	; (988 <_get_i2cm_index+0x2c>)
     972:	2000      	movs	r0, #0
     974:	4b05      	ldr	r3, [pc, #20]	; (98c <_get_i2cm_index+0x30>)
     976:	4798      	blx	r3
	return -1;
     978:	2001      	movs	r0, #1
     97a:	4240      	negs	r0, r0
}
     97c:	bd10      	pop	{r4, pc}
			return i;
     97e:	2000      	movs	r0, #0
     980:	e7fc      	b.n	97c <_get_i2cm_index+0x20>
     982:	46c0      	nop			; (mov r8, r8)
     984:	bdfff800 	.word	0xbdfff800
     988:	0000165c 	.word	0x0000165c
     98c:	0000079d 	.word	0x0000079d

00000990 <_i2c_m_sync_init_impl>:
{
     990:	b570      	push	{r4, r5, r6, lr}
     992:	0005      	movs	r5, r0
     994:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
     996:	0008      	movs	r0, r1
     998:	4b31      	ldr	r3, [pc, #196]	; (a60 <_i2c_m_sync_init_impl+0xd0>)
     99a:	4798      	blx	r3
     99c:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
     99e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
     9a0:	07db      	lsls	r3, r3, #31
     9a2:	d421      	bmi.n	9e8 <_i2c_m_sync_init_impl+0x58>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
     9a4:	0043      	lsls	r3, r0, #1
     9a6:	181b      	adds	r3, r3, r0
     9a8:	00db      	lsls	r3, r3, #3
     9aa:	4a2e      	ldr	r2, [pc, #184]	; (a64 <_i2c_m_sync_init_impl+0xd4>)
     9ac:	18d3      	adds	r3, r2, r3
     9ae:	6859      	ldr	r1, [r3, #4]
     9b0:	231c      	movs	r3, #28
     9b2:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     9b4:	2203      	movs	r2, #3
     9b6:	69e3      	ldr	r3, [r4, #28]
     9b8:	421a      	tst	r2, r3
     9ba:	d1fc      	bne.n	9b6 <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     9bc:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
     9be:	079b      	lsls	r3, r3, #30
     9c0:	d50b      	bpl.n	9da <_i2c_m_sync_init_impl+0x4a>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     9c2:	6823      	ldr	r3, [r4, #0]
     9c4:	2202      	movs	r2, #2
     9c6:	4393      	bics	r3, r2
     9c8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     9ca:	3201      	adds	r2, #1
     9cc:	69e3      	ldr	r3, [r4, #28]
     9ce:	421a      	tst	r2, r3
     9d0:	d1fc      	bne.n	9cc <_i2c_m_sync_init_impl+0x3c>
     9d2:	2202      	movs	r2, #2
     9d4:	69e3      	ldr	r3, [r4, #28]
     9d6:	421a      	tst	r2, r3
     9d8:	d1fc      	bne.n	9d4 <_i2c_m_sync_init_impl+0x44>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
     9da:	2301      	movs	r3, #1
     9dc:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     9de:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     9e0:	2203      	movs	r2, #3
     9e2:	69e3      	ldr	r3, [r4, #28]
     9e4:	421a      	tst	r2, r3
     9e6:	d1fc      	bne.n	9e2 <_i2c_m_sync_init_impl+0x52>
     9e8:	2201      	movs	r2, #1
     9ea:	69e3      	ldr	r3, [r4, #28]
     9ec:	421a      	tst	r2, r3
     9ee:	d1fc      	bne.n	9ea <_i2c_m_sync_init_impl+0x5a>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
     9f0:	0043      	lsls	r3, r0, #1
     9f2:	181b      	adds	r3, r3, r0
     9f4:	00db      	lsls	r3, r3, #3
     9f6:	4a1b      	ldr	r2, [pc, #108]	; (a64 <_i2c_m_sync_init_impl+0xd4>)
     9f8:	18d3      	adds	r3, r2, r3
     9fa:	6859      	ldr	r1, [r3, #4]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     9fc:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     9fe:	2203      	movs	r2, #3
     a00:	69e3      	ldr	r3, [r4, #28]
     a02:	421a      	tst	r2, r3
     a04:	d1fc      	bne.n	a00 <_i2c_m_sync_init_impl+0x70>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
     a06:	0043      	lsls	r3, r0, #1
     a08:	181b      	adds	r3, r3, r0
     a0a:	00db      	lsls	r3, r3, #3
     a0c:	4a15      	ldr	r2, [pc, #84]	; (a64 <_i2c_m_sync_init_impl+0xd4>)
     a0e:	18d3      	adds	r3, r2, r3
     a10:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
     a12:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     a14:	2204      	movs	r2, #4
     a16:	69e3      	ldr	r3, [r4, #28]
     a18:	421a      	tst	r2, r3
     a1a:	d1fc      	bne.n	a16 <_i2c_m_sync_init_impl+0x86>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
     a1c:	0043      	lsls	r3, r0, #1
     a1e:	181b      	adds	r3, r3, r0
     a20:	00db      	lsls	r3, r3, #3
     a22:	4a10      	ldr	r2, [pc, #64]	; (a64 <_i2c_m_sync_init_impl+0xd4>)
     a24:	18d3      	adds	r3, r2, r3
     a26:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
     a28:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
     a2a:	0189      	lsls	r1, r1, #6
     a2c:	0f89      	lsrs	r1, r1, #30
     a2e:	81a9      	strh	r1, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
     a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
     a32:	4e0d      	ldr	r6, [pc, #52]	; (a68 <_i2c_m_sync_init_impl+0xd8>)
     a34:	401e      	ands	r6, r3
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
     a36:	2301      	movs	r3, #1
     a38:	428b      	cmp	r3, r1
     a3a:	419b      	sbcs	r3, r3
     a3c:	425b      	negs	r3, r3
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
     a3e:	039b      	lsls	r3, r3, #14
     a40:	4333      	orrs	r3, r6
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
     a42:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     a44:	2204      	movs	r2, #4
     a46:	69e3      	ldr	r3, [r4, #28]
     a48:	421a      	tst	r2, r3
     a4a:	d1fc      	bne.n	a46 <_i2c_m_sync_init_impl+0xb6>
	service->trise = _i2cms[i].trise;
     a4c:	0043      	lsls	r3, r0, #1
     a4e:	1818      	adds	r0, r3, r0
     a50:	00c0      	lsls	r0, r0, #3
     a52:	4b04      	ldr	r3, [pc, #16]	; (a64 <_i2c_m_sync_init_impl+0xd4>)
     a54:	1818      	adds	r0, r3, r0
     a56:	8a43      	ldrh	r3, [r0, #18]
     a58:	81eb      	strh	r3, [r5, #14]
}
     a5a:	2000      	movs	r0, #0
     a5c:	bd70      	pop	{r4, r5, r6, pc}
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	0000095d 	.word	0x0000095d
     a64:	00001644 	.word	0x00001644
     a68:	ffffbfff 	.word	0xffffbfff

00000a6c <_i2c_m_sync_init>:
{
     a6c:	b570      	push	{r4, r5, r6, lr}
     a6e:	0004      	movs	r4, r0
     a70:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
     a72:	1e43      	subs	r3, r0, #1
     a74:	4198      	sbcs	r0, r3
     a76:	b2c0      	uxtb	r0, r0
     a78:	4a04      	ldr	r2, [pc, #16]	; (a8c <_i2c_m_sync_init+0x20>)
     a7a:	4905      	ldr	r1, [pc, #20]	; (a90 <_i2c_m_sync_init+0x24>)
     a7c:	4b05      	ldr	r3, [pc, #20]	; (a94 <_i2c_m_sync_init+0x28>)
     a7e:	4798      	blx	r3
	i2c_dev->hw = hw;
     a80:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
     a82:	0029      	movs	r1, r5
     a84:	0020      	movs	r0, r4
     a86:	4b04      	ldr	r3, [pc, #16]	; (a98 <_i2c_m_sync_init+0x2c>)
     a88:	4798      	blx	r3
}
     a8a:	bd70      	pop	{r4, r5, r6, pc}
     a8c:	00000507 	.word	0x00000507
     a90:	0000165c 	.word	0x0000165c
     a94:	0000079d 	.word	0x0000079d
     a98:	00000991 	.word	0x00000991

00000a9c <_i2c_m_sync_transfer>:
{
     a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a9e:	46de      	mov	lr, fp
     aa0:	4657      	mov	r7, sl
     aa2:	464e      	mov	r6, r9
     aa4:	4645      	mov	r5, r8
     aa6:	b5e0      	push	{r5, r6, r7, lr}
     aa8:	b083      	sub	sp, #12
     aaa:	0005      	movs	r5, r0
     aac:	4688      	mov	r8, r1
	void *   hw = i2c_dev->hw;
     aae:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
     ab0:	0006      	movs	r6, r0
     ab2:	1e73      	subs	r3, r6, #1
     ab4:	419e      	sbcs	r6, r3
     ab6:	b2f3      	uxtb	r3, r6
     ab8:	9301      	str	r3, [sp, #4]
     aba:	4fb4      	ldr	r7, [pc, #720]	; (d8c <_i2c_m_sync_transfer+0x2f0>)
     abc:	4ab4      	ldr	r2, [pc, #720]	; (d90 <_i2c_m_sync_transfer+0x2f4>)
     abe:	0039      	movs	r1, r7
     ac0:	0018      	movs	r0, r3
     ac2:	4eb4      	ldr	r6, [pc, #720]	; (d94 <_i2c_m_sync_transfer+0x2f8>)
     ac4:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
     ac6:	6928      	ldr	r0, [r5, #16]
     ac8:	1e43      	subs	r3, r0, #1
     aca:	4198      	sbcs	r0, r3
     acc:	b2c0      	uxtb	r0, r0
     ace:	22b8      	movs	r2, #184	; 0xb8
     ad0:	00d2      	lsls	r2, r2, #3
     ad2:	0039      	movs	r1, r7
     ad4:	47b0      	blx	r6
	ASSERT(msg);
     ad6:	4640      	mov	r0, r8
     ad8:	1e43      	subs	r3, r0, #1
     ada:	4198      	sbcs	r0, r3
     adc:	b2c0      	uxtb	r0, r0
     ade:	4aae      	ldr	r2, [pc, #696]	; (d98 <_i2c_m_sync_transfer+0x2fc>)
     ae0:	0039      	movs	r1, r7
     ae2:	47b0      	blx	r6
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     ae4:	886b      	ldrh	r3, [r5, #2]
     ae6:	05db      	lsls	r3, r3, #23
     ae8:	d500      	bpl.n	aec <_i2c_m_sync_transfer+0x50>
     aea:	e224      	b.n	f36 <_i2c_m_sync_transfer+0x49a>
	msg->flags |= I2C_M_BUSY;
     aec:	4643      	mov	r3, r8
     aee:	885a      	ldrh	r2, [r3, #2]
     af0:	2380      	movs	r3, #128	; 0x80
     af2:	005b      	lsls	r3, r3, #1
     af4:	431a      	orrs	r2, r3
     af6:	4641      	mov	r1, r8
     af8:	804a      	strh	r2, [r1, #2]
	i2c_dev->service.msg = *msg;
     afa:	002a      	movs	r2, r5
     afc:	c9c1      	ldmia	r1!, {r0, r6, r7}
     afe:	c2c1      	stmia	r2!, {r0, r6, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
     b00:	6862      	ldr	r2, [r4, #4]
     b02:	4313      	orrs	r3, r2
     b04:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b06:	2204      	movs	r2, #4
     b08:	69e3      	ldr	r3, [r4, #28]
     b0a:	421a      	tst	r2, r3
     b0c:	d1fc      	bne.n	b08 <_i2c_m_sync_transfer+0x6c>
	void *             hw    = i2c_dev->hw;
     b0e:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     b10:	683b      	ldr	r3, [r7, #0]
     b12:	4699      	mov	r9, r3
	ASSERT(i2c_dev);
     b14:	4aa1      	ldr	r2, [pc, #644]	; (d9c <_i2c_m_sync_transfer+0x300>)
     b16:	499d      	ldr	r1, [pc, #628]	; (d8c <_i2c_m_sync_transfer+0x2f0>)
     b18:	9801      	ldr	r0, [sp, #4]
     b1a:	4b9e      	ldr	r3, [pc, #632]	; (d94 <_i2c_m_sync_transfer+0x2f8>)
     b1c:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
     b1e:	686b      	ldr	r3, [r5, #4]
     b20:	2b01      	cmp	r3, #1
     b22:	d05a      	beq.n	bda <_i2c_m_sync_transfer+0x13e>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     b24:	687b      	ldr	r3, [r7, #4]
     b26:	4a9e      	ldr	r2, [pc, #632]	; (da0 <_i2c_m_sync_transfer+0x304>)
     b28:	4013      	ands	r3, r2
     b2a:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b2c:	2204      	movs	r2, #4
     b2e:	69fb      	ldr	r3, [r7, #28]
     b30:	421a      	tst	r2, r3
     b32:	d1fc      	bne.n	b2e <_i2c_m_sync_transfer+0x92>
	if (msg->addr & I2C_M_TEN) {
     b34:	882b      	ldrh	r3, [r5, #0]
     b36:	055a      	lsls	r2, r3, #21
     b38:	d55c      	bpl.n	bf4 <_i2c_m_sync_transfer+0x158>
		if (msg->flags & I2C_M_RD) {
     b3a:	886a      	ldrh	r2, [r5, #2]
     b3c:	07d2      	lsls	r2, r2, #31
     b3e:	d504      	bpl.n	b4a <_i2c_m_sync_transfer+0xae>
			msg->flags |= I2C_M_TEN;
     b40:	886a      	ldrh	r2, [r5, #2]
     b42:	2180      	movs	r1, #128	; 0x80
     b44:	00c9      	lsls	r1, r1, #3
     b46:	430a      	orrs	r2, r1
     b48:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
     b4a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     b4c:	4995      	ldr	r1, [pc, #596]	; (da4 <_i2c_m_sync_transfer+0x308>)
     b4e:	4019      	ands	r1, r3
     b50:	2204      	movs	r2, #4
     b52:	69fb      	ldr	r3, [r7, #28]
     b54:	421a      	tst	r2, r3
     b56:	d1fc      	bne.n	b52 <_i2c_m_sync_transfer+0xb6>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b5a:	2280      	movs	r2, #128	; 0x80
     b5c:	01d2      	lsls	r2, r2, #7
     b5e:	401a      	ands	r2, r3
		hri_sercomi2cm_write_ADDR_reg(hw,
     b60:	2380      	movs	r3, #128	; 0x80
     b62:	021b      	lsls	r3, r3, #8
     b64:	4313      	orrs	r3, r2
     b66:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     b68:	6279      	str	r1, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b6a:	2204      	movs	r2, #4
     b6c:	69fb      	ldr	r3, [r7, #28]
     b6e:	421a      	tst	r2, r3
     b70:	d1fc      	bne.n	b6c <_i2c_m_sync_transfer+0xd0>
	void *   hw      = i2c_dev->hw;
     b72:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     b74:	7e0b      	ldrb	r3, [r1, #24]
     b76:	b2db      	uxtb	r3, r3
     b78:	4a8b      	ldr	r2, [pc, #556]	; (da8 <_i2c_m_sync_transfer+0x30c>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     b7a:	2003      	movs	r0, #3
     b7c:	4218      	tst	r0, r3
     b7e:	d104      	bne.n	b8a <_i2c_m_sync_transfer+0xee>
     b80:	7e0b      	ldrb	r3, [r1, #24]
     b82:	b2db      	uxtb	r3, r3
     b84:	3a01      	subs	r2, #1
		if (timeout-- == 0) {
     b86:	2a00      	cmp	r2, #0
     b88:	d1f8      	bne.n	b7c <_i2c_m_sync_transfer+0xe0>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     b8a:	683e      	ldr	r6, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b8c:	2104      	movs	r1, #4
     b8e:	69fa      	ldr	r2, [r7, #28]
     b90:	4211      	tst	r1, r2
     b92:	d1fc      	bne.n	b8e <_i2c_m_sync_transfer+0xf2>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     b94:	8b7a      	ldrh	r2, [r7, #26]
     b96:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
     b98:	07d9      	lsls	r1, r3, #31
     b9a:	d400      	bmi.n	b9e <_i2c_m_sync_transfer+0x102>
     b9c:	e0a0      	b.n	ce0 <_i2c_m_sync_transfer+0x244>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     b9e:	0793      	lsls	r3, r2, #30
     ba0:	d53e      	bpl.n	c20 <_i2c_m_sync_transfer+0x184>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     ba2:	2301      	movs	r3, #1
     ba4:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
     ba6:	886b      	ldrh	r3, [r5, #2]
     ba8:	2180      	movs	r1, #128	; 0x80
     baa:	0149      	lsls	r1, r1, #5
     bac:	430b      	orrs	r3, r1
     bae:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     bb0:	886b      	ldrh	r3, [r5, #2]
     bb2:	497e      	ldr	r1, [pc, #504]	; (dac <_i2c_m_sync_transfer+0x310>)
     bb4:	400b      	ands	r3, r1
     bb6:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     bb8:	2001      	movs	r0, #1
     bba:	0003      	movs	r3, r0
     bbc:	4013      	ands	r3, r2
			return I2C_ERR_BAD_ADDRESS;
     bbe:	4258      	negs	r0, r3
     bc0:	4158      	adcs	r0, r3
     bc2:	3805      	subs	r0, #5
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
     bc4:	886b      	ldrh	r3, [r5, #2]
     bc6:	4a79      	ldr	r2, [pc, #484]	; (dac <_i2c_m_sync_transfer+0x310>)
     bc8:	4013      	ands	r3, r2
     bca:	806b      	strh	r3, [r5, #2]
}
     bcc:	b003      	add	sp, #12
     bce:	bc3c      	pop	{r2, r3, r4, r5}
     bd0:	4690      	mov	r8, r2
     bd2:	4699      	mov	r9, r3
     bd4:	46a2      	mov	sl, r4
     bd6:	46ab      	mov	fp, r5
     bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->len == 1 && sclsm) {
     bda:	464b      	mov	r3, r9
     bdc:	011b      	lsls	r3, r3, #4
     bde:	d5a1      	bpl.n	b24 <_i2c_m_sync_transfer+0x88>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     be0:	687a      	ldr	r2, [r7, #4]
     be2:	2380      	movs	r3, #128	; 0x80
     be4:	02db      	lsls	r3, r3, #11
     be6:	4313      	orrs	r3, r2
     be8:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     bea:	2204      	movs	r2, #4
     bec:	69fb      	ldr	r3, [r7, #28]
     bee:	421a      	tst	r2, r3
     bf0:	d1fc      	bne.n	bec <_i2c_m_sync_transfer+0x150>
     bf2:	e79f      	b.n	b34 <_i2c_m_sync_transfer+0x98>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
     bf4:	886a      	ldrh	r2, [r5, #2]
     bf6:	005b      	lsls	r3, r3, #1
     bf8:	21ff      	movs	r1, #255	; 0xff
     bfa:	400b      	ands	r3, r1
     bfc:	39fe      	subs	r1, #254	; 0xfe
     bfe:	4011      	ands	r1, r2
     c00:	4319      	orrs	r1, r3
     c02:	2204      	movs	r2, #4
     c04:	69fb      	ldr	r3, [r7, #28]
     c06:	421a      	tst	r2, r3
     c08:	d1fc      	bne.n	c04 <_i2c_m_sync_transfer+0x168>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     c0c:	2280      	movs	r2, #128	; 0x80
     c0e:	01d2      	lsls	r2, r2, #7
     c10:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
     c12:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     c14:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c16:	2204      	movs	r2, #4
     c18:	69fb      	ldr	r3, [r7, #28]
     c1a:	421a      	tst	r2, r3
     c1c:	d1fc      	bne.n	c18 <_i2c_m_sync_transfer+0x17c>
     c1e:	e7a8      	b.n	b72 <_i2c_m_sync_transfer+0xd6>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     c20:	0753      	lsls	r3, r2, #29
     c22:	d41b      	bmi.n	c5c <_i2c_m_sync_transfer+0x1c0>
			if (msg->flags & I2C_M_TEN) {
     c24:	886b      	ldrh	r3, [r5, #2]
     c26:	055b      	lsls	r3, r3, #21
     c28:	d535      	bpl.n	c96 <_i2c_m_sync_transfer+0x1fa>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     c2a:	882b      	ldrh	r3, [r5, #0]
     c2c:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     c2e:	2106      	movs	r1, #6
     c30:	4019      	ands	r1, r3
     c32:	2204      	movs	r2, #4
     c34:	69fb      	ldr	r3, [r7, #28]
     c36:	421a      	tst	r2, r3
     c38:	d1fc      	bne.n	c34 <_i2c_m_sync_transfer+0x198>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c3c:	2280      	movs	r2, #128	; 0x80
     c3e:	01d2      	lsls	r2, r2, #7
     c40:	4013      	ands	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
     c42:	22f1      	movs	r2, #241	; 0xf1
     c44:	4313      	orrs	r3, r2
     c46:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     c48:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c4a:	3aed      	subs	r2, #237	; 0xed
     c4c:	69fb      	ldr	r3, [r7, #28]
     c4e:	421a      	tst	r2, r3
     c50:	d1fc      	bne.n	c4c <_i2c_m_sync_transfer+0x1b0>
				msg->flags &= ~I2C_M_TEN;
     c52:	886b      	ldrh	r3, [r5, #2]
     c54:	4a56      	ldr	r2, [pc, #344]	; (db0 <_i2c_m_sync_transfer+0x314>)
     c56:	4013      	ands	r3, r2
     c58:	806b      	strh	r3, [r5, #2]
     c5a:	e066      	b.n	d2a <_i2c_m_sync_transfer+0x28e>
				if (msg->len > 0) {
     c5c:	686b      	ldr	r3, [r5, #4]
     c5e:	2b00      	cmp	r3, #0
     c60:	dd04      	ble.n	c6c <_i2c_m_sync_transfer+0x1d0>
					msg->flags |= I2C_M_FAIL;
     c62:	886b      	ldrh	r3, [r5, #2]
     c64:	2280      	movs	r2, #128	; 0x80
     c66:	0152      	lsls	r2, r2, #5
     c68:	4313      	orrs	r3, r2
     c6a:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     c6c:	886b      	ldrh	r3, [r5, #2]
     c6e:	b21b      	sxth	r3, r3
     c70:	2b00      	cmp	r3, #0
     c72:	db06      	blt.n	c82 <_i2c_m_sync_transfer+0x1e6>
				msg->flags &= ~I2C_M_BUSY;
     c74:	886b      	ldrh	r3, [r5, #2]
     c76:	4a4d      	ldr	r2, [pc, #308]	; (dac <_i2c_m_sync_transfer+0x310>)
     c78:	4013      	ands	r3, r2
     c7a:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     c7c:	2002      	movs	r0, #2
     c7e:	4240      	negs	r0, r0
     c80:	e7a0      	b.n	bc4 <_i2c_m_sync_transfer+0x128>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     c82:	687a      	ldr	r2, [r7, #4]
     c84:	23c0      	movs	r3, #192	; 0xc0
     c86:	029b      	lsls	r3, r3, #10
     c88:	4313      	orrs	r3, r2
     c8a:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c8c:	2304      	movs	r3, #4
     c8e:	69fa      	ldr	r2, [r7, #28]
     c90:	4213      	tst	r3, r2
     c92:	d1fc      	bne.n	c8e <_i2c_m_sync_transfer+0x1f2>
     c94:	e7ee      	b.n	c74 <_i2c_m_sync_transfer+0x1d8>
			if (msg->len == 0) {
     c96:	686b      	ldr	r3, [r5, #4]
     c98:	2b00      	cmp	r3, #0
     c9a:	d112      	bne.n	cc2 <_i2c_m_sync_transfer+0x226>
				if (msg->flags & I2C_M_STOP) {
     c9c:	886b      	ldrh	r3, [r5, #2]
     c9e:	b21b      	sxth	r3, r3
     ca0:	2b00      	cmp	r3, #0
     ca2:	db04      	blt.n	cae <_i2c_m_sync_transfer+0x212>
				msg->flags &= ~I2C_M_BUSY;
     ca4:	886b      	ldrh	r3, [r5, #2]
     ca6:	4a41      	ldr	r2, [pc, #260]	; (dac <_i2c_m_sync_transfer+0x310>)
     ca8:	4013      	ands	r3, r2
     caa:	806b      	strh	r3, [r5, #2]
     cac:	e03d      	b.n	d2a <_i2c_m_sync_transfer+0x28e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     cae:	687a      	ldr	r2, [r7, #4]
     cb0:	23c0      	movs	r3, #192	; 0xc0
     cb2:	029b      	lsls	r3, r3, #10
     cb4:	4313      	orrs	r3, r2
     cb6:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cb8:	2204      	movs	r2, #4
     cba:	69fb      	ldr	r3, [r7, #28]
     cbc:	421a      	tst	r2, r3
     cbe:	d1fc      	bne.n	cba <_i2c_m_sync_transfer+0x21e>
     cc0:	e7f0      	b.n	ca4 <_i2c_m_sync_transfer+0x208>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     cc2:	68ab      	ldr	r3, [r5, #8]
     cc4:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     cc6:	2328      	movs	r3, #40	; 0x28
     cc8:	54fa      	strb	r2, [r7, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cca:	2204      	movs	r2, #4
     ccc:	69fb      	ldr	r3, [r7, #28]
     cce:	421a      	tst	r2, r3
     cd0:	d1fc      	bne.n	ccc <_i2c_m_sync_transfer+0x230>
				msg->buffer++;
     cd2:	68ab      	ldr	r3, [r5, #8]
     cd4:	3301      	adds	r3, #1
     cd6:	60ab      	str	r3, [r5, #8]
				msg->len--;
     cd8:	686b      	ldr	r3, [r5, #4]
     cda:	3b01      	subs	r3, #1
     cdc:	606b      	str	r3, [r5, #4]
     cde:	e024      	b.n	d2a <_i2c_m_sync_transfer+0x28e>
	} else if (flags & SB_FLAG) {
     ce0:	079b      	lsls	r3, r3, #30
     ce2:	d522      	bpl.n	d2a <_i2c_m_sync_transfer+0x28e>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     ce4:	686b      	ldr	r3, [r5, #4]
     ce6:	2b00      	cmp	r3, #0
     ce8:	d040      	beq.n	d6c <_i2c_m_sync_transfer+0x2d0>
     cea:	0752      	lsls	r2, r2, #29
     cec:	d43e      	bmi.n	d6c <_i2c_m_sync_transfer+0x2d0>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     cee:	0136      	lsls	r6, r6, #4
     cf0:	0ff6      	lsrs	r6, r6, #31
			msg->len--;
     cf2:	3b01      	subs	r3, #1
     cf4:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     cf6:	2b00      	cmp	r3, #0
     cf8:	d000      	beq.n	cfc <_i2c_m_sync_transfer+0x260>
     cfa:	e11f      	b.n	f3c <_i2c_m_sync_transfer+0x4a0>
     cfc:	2e00      	cmp	r6, #0
     cfe:	d100      	bne.n	d02 <_i2c_m_sync_transfer+0x266>
     d00:	e122      	b.n	f48 <_i2c_m_sync_transfer+0x4ac>
				if (msg->flags & I2C_M_STOP) {
     d02:	886b      	ldrh	r3, [r5, #2]
     d04:	b21b      	sxth	r3, r3
     d06:	2b00      	cmp	r3, #0
     d08:	db1d      	blt.n	d46 <_i2c_m_sync_transfer+0x2aa>
				msg->flags &= ~I2C_M_BUSY;
     d0a:	886b      	ldrh	r3, [r5, #2]
     d0c:	4a27      	ldr	r2, [pc, #156]	; (dac <_i2c_m_sync_transfer+0x310>)
     d0e:	4013      	ands	r3, r2
     d10:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     d12:	68a9      	ldr	r1, [r5, #8]
     d14:	1c4b      	adds	r3, r1, #1
     d16:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d18:	2204      	movs	r2, #4
     d1a:	69fb      	ldr	r3, [r7, #28]
     d1c:	421a      	tst	r2, r3
     d1e:	d1fc      	bne.n	d1a <_i2c_m_sync_transfer+0x27e>
	return ((Sercom *)hw)->I2CM.DATA.reg;
     d20:	2328      	movs	r3, #40	; 0x28
     d22:	5cfb      	ldrb	r3, [r7, r3]
     d24:	700b      	strb	r3, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     d26:	2302      	movs	r3, #2
     d28:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
     d2a:	2600      	movs	r6, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     d2c:	2380      	movs	r3, #128	; 0x80
     d2e:	005b      	lsls	r3, r3, #1
     d30:	469a      	mov	sl, r3
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     d32:	2103      	movs	r1, #3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d34:	2204      	movs	r2, #4
	if (flags & MB_FLAG) {
     d36:	3bff      	subs	r3, #255	; 0xff
     d38:	469c      	mov	ip, r3
	} else if (flags & SB_FLAG) {
     d3a:	3301      	adds	r3, #1
     d3c:	4699      	mov	r9, r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
     d3e:	3326      	adds	r3, #38	; 0x26
     d40:	469b      	mov	fp, r3
     d42:	9601      	str	r6, [sp, #4]
     d44:	e0c2      	b.n	ecc <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     d46:	687b      	ldr	r3, [r7, #4]
     d48:	4a18      	ldr	r2, [pc, #96]	; (dac <_i2c_m_sync_transfer+0x310>)
     d4a:	4013      	ands	r3, r2
     d4c:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d4e:	3206      	adds	r2, #6
     d50:	32ff      	adds	r2, #255	; 0xff
     d52:	69fb      	ldr	r3, [r7, #28]
     d54:	421a      	tst	r2, r3
     d56:	d1fc      	bne.n	d52 <_i2c_m_sync_transfer+0x2b6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     d58:	687a      	ldr	r2, [r7, #4]
     d5a:	23c0      	movs	r3, #192	; 0xc0
     d5c:	029b      	lsls	r3, r3, #10
     d5e:	4313      	orrs	r3, r2
     d60:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d62:	2204      	movs	r2, #4
     d64:	69fb      	ldr	r3, [r7, #28]
     d66:	421a      	tst	r2, r3
     d68:	d1fc      	bne.n	d64 <_i2c_m_sync_transfer+0x2c8>
     d6a:	e7ce      	b.n	d0a <_i2c_m_sync_transfer+0x26e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     d6c:	2302      	movs	r3, #2
     d6e:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
     d70:	2002      	movs	r0, #2
     d72:	4240      	negs	r0, r0
     d74:	e726      	b.n	bc4 <_i2c_m_sync_transfer+0x128>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     d76:	6862      	ldr	r2, [r4, #4]
     d78:	23c0      	movs	r3, #192	; 0xc0
     d7a:	029b      	lsls	r3, r3, #10
     d7c:	4313      	orrs	r3, r2
     d7e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d80:	2204      	movs	r2, #4
     d82:	69e3      	ldr	r3, [r4, #28]
     d84:	421a      	tst	r2, r3
     d86:	d1fc      	bne.n	d82 <_i2c_m_sync_transfer+0x2e6>
     d88:	e0b5      	b.n	ef6 <_i2c_m_sync_transfer+0x45a>
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	0000165c 	.word	0x0000165c
     d90:	000005bf 	.word	0x000005bf
     d94:	0000079d 	.word	0x0000079d
     d98:	000005c1 	.word	0x000005c1
     d9c:	00000594 	.word	0x00000594
     da0:	fffbffff 	.word	0xfffbffff
     da4:	000007fe 	.word	0x000007fe
     da8:	0000ffff 	.word	0x0000ffff
     dac:	fffffeff 	.word	0xfffffeff
     db0:	fffffbff 	.word	0xfffffbff
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     db4:	4202      	tst	r2, r0
     db6:	d11b      	bne.n	df0 <_i2c_m_sync_transfer+0x354>
			if (msg->flags & I2C_M_TEN) {
     db8:	886b      	ldrh	r3, [r5, #2]
     dba:	055b      	lsls	r3, r3, #21
     dbc:	d535      	bpl.n	e2a <_i2c_m_sync_transfer+0x38e>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     dbe:	882b      	ldrh	r3, [r5, #0]
     dc0:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     dc2:	2006      	movs	r0, #6
     dc4:	4018      	ands	r0, r3
     dc6:	69e3      	ldr	r3, [r4, #28]
     dc8:	421a      	tst	r2, r3
     dca:	d1fc      	bne.n	dc6 <_i2c_m_sync_transfer+0x32a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
     dce:	2680      	movs	r6, #128	; 0x80
     dd0:	01f6      	lsls	r6, r6, #7
     dd2:	4033      	ands	r3, r6
				hri_sercomi2cm_write_ADDR_reg(hw,
     dd4:	26f1      	movs	r6, #241	; 0xf1
     dd6:	4333      	orrs	r3, r6
     dd8:	4303      	orrs	r3, r0
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     dda:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ddc:	69e3      	ldr	r3, [r4, #28]
     dde:	421a      	tst	r2, r3
     de0:	d1fc      	bne.n	ddc <_i2c_m_sync_transfer+0x340>
				msg->flags &= ~I2C_M_TEN;
     de2:	886b      	ldrh	r3, [r5, #2]
     de4:	4878      	ldr	r0, [pc, #480]	; (fc8 <_i2c_m_sync_transfer+0x52c>)
     de6:	4003      	ands	r3, r0
     de8:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
     dea:	2300      	movs	r3, #0
     dec:	9301      	str	r3, [sp, #4]
     dee:	e06d      	b.n	ecc <_i2c_m_sync_transfer+0x430>
				if (msg->len > 0) {
     df0:	686b      	ldr	r3, [r5, #4]
     df2:	2b00      	cmp	r3, #0
     df4:	dd04      	ble.n	e00 <_i2c_m_sync_transfer+0x364>
					msg->flags |= I2C_M_FAIL;
     df6:	886b      	ldrh	r3, [r5, #2]
     df8:	2080      	movs	r0, #128	; 0x80
     dfa:	0140      	lsls	r0, r0, #5
     dfc:	4303      	orrs	r3, r0
     dfe:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     e00:	886b      	ldrh	r3, [r5, #2]
     e02:	b21b      	sxth	r3, r3
     e04:	2b00      	cmp	r3, #0
     e06:	db07      	blt.n	e18 <_i2c_m_sync_transfer+0x37c>
				msg->flags &= ~I2C_M_BUSY;
     e08:	886b      	ldrh	r3, [r5, #2]
     e0a:	4870      	ldr	r0, [pc, #448]	; (fcc <_i2c_m_sync_transfer+0x530>)
     e0c:	4003      	ands	r3, r0
     e0e:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     e10:	2302      	movs	r3, #2
     e12:	425b      	negs	r3, r3
     e14:	9301      	str	r3, [sp, #4]
     e16:	e059      	b.n	ecc <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     e18:	6860      	ldr	r0, [r4, #4]
     e1a:	23c0      	movs	r3, #192	; 0xc0
     e1c:	029b      	lsls	r3, r3, #10
     e1e:	4303      	orrs	r3, r0
     e20:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e22:	69e3      	ldr	r3, [r4, #28]
     e24:	421a      	tst	r2, r3
     e26:	d1fc      	bne.n	e22 <_i2c_m_sync_transfer+0x386>
     e28:	e7ee      	b.n	e08 <_i2c_m_sync_transfer+0x36c>
			if (msg->len == 0) {
     e2a:	686b      	ldr	r3, [r5, #4]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d113      	bne.n	e58 <_i2c_m_sync_transfer+0x3bc>
				if (msg->flags & I2C_M_STOP) {
     e30:	886b      	ldrh	r3, [r5, #2]
     e32:	b21b      	sxth	r3, r3
     e34:	2b00      	cmp	r3, #0
     e36:	db06      	blt.n	e46 <_i2c_m_sync_transfer+0x3aa>
				msg->flags &= ~I2C_M_BUSY;
     e38:	886b      	ldrh	r3, [r5, #2]
     e3a:	4864      	ldr	r0, [pc, #400]	; (fcc <_i2c_m_sync_transfer+0x530>)
     e3c:	4003      	ands	r3, r0
     e3e:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
     e40:	2300      	movs	r3, #0
     e42:	9301      	str	r3, [sp, #4]
     e44:	e042      	b.n	ecc <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     e46:	6860      	ldr	r0, [r4, #4]
     e48:	23c0      	movs	r3, #192	; 0xc0
     e4a:	029b      	lsls	r3, r3, #10
     e4c:	4303      	orrs	r3, r0
     e4e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e50:	69e3      	ldr	r3, [r4, #28]
     e52:	421a      	tst	r2, r3
     e54:	d1fc      	bne.n	e50 <_i2c_m_sync_transfer+0x3b4>
     e56:	e7ef      	b.n	e38 <_i2c_m_sync_transfer+0x39c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     e58:	68ab      	ldr	r3, [r5, #8]
     e5a:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     e5c:	4658      	mov	r0, fp
     e5e:	5423      	strb	r3, [r4, r0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e60:	69e3      	ldr	r3, [r4, #28]
     e62:	421a      	tst	r2, r3
     e64:	d1fc      	bne.n	e60 <_i2c_m_sync_transfer+0x3c4>
				msg->buffer++;
     e66:	68ab      	ldr	r3, [r5, #8]
     e68:	3301      	adds	r3, #1
     e6a:	60ab      	str	r3, [r5, #8]
				msg->len--;
     e6c:	686b      	ldr	r3, [r5, #4]
     e6e:	3b01      	subs	r3, #1
     e70:	606b      	str	r3, [r5, #4]
			return I2C_OK;
     e72:	2300      	movs	r3, #0
     e74:	9301      	str	r3, [sp, #4]
     e76:	e029      	b.n	ecc <_i2c_m_sync_transfer+0x430>
	return I2C_OK;
     e78:	2600      	movs	r6, #0
     e7a:	9601      	str	r6, [sp, #4]
	} else if (flags & SB_FLAG) {
     e7c:	464e      	mov	r6, r9
     e7e:	421e      	tst	r6, r3
     e80:	d024      	beq.n	ecc <_i2c_m_sync_transfer+0x430>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     e82:	686b      	ldr	r3, [r5, #4]
     e84:	2b00      	cmp	r3, #0
     e86:	d04d      	beq.n	f24 <_i2c_m_sync_transfer+0x488>
     e88:	4202      	tst	r2, r0
     e8a:	d14b      	bne.n	f24 <_i2c_m_sync_transfer+0x488>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     e8c:	0eff      	lsrs	r7, r7, #27
     e8e:	4660      	mov	r0, ip
     e90:	4007      	ands	r7, r0
			msg->len--;
     e92:	3b01      	subs	r3, #1
     e94:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     e96:	2b00      	cmp	r3, #0
     e98:	d000      	beq.n	e9c <_i2c_m_sync_transfer+0x400>
     e9a:	e082      	b.n	fa2 <_i2c_m_sync_transfer+0x506>
     e9c:	2f00      	cmp	r7, #0
     e9e:	d100      	bne.n	ea2 <_i2c_m_sync_transfer+0x406>
     ea0:	e085      	b.n	fae <_i2c_m_sync_transfer+0x512>
				if (msg->flags & I2C_M_STOP) {
     ea2:	886b      	ldrh	r3, [r5, #2]
     ea4:	b21b      	sxth	r3, r3
     ea6:	2b00      	cmp	r3, #0
     ea8:	db2c      	blt.n	f04 <_i2c_m_sync_transfer+0x468>
				msg->flags &= ~I2C_M_BUSY;
     eaa:	886b      	ldrh	r3, [r5, #2]
     eac:	4847      	ldr	r0, [pc, #284]	; (fcc <_i2c_m_sync_transfer+0x530>)
     eae:	4003      	ands	r3, r0
     eb0:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     eb2:	68a8      	ldr	r0, [r5, #8]
     eb4:	1c43      	adds	r3, r0, #1
     eb6:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     eb8:	69e3      	ldr	r3, [r4, #28]
     eba:	421a      	tst	r2, r3
     ebc:	d1fc      	bne.n	eb8 <_i2c_m_sync_transfer+0x41c>
	return ((Sercom *)hw)->I2CM.DATA.reg;
     ebe:	465b      	mov	r3, fp
     ec0:	5ce3      	ldrb	r3, [r4, r3]
     ec2:	7003      	strb	r3, [r0, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     ec4:	464b      	mov	r3, r9
     ec6:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
     ec8:	2300      	movs	r3, #0
     eca:	9301      	str	r3, [sp, #4]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     ecc:	886b      	ldrh	r3, [r5, #2]
     ece:	4650      	mov	r0, sl
     ed0:	4203      	tst	r3, r0
     ed2:	d02d      	beq.n	f30 <_i2c_m_sync_transfer+0x494>
	void *   hw      = i2c_dev->hw;
     ed4:	692e      	ldr	r6, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     ed6:	7e33      	ldrb	r3, [r6, #24]
     ed8:	b2db      	uxtb	r3, r3
     eda:	483d      	ldr	r0, [pc, #244]	; (fd0 <_i2c_m_sync_transfer+0x534>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     edc:	4219      	tst	r1, r3
     ede:	d141      	bne.n	f64 <_i2c_m_sync_transfer+0x4c8>
     ee0:	7e33      	ldrb	r3, [r6, #24]
     ee2:	b2db      	uxtb	r3, r3
     ee4:	3801      	subs	r0, #1
		if (timeout-- == 0) {
     ee6:	2800      	cmp	r0, #0
     ee8:	d1f8      	bne.n	edc <_i2c_m_sync_transfer+0x440>
			if (msg->flags & I2C_M_STOP) {
     eea:	4643      	mov	r3, r8
     eec:	885b      	ldrh	r3, [r3, #2]
     eee:	b21b      	sxth	r3, r3
     ef0:	2b00      	cmp	r3, #0
     ef2:	da00      	bge.n	ef6 <_i2c_m_sync_transfer+0x45a>
     ef4:	e73f      	b.n	d76 <_i2c_m_sync_transfer+0x2da>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
     ef6:	886b      	ldrh	r3, [r5, #2]
     ef8:	4a34      	ldr	r2, [pc, #208]	; (fcc <_i2c_m_sync_transfer+0x530>)
     efa:	4013      	ands	r3, r2
     efc:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
     efe:	2005      	movs	r0, #5
     f00:	4240      	negs	r0, r0
			return ret;
     f02:	e663      	b.n	bcc <_i2c_m_sync_transfer+0x130>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     f04:	6863      	ldr	r3, [r4, #4]
     f06:	4831      	ldr	r0, [pc, #196]	; (fcc <_i2c_m_sync_transfer+0x530>)
     f08:	4003      	ands	r3, r0
     f0a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f0c:	69e3      	ldr	r3, [r4, #28]
     f0e:	421a      	tst	r2, r3
     f10:	d1fc      	bne.n	f0c <_i2c_m_sync_transfer+0x470>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     f12:	6860      	ldr	r0, [r4, #4]
     f14:	23c0      	movs	r3, #192	; 0xc0
     f16:	029b      	lsls	r3, r3, #10
     f18:	4303      	orrs	r3, r0
     f1a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f1c:	69e3      	ldr	r3, [r4, #28]
     f1e:	421a      	tst	r2, r3
     f20:	d1fc      	bne.n	f1c <_i2c_m_sync_transfer+0x480>
     f22:	e7c2      	b.n	eaa <_i2c_m_sync_transfer+0x40e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     f24:	464b      	mov	r3, r9
     f26:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
     f28:	2302      	movs	r3, #2
     f2a:	425b      	negs	r3, r3
     f2c:	9301      	str	r3, [sp, #4]
     f2e:	e7cd      	b.n	ecc <_i2c_m_sync_transfer+0x430>
     f30:	9e01      	ldr	r6, [sp, #4]
     f32:	0030      	movs	r0, r6
     f34:	e64a      	b.n	bcc <_i2c_m_sync_transfer+0x130>
		return I2C_ERR_BUSY;
     f36:	2006      	movs	r0, #6
     f38:	4240      	negs	r0, r0
     f3a:	e647      	b.n	bcc <_i2c_m_sync_transfer+0x130>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     f3c:	2b01      	cmp	r3, #1
     f3e:	d000      	beq.n	f42 <_i2c_m_sync_transfer+0x4a6>
     f40:	e6e7      	b.n	d12 <_i2c_m_sync_transfer+0x276>
     f42:	2e00      	cmp	r6, #0
     f44:	d100      	bne.n	f48 <_i2c_m_sync_transfer+0x4ac>
     f46:	e6e4      	b.n	d12 <_i2c_m_sync_transfer+0x276>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     f48:	687a      	ldr	r2, [r7, #4]
     f4a:	2380      	movs	r3, #128	; 0x80
     f4c:	02db      	lsls	r3, r3, #11
     f4e:	4313      	orrs	r3, r2
     f50:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f52:	2204      	movs	r2, #4
     f54:	69fb      	ldr	r3, [r7, #28]
     f56:	421a      	tst	r2, r3
     f58:	d1fc      	bne.n	f54 <_i2c_m_sync_transfer+0x4b8>
			if (msg->len == 0) {
     f5a:	686b      	ldr	r3, [r5, #4]
     f5c:	2b00      	cmp	r3, #0
     f5e:	d100      	bne.n	f62 <_i2c_m_sync_transfer+0x4c6>
     f60:	e6cf      	b.n	d02 <_i2c_m_sync_transfer+0x266>
     f62:	e6d6      	b.n	d12 <_i2c_m_sync_transfer+0x276>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     f64:	6827      	ldr	r7, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f66:	69e0      	ldr	r0, [r4, #28]
     f68:	4202      	tst	r2, r0
     f6a:	d1fc      	bne.n	f66 <_i2c_m_sync_transfer+0x4ca>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     f6c:	8b60      	ldrh	r0, [r4, #26]
     f6e:	b280      	uxth	r0, r0
	if (flags & MB_FLAG) {
     f70:	4666      	mov	r6, ip
     f72:	421e      	tst	r6, r3
     f74:	d100      	bne.n	f78 <_i2c_m_sync_transfer+0x4dc>
     f76:	e77f      	b.n	e78 <_i2c_m_sync_transfer+0x3dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     f78:	464b      	mov	r3, r9
     f7a:	4203      	tst	r3, r0
     f7c:	d100      	bne.n	f80 <_i2c_m_sync_transfer+0x4e4>
     f7e:	e719      	b.n	db4 <_i2c_m_sync_transfer+0x318>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     f80:	7626      	strb	r6, [r4, #24]
			msg->flags |= I2C_M_FAIL;
     f82:	886b      	ldrh	r3, [r5, #2]
     f84:	2680      	movs	r6, #128	; 0x80
     f86:	0176      	lsls	r6, r6, #5
     f88:	4333      	orrs	r3, r6
     f8a:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     f8c:	886b      	ldrh	r3, [r5, #2]
     f8e:	4e0f      	ldr	r6, [pc, #60]	; (fcc <_i2c_m_sync_transfer+0x530>)
     f90:	4033      	ands	r3, r6
     f92:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     f94:	4663      	mov	r3, ip
     f96:	4018      	ands	r0, r3
			return I2C_ERR_BAD_ADDRESS;
     f98:	4246      	negs	r6, r0
     f9a:	4146      	adcs	r6, r0
     f9c:	1f73      	subs	r3, r6, #5
     f9e:	9301      	str	r3, [sp, #4]
     fa0:	e794      	b.n	ecc <_i2c_m_sync_transfer+0x430>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     fa2:	2b01      	cmp	r3, #1
     fa4:	d000      	beq.n	fa8 <_i2c_m_sync_transfer+0x50c>
     fa6:	e784      	b.n	eb2 <_i2c_m_sync_transfer+0x416>
     fa8:	2f00      	cmp	r7, #0
     faa:	d100      	bne.n	fae <_i2c_m_sync_transfer+0x512>
     fac:	e781      	b.n	eb2 <_i2c_m_sync_transfer+0x416>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     fae:	6860      	ldr	r0, [r4, #4]
     fb0:	2380      	movs	r3, #128	; 0x80
     fb2:	02db      	lsls	r3, r3, #11
     fb4:	4303      	orrs	r3, r0
     fb6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     fb8:	69e3      	ldr	r3, [r4, #28]
     fba:	421a      	tst	r2, r3
     fbc:	d1fc      	bne.n	fb8 <_i2c_m_sync_transfer+0x51c>
			if (msg->len == 0) {
     fbe:	686b      	ldr	r3, [r5, #4]
     fc0:	2b00      	cmp	r3, #0
     fc2:	d100      	bne.n	fc6 <_i2c_m_sync_transfer+0x52a>
     fc4:	e76d      	b.n	ea2 <_i2c_m_sync_transfer+0x406>
     fc6:	e774      	b.n	eb2 <_i2c_m_sync_transfer+0x416>
     fc8:	fffffbff 	.word	0xfffffbff
     fcc:	fffffeff 	.word	0xfffffeff
     fd0:	0000ffff 	.word	0x0000ffff

00000fd4 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
     fd4:	b570      	push	{r4, r5, r6, lr}
     fd6:	0005      	movs	r5, r0
     fd8:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     fda:	4b35      	ldr	r3, [pc, #212]	; (10b0 <_spi_m_sync_init+0xdc>)
     fdc:	18cb      	adds	r3, r1, r3
     fde:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
     fe0:	b2db      	uxtb	r3, r3
     fe2:	2b00      	cmp	r3, #0
     fe4:	d00b      	beq.n	ffe <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
     fe6:	2800      	cmp	r0, #0
     fe8:	d051      	beq.n	108e <_spi_m_sync_init+0xba>
     fea:	1e60      	subs	r0, r4, #1
     fec:	4184      	sbcs	r4, r0
     fee:	b2e0      	uxtb	r0, r4
     ff0:	4a30      	ldr	r2, [pc, #192]	; (10b4 <_spi_m_sync_init+0xe0>)
     ff2:	4931      	ldr	r1, [pc, #196]	; (10b8 <_spi_m_sync_init+0xe4>)
     ff4:	4b31      	ldr	r3, [pc, #196]	; (10bc <_spi_m_sync_init+0xe8>)
     ff6:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
     ff8:	200d      	movs	r0, #13
     ffa:	4240      	negs	r0, r0
     ffc:	e046      	b.n	108c <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
     ffe:	2800      	cmp	r0, #0
    1000:	d14d      	bne.n	109e <_spi_m_sync_init+0xca>
    1002:	4a2c      	ldr	r2, [pc, #176]	; (10b4 <_spi_m_sync_init+0xe0>)
    1004:	492c      	ldr	r1, [pc, #176]	; (10b8 <_spi_m_sync_init+0xe4>)
    1006:	2000      	movs	r0, #0
    1008:	4b2c      	ldr	r3, [pc, #176]	; (10bc <_spi_m_sync_init+0xe8>)
    100a:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    100c:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    100e:	07db      	lsls	r3, r3, #31
    1010:	d418      	bmi.n	1044 <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1012:	2203      	movs	r2, #3
    1014:	69e3      	ldr	r3, [r4, #28]
    1016:	421a      	tst	r2, r3
    1018:	d1fc      	bne.n	1014 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    101a:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    101c:	079b      	lsls	r3, r3, #30
    101e:	d50b      	bpl.n	1038 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1020:	6823      	ldr	r3, [r4, #0]
    1022:	2202      	movs	r2, #2
    1024:	4393      	bics	r3, r2
    1026:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1028:	3201      	adds	r2, #1
    102a:	69e3      	ldr	r3, [r4, #28]
    102c:	421a      	tst	r2, r3
    102e:	d1fc      	bne.n	102a <_spi_m_sync_init+0x56>
    1030:	2202      	movs	r2, #2
    1032:	69e3      	ldr	r3, [r4, #28]
    1034:	421a      	tst	r2, r3
    1036:	d1fc      	bne.n	1032 <_spi_m_sync_init+0x5e>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1038:	230d      	movs	r3, #13
    103a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    103c:	2203      	movs	r2, #3
    103e:	69e3      	ldr	r3, [r4, #28]
    1040:	421a      	tst	r2, r3
    1042:	d1fc      	bne.n	103e <_spi_m_sync_init+0x6a>
    1044:	2201      	movs	r2, #1
    1046:	69e3      	ldr	r3, [r4, #28]
    1048:	421a      	tst	r2, r3
    104a:	d1fc      	bne.n	1046 <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    104c:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    104e:	0020      	movs	r0, r4
    1050:	1e43      	subs	r3, r0, #1
    1052:	4198      	sbcs	r0, r3
    1054:	b2c0      	uxtb	r0, r0
    1056:	4a1a      	ldr	r2, [pc, #104]	; (10c0 <_spi_m_sync_init+0xec>)
    1058:	4917      	ldr	r1, [pc, #92]	; (10b8 <_spi_m_sync_init+0xe4>)
    105a:	4b18      	ldr	r3, [pc, #96]	; (10bc <_spi_m_sync_init+0xe8>)
    105c:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    105e:	4b19      	ldr	r3, [pc, #100]	; (10c4 <_spi_m_sync_init+0xf0>)
    1060:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1062:	2203      	movs	r2, #3
    1064:	69e3      	ldr	r3, [r4, #28]
    1066:	421a      	tst	r2, r3
    1068:	d1fc      	bne.n	1064 <_spi_m_sync_init+0x90>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    106a:	2380      	movs	r3, #128	; 0x80
    106c:	029b      	lsls	r3, r3, #10
    106e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1070:	2207      	movs	r2, #7
    1072:	69e3      	ldr	r3, [r4, #28]
    1074:	421a      	tst	r2, r3
    1076:	d1fc      	bne.n	1072 <_spi_m_sync_init+0x9e>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1078:	2309      	movs	r3, #9
    107a:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    107c:	2200      	movs	r2, #0
    107e:	3327      	adds	r3, #39	; 0x27
    1080:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1082:	3b2f      	subs	r3, #47	; 0x2f
    1084:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1086:	4b10      	ldr	r3, [pc, #64]	; (10c8 <_spi_m_sync_init+0xf4>)
    1088:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    108a:	2000      	movs	r0, #0
}
    108c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    108e:	4a09      	ldr	r2, [pc, #36]	; (10b4 <_spi_m_sync_init+0xe0>)
    1090:	4909      	ldr	r1, [pc, #36]	; (10b8 <_spi_m_sync_init+0xe4>)
    1092:	2000      	movs	r0, #0
    1094:	4b09      	ldr	r3, [pc, #36]	; (10bc <_spi_m_sync_init+0xe8>)
    1096:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1098:	200d      	movs	r0, #13
    109a:	4240      	negs	r0, r0
    109c:	e7f6      	b.n	108c <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    109e:	0008      	movs	r0, r1
    10a0:	1e43      	subs	r3, r0, #1
    10a2:	4198      	sbcs	r0, r3
    10a4:	b2c0      	uxtb	r0, r0
    10a6:	4a03      	ldr	r2, [pc, #12]	; (10b4 <_spi_m_sync_init+0xe0>)
    10a8:	4903      	ldr	r1, [pc, #12]	; (10b8 <_spi_m_sync_init+0xe4>)
    10aa:	4b04      	ldr	r3, [pc, #16]	; (10bc <_spi_m_sync_init+0xe8>)
    10ac:	4798      	blx	r3
    10ae:	e7ad      	b.n	100c <_spi_m_sync_init+0x38>
    10b0:	bdfff800 	.word	0xbdfff800
    10b4:	00000925 	.word	0x00000925
    10b8:	0000165c 	.word	0x0000165c
    10bc:	0000079d 	.word	0x0000079d
    10c0:	000008ef 	.word	0x000008ef
    10c4:	0002000c 	.word	0x0002000c
    10c8:	000001ff 	.word	0x000001ff

000010cc <_spi_m_sync_set_mode>:

	return _spi_async_disable(dev->prvt);
}

int32_t _spi_m_sync_set_mode(struct _spi_m_sync_dev *dev, const enum spi_transfer_mode mode)
{
    10cc:	b570      	push	{r4, r5, r6, lr}
    10ce:	0005      	movs	r5, r0
    10d0:	000c      	movs	r4, r1
	ASSERT(dev && dev->prvt);
    10d2:	2800      	cmp	r0, #0
    10d4:	d00c      	beq.n	10f0 <_spi_m_sync_set_mode+0x24>
    10d6:	6800      	ldr	r0, [r0, #0]
    10d8:	1e43      	subs	r3, r0, #1
    10da:	4198      	sbcs	r0, r3
    10dc:	b2c0      	uxtb	r0, r0
    10de:	4a05      	ldr	r2, [pc, #20]	; (10f4 <_spi_m_sync_set_mode+0x28>)
    10e0:	4905      	ldr	r1, [pc, #20]	; (10f8 <_spi_m_sync_set_mode+0x2c>)
    10e2:	4b06      	ldr	r3, [pc, #24]	; (10fc <_spi_m_sync_set_mode+0x30>)
    10e4:	4798      	blx	r3

	return _spi_set_mode(dev->prvt, mode);
    10e6:	6828      	ldr	r0, [r5, #0]
    10e8:	0021      	movs	r1, r4
    10ea:	4b05      	ldr	r3, [pc, #20]	; (1100 <_spi_m_sync_set_mode+0x34>)
    10ec:	4798      	blx	r3
}
    10ee:	bd70      	pop	{r4, r5, r6, pc}
    10f0:	2000      	movs	r0, #0
    10f2:	e7f4      	b.n	10de <_spi_m_sync_set_mode+0x12>
    10f4:	000009b8 	.word	0x000009b8
    10f8:	0000165c 	.word	0x0000165c
    10fc:	0000079d 	.word	0x0000079d
    1100:	00000925 	.word	0x00000925

00001104 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1104:	b5f0      	push	{r4, r5, r6, r7, lr}
    1106:	46de      	mov	lr, fp
    1108:	4657      	mov	r7, sl
    110a:	464e      	mov	r6, r9
    110c:	4645      	mov	r5, r8
    110e:	b5e0      	push	{r5, r6, r7, lr}
    1110:	b083      	sub	sp, #12
    1112:	4681      	mov	r9, r0
    1114:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    1116:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1118:	680b      	ldr	r3, [r1, #0]
    111a:	4698      	mov	r8, r3
    111c:	684d      	ldr	r5, [r1, #4]
    111e:	7903      	ldrb	r3, [r0, #4]
    1120:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    1122:	2800      	cmp	r0, #0
    1124:	d015      	beq.n	1152 <_spi_m_sync_trans+0x4e>
    1126:	0020      	movs	r0, r4
    1128:	1e43      	subs	r3, r0, #1
    112a:	4198      	sbcs	r0, r3
    112c:	b2c0      	uxtb	r0, r0
    112e:	4a36      	ldr	r2, [pc, #216]	; (1208 <_spi_m_sync_trans+0x104>)
    1130:	4936      	ldr	r1, [pc, #216]	; (120c <_spi_m_sync_trans+0x108>)
    1132:	4b37      	ldr	r3, [pc, #220]	; (1210 <_spi_m_sync_trans+0x10c>)
    1134:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1136:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1138:	075b      	lsls	r3, r3, #29
    113a:	d13f      	bne.n	11bc <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    113c:	2303      	movs	r3, #3
    113e:	69e0      	ldr	r0, [r4, #28]
    1140:	4018      	ands	r0, r3
    1142:	d1fc      	bne.n	113e <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1144:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1146:	079b      	lsls	r3, r3, #30
    1148:	d53b      	bpl.n	11c2 <_spi_m_sync_trans+0xbe>
    114a:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    114c:	2301      	movs	r3, #1
    114e:	469c      	mov	ip, r3
    1150:	e009      	b.n	1166 <_spi_m_sync_trans+0x62>
    1152:	2000      	movs	r0, #0
    1154:	e7eb      	b.n	112e <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    1156:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    1158:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    115a:	b25b      	sxtb	r3, r3
    115c:	2b00      	cmp	r3, #0
    115e:	db16      	blt.n	118e <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1160:	68b3      	ldr	r3, [r6, #8]
    1162:	4283      	cmp	r3, r0
    1164:	d927      	bls.n	11b6 <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1166:	7e23      	ldrb	r3, [r4, #24]
    1168:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    116a:	2104      	movs	r1, #4
    116c:	4219      	tst	r1, r3
    116e:	d02b      	beq.n	11c8 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1170:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1172:	2d00      	cmp	r5, #0
    1174:	d0f0      	beq.n	1158 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    1176:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    1178:	9901      	ldr	r1, [sp, #4]
    117a:	2901      	cmp	r1, #1
    117c:	d9eb      	bls.n	1156 <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    117e:	0a3f      	lsrs	r7, r7, #8
    1180:	706f      	strb	r7, [r5, #1]
    1182:	3502      	adds	r5, #2
    1184:	e7e8      	b.n	1158 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    1186:	2101      	movs	r1, #1
    1188:	468b      	mov	fp, r1
    118a:	44d8      	add	r8, fp
    118c:	e037      	b.n	11fe <_spi_m_sync_trans+0xfa>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    118e:	2301      	movs	r3, #1
    1190:	425b      	negs	r3, r3
    1192:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1194:	3381      	adds	r3, #129	; 0x81
    1196:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1198:	2013      	movs	r0, #19
    119a:	4240      	negs	r0, r0
	tmp &= mask;
    119c:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    119e:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    11a0:	4213      	tst	r3, r2
    11a2:	d0fc      	beq.n	119e <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    11a4:	2303      	movs	r3, #3
    11a6:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    11a8:	b003      	add	sp, #12
    11aa:	bc3c      	pop	{r2, r3, r4, r5}
    11ac:	4690      	mov	r8, r2
    11ae:	4699      	mov	r9, r3
    11b0:	46a2      	mov	sl, r4
    11b2:	46ab      	mov	fp, r5
    11b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    11b6:	4293      	cmp	r3, r2
    11b8:	d8d5      	bhi.n	1166 <_spi_m_sync_trans+0x62>
    11ba:	e7ef      	b.n	119c <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    11bc:	2004      	movs	r0, #4
    11be:	4240      	negs	r0, r0
    11c0:	e7f2      	b.n	11a8 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    11c2:	2014      	movs	r0, #20
    11c4:	4240      	negs	r0, r0
    11c6:	e7ef      	b.n	11a8 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    11c8:	4290      	cmp	r0, r2
    11ca:	d8c6      	bhi.n	115a <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    11cc:	4667      	mov	r7, ip
    11ce:	421f      	tst	r7, r3
    11d0:	d0c3      	beq.n	115a <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    11d2:	464f      	mov	r7, r9
    11d4:	88ff      	ldrh	r7, [r7, #6]
    11d6:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    11d8:	4647      	mov	r7, r8
    11da:	2f00      	cmp	r7, #0
    11dc:	d00f      	beq.n	11fe <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    11de:	783f      	ldrb	r7, [r7, #0]
    11e0:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    11e2:	9901      	ldr	r1, [sp, #4]
    11e4:	2901      	cmp	r1, #1
    11e6:	d9ce      	bls.n	1186 <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    11e8:	4647      	mov	r7, r8
    11ea:	787f      	ldrb	r7, [r7, #1]
    11ec:	023f      	lsls	r7, r7, #8
    11ee:	46bb      	mov	fp, r7
    11f0:	4657      	mov	r7, sl
    11f2:	4659      	mov	r1, fp
    11f4:	430f      	orrs	r7, r1
    11f6:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    11f8:	2102      	movs	r1, #2
    11fa:	468b      	mov	fp, r1
    11fc:	44d8      	add	r8, fp
	ctrl->txcnt++;
    11fe:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1200:	4657      	mov	r7, sl
    1202:	62a7      	str	r7, [r4, #40]	; 0x28
    1204:	e7a9      	b.n	115a <_spi_m_sync_trans+0x56>
    1206:	46c0      	nop			; (mov r8, r8)
    1208:	00000a85 	.word	0x00000a85
    120c:	0000165c 	.word	0x0000165c
    1210:	0000079d 	.word	0x0000079d

00001214 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1214:	4b0e      	ldr	r3, [pc, #56]	; (1250 <_sysctrl_init_sources+0x3c>)
    1216:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1218:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    121a:	480e      	ldr	r0, [pc, #56]	; (1254 <_sysctrl_init_sources+0x40>)
    121c:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    121e:	0f89      	lsrs	r1, r1, #30
    1220:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    1222:	480d      	ldr	r0, [pc, #52]	; (1258 <_sysctrl_init_sources+0x44>)
    1224:	4301      	orrs	r1, r0
    1226:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1228:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    122a:	699a      	ldr	r2, [r3, #24]
    122c:	2102      	movs	r1, #2
    122e:	430a      	orrs	r2, r1
    1230:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1232:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1234:	311d      	adds	r1, #29
    1236:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1238:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    123a:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    123c:	2208      	movs	r2, #8
    123e:	68cb      	ldr	r3, [r1, #12]
    1240:	421a      	tst	r2, r3
    1242:	d0fc      	beq.n	123e <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1244:	4a02      	ldr	r2, [pc, #8]	; (1250 <_sysctrl_init_sources+0x3c>)
    1246:	6a13      	ldr	r3, [r2, #32]
    1248:	2180      	movs	r1, #128	; 0x80
    124a:	430b      	orrs	r3, r1
    124c:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    124e:	4770      	bx	lr
    1250:	40000800 	.word	0x40000800
    1254:	0fff0000 	.word	0x0fff0000
    1258:	00000302 	.word	0x00000302

0000125c <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    125c:	4a02      	ldr	r2, [pc, #8]	; (1268 <_sysctrl_init_referenced_generators+0xc>)
    125e:	6993      	ldr	r3, [r2, #24]
    1260:	2102      	movs	r1, #2
    1262:	438b      	bics	r3, r1
    1264:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1266:	4770      	bx	lr
    1268:	40000800 	.word	0x40000800

0000126c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    126c:	b510      	push	{r4, lr}
    126e:	b082      	sub	sp, #8
    1270:	0004      	movs	r4, r0
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1272:	a801      	add	r0, sp, #4
    1274:	4b0b      	ldr	r3, [pc, #44]	; (12a4 <_gpio_get_level+0x38>)
    1276:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1278:	01e3      	lsls	r3, r4, #7
    127a:	22c0      	movs	r2, #192	; 0xc0
    127c:	05d2      	lsls	r2, r2, #23
    127e:	589c      	ldr	r4, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1280:	4a09      	ldr	r2, [pc, #36]	; (12a8 <_gpio_get_level+0x3c>)
    1282:	189a      	adds	r2, r3, r2
    1284:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1286:	21c0      	movs	r1, #192	; 0xc0
    1288:	05c9      	lsls	r1, r1, #23
    128a:	468c      	mov	ip, r1
    128c:	4463      	add	r3, ip
    128e:	691b      	ldr	r3, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1290:	4053      	eors	r3, r2
    1292:	401c      	ands	r4, r3
    1294:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    1296:	a801      	add	r0, sp, #4
    1298:	4b04      	ldr	r3, [pc, #16]	; (12ac <_gpio_get_level+0x40>)
    129a:	4798      	blx	r3

	return tmp;
}
    129c:	0020      	movs	r0, r4
    129e:	b002      	add	sp, #8
    12a0:	bd10      	pop	{r4, pc}
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	00000411 	.word	0x00000411
    12a8:	41004400 	.word	0x41004400
    12ac:	0000041f 	.word	0x0000041f

000012b0 <standalone>:
	for(int i=0; i<5;i++){
		SPI_Send_Data(required[i]);
		delay_ms(10);
	}
}
void standalone(){//By pulling SPI_MODE low, we dictate that the only thing the trinamic driver works is with the step/dir
    12b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    12b2:	23c0      	movs	r3, #192	; 0xc0
    12b4:	05db      	lsls	r3, r3, #23
    12b6:	2280      	movs	r2, #128	; 0x80
    12b8:	0292      	lsls	r2, r2, #10
    12ba:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    12bc:	2680      	movs	r6, #128	; 0x80
    12be:	0076      	lsls	r6, r6, #1
    12c0:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12c2:	4a16      	ldr	r2, [pc, #88]	; (131c <standalone+0x6c>)
    12c4:	4916      	ldr	r1, [pc, #88]	; (1320 <standalone+0x70>)
    12c6:	6291      	str	r1, [r2, #40]	; 0x28
    12c8:	21c0      	movs	r1, #192	; 0xc0
    12ca:	0609      	lsls	r1, r1, #24
    12cc:	6291      	str	r1, [r2, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    12ce:	2580      	movs	r5, #128	; 0x80
    12d0:	012d      	lsls	r5, r5, #4
    12d2:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12d4:	4813      	ldr	r0, [pc, #76]	; (1324 <standalone+0x74>)
    12d6:	6290      	str	r0, [r2, #40]	; 0x28
    12d8:	6291      	str	r1, [r2, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    12da:	2480      	movs	r4, #128	; 0x80
    12dc:	00a4      	lsls	r4, r4, #2
    12de:	609c      	str	r4, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12e0:	4811      	ldr	r0, [pc, #68]	; (1328 <standalone+0x78>)
    12e2:	6290      	str	r0, [r2, #40]	; 0x28
    12e4:	6291      	str	r1, [r2, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    12e6:	2080      	movs	r0, #128	; 0x80
    12e8:	00c0      	lsls	r0, r0, #3
    12ea:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12ec:	4f0f      	ldr	r7, [pc, #60]	; (132c <standalone+0x7c>)
    12ee:	6297      	str	r7, [r2, #40]	; 0x28
    12f0:	6291      	str	r1, [r2, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    12f2:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    12f4:	619d      	str	r5, [r3, #24]
    12f6:	619c      	str	r4, [r3, #24]
    12f8:	6198      	str	r0, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    12fa:	2280      	movs	r2, #128	; 0x80
    12fc:	02d2      	lsls	r2, r2, #11
    12fe:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1300:	2280      	movs	r2, #128	; 0x80
    1302:	0312      	lsls	r2, r2, #12
    1304:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1306:	2280      	movs	r2, #128	; 0x80
    1308:	0252      	lsls	r2, r2, #9
    130a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    130c:	2280      	movs	r2, #128	; 0x80
    130e:	0212      	lsls	r2, r2, #8
    1310:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1312:	2280      	movs	r2, #128	; 0x80
    1314:	01d2      	lsls	r2, r2, #7
    1316:	615a      	str	r2, [r3, #20]
	gpio_set_pin_level(CFG4,false);
	gpio_set_pin_level(CFG5,true);
	gpio_set_pin_level(CFG6,false);
	gpio_set_pin_level(dirPin,true);
	gpio_set_pin_level(stepPin,false);
}
    1318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    131a:	46c0      	nop			; (mov r8, r8)
    131c:	41004400 	.word	0x41004400
    1320:	40000100 	.word	0x40000100
    1324:	40000800 	.word	0x40000800
    1328:	40000200 	.word	0x40000200
    132c:	40000400 	.word	0x40000400

00001330 <step>:
void dir_change(bool dir){
	gpio_set_pin_level(dirPin, dir);
}
void step(){
    1330:	b570      	push	{r4, r5, r6, lr}
	if(is_stepping == true){
    1332:	4b08      	ldr	r3, [pc, #32]	; (1354 <step+0x24>)
    1334:	781b      	ldrb	r3, [r3, #0]
    1336:	2b00      	cmp	r3, #0
    1338:	d100      	bne.n	133c <step+0xc>
	gpio_set_pin_level(stepPin, true);
	delay_us(delay/2);
	gpio_set_pin_level(stepPin, false);
	delay_us(delay/2);
	}
}
    133a:	bd70      	pop	{r4, r5, r6, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    133c:	25c0      	movs	r5, #192	; 0xc0
    133e:	05ed      	lsls	r5, r5, #23
    1340:	2680      	movs	r6, #128	; 0x80
    1342:	01f6      	lsls	r6, r6, #7
    1344:	61ae      	str	r6, [r5, #24]
	delay_us(delay/2);
    1346:	2032      	movs	r0, #50	; 0x32
    1348:	4c03      	ldr	r4, [pc, #12]	; (1358 <step+0x28>)
    134a:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    134c:	616e      	str	r6, [r5, #20]
	delay_us(delay/2);
    134e:	2032      	movs	r0, #50	; 0x32
    1350:	47a0      	blx	r4
}
    1352:	e7f2      	b.n	133a <step+0xa>
    1354:	20000000 	.word	0x20000000
    1358:	0000042d 	.word	0x0000042d

0000135c <main>:
{
    135c:	b5f0      	push	{r4, r5, r6, r7, lr}
    135e:	46c6      	mov	lr, r8
    1360:	b500      	push	{lr}
    1362:	b082      	sub	sp, #8
	atmel_start_init();
    1364:	4b2b      	ldr	r3, [pc, #172]	; (1414 <main+0xb8>)
    1366:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1368:	25c0      	movs	r5, #192	; 0xc0
    136a:	05ed      	lsls	r5, r5, #23
    136c:	2380      	movs	r3, #128	; 0x80
    136e:	02db      	lsls	r3, r3, #11
    1370:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1372:	4c29      	ldr	r4, [pc, #164]	; (1418 <main+0xbc>)
    1374:	2780      	movs	r7, #128	; 0x80
    1376:	05ff      	lsls	r7, r7, #23
    1378:	62a7      	str	r7, [r4, #40]	; 0x28
    137a:	4b28      	ldr	r3, [pc, #160]	; (141c <main+0xc0>)
    137c:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    137e:	2380      	movs	r3, #128	; 0x80
    1380:	031b      	lsls	r3, r3, #12
    1382:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1384:	62a7      	str	r7, [r4, #40]	; 0x28
    1386:	4b26      	ldr	r3, [pc, #152]	; (1420 <main+0xc4>)
    1388:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    138a:	2380      	movs	r3, #128	; 0x80
    138c:	025b      	lsls	r3, r3, #9
    138e:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1390:	62a7      	str	r7, [r4, #40]	; 0x28
    1392:	4b24      	ldr	r3, [pc, #144]	; (1424 <main+0xc8>)
    1394:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1396:	2380      	movs	r3, #128	; 0x80
    1398:	021b      	lsls	r3, r3, #8
    139a:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    139c:	4b22      	ldr	r3, [pc, #136]	; (1428 <main+0xcc>)
    139e:	62a3      	str	r3, [r4, #40]	; 0x28
    13a0:	23c0      	movs	r3, #192	; 0xc0
    13a2:	061b      	lsls	r3, r3, #24
    13a4:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    13a6:	2280      	movs	r2, #128	; 0x80
    13a8:	01d2      	lsls	r2, r2, #7
    13aa:	60aa      	str	r2, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13ac:	4a1f      	ldr	r2, [pc, #124]	; (142c <main+0xd0>)
    13ae:	62a2      	str	r2, [r4, #40]	; 0x28
    13b0:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    13b2:	2380      	movs	r3, #128	; 0x80
    13b4:	029b      	lsls	r3, r3, #10
    13b6:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13b8:	62a7      	str	r7, [r4, #40]	; 0x28
    13ba:	4b1d      	ldr	r3, [pc, #116]	; (1430 <main+0xd4>)
    13bc:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    13be:	2310      	movs	r3, #16
    13c0:	606b      	str	r3, [r5, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13c2:	4b1c      	ldr	r3, [pc, #112]	; (1434 <main+0xd8>)
    13c4:	62a3      	str	r3, [r4, #40]	; 0x28
    13c6:	4b1c      	ldr	r3, [pc, #112]	; (1438 <main+0xdc>)
    13c8:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    13ca:	2220      	movs	r2, #32
    13cc:	606a      	str	r2, [r5, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13ce:	4a1b      	ldr	r2, [pc, #108]	; (143c <main+0xe0>)
    13d0:	62a2      	str	r2, [r4, #40]	; 0x28
    13d2:	62a3      	str	r3, [r4, #40]	; 0x28
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
    13d4:	a901      	add	r1, sp, #4
    13d6:	481a      	ldr	r0, [pc, #104]	; (1440 <main+0xe4>)
    13d8:	4b1a      	ldr	r3, [pc, #104]	; (1444 <main+0xe8>)
    13da:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    13dc:	2000      	movs	r0, #0
    13de:	4e1a      	ldr	r6, [pc, #104]	; (1448 <main+0xec>)
    13e0:	47b0      	blx	r6
    13e2:	4680      	mov	r8, r0
    13e4:	2000      	movs	r0, #0
    13e6:	47b0      	blx	r6
    13e8:	4643      	mov	r3, r8
    13ea:	091b      	lsrs	r3, r3, #4
    13ec:	2201      	movs	r2, #1
    13ee:	4013      	ands	r3, r2
	previous = gpio_get_pin_level(IFA)*2 + gpio_get_pin_level(IFB);//encoder stuff
    13f0:	005b      	lsls	r3, r3, #1
    13f2:	0940      	lsrs	r0, r0, #5
    13f4:	4002      	ands	r2, r0
    13f6:	189b      	adds	r3, r3, r2
    13f8:	4a14      	ldr	r2, [pc, #80]	; (144c <main+0xf0>)
    13fa:	7013      	strb	r3, [r2, #0]
	standalone();
    13fc:	4b14      	ldr	r3, [pc, #80]	; (1450 <main+0xf4>)
    13fe:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1400:	2380      	movs	r3, #128	; 0x80
    1402:	049b      	lsls	r3, r3, #18
    1404:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1406:	62a7      	str	r7, [r4, #40]	; 0x28
    1408:	4a12      	ldr	r2, [pc, #72]	; (1454 <main+0xf8>)
    140a:	62a2      	str	r2, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    140c:	61ab      	str	r3, [r5, #24]
		step();
    140e:	4c12      	ldr	r4, [pc, #72]	; (1458 <main+0xfc>)
    1410:	47a0      	blx	r4
    1412:	e7fd      	b.n	1410 <main+0xb4>
    1414:	00000115 	.word	0x00000115
    1418:	41004400 	.word	0x41004400
    141c:	c0000004 	.word	0xc0000004
    1420:	c0000008 	.word	0xc0000008
    1424:	c0000001 	.word	0xc0000001
    1428:	40008000 	.word	0x40008000
    142c:	40004000 	.word	0x40004000
    1430:	c0000002 	.word	0xc0000002
    1434:	40020010 	.word	0x40020010
    1438:	c0020000 	.word	0xc0020000
    143c:	40020020 	.word	0x40020020
    1440:	20000068 	.word	0x20000068
    1444:	0000062d 	.word	0x0000062d
    1448:	0000126d 	.word	0x0000126d
    144c:	200000bd 	.word	0x200000bd
    1450:	000012b1 	.word	0x000012b1
    1454:	c0000200 	.word	0xc0000200
    1458:	00001331 	.word	0x00001331

0000145c <__udivsi3>:
    145c:	2200      	movs	r2, #0
    145e:	0843      	lsrs	r3, r0, #1
    1460:	428b      	cmp	r3, r1
    1462:	d374      	bcc.n	154e <__udivsi3+0xf2>
    1464:	0903      	lsrs	r3, r0, #4
    1466:	428b      	cmp	r3, r1
    1468:	d35f      	bcc.n	152a <__udivsi3+0xce>
    146a:	0a03      	lsrs	r3, r0, #8
    146c:	428b      	cmp	r3, r1
    146e:	d344      	bcc.n	14fa <__udivsi3+0x9e>
    1470:	0b03      	lsrs	r3, r0, #12
    1472:	428b      	cmp	r3, r1
    1474:	d328      	bcc.n	14c8 <__udivsi3+0x6c>
    1476:	0c03      	lsrs	r3, r0, #16
    1478:	428b      	cmp	r3, r1
    147a:	d30d      	bcc.n	1498 <__udivsi3+0x3c>
    147c:	22ff      	movs	r2, #255	; 0xff
    147e:	0209      	lsls	r1, r1, #8
    1480:	ba12      	rev	r2, r2
    1482:	0c03      	lsrs	r3, r0, #16
    1484:	428b      	cmp	r3, r1
    1486:	d302      	bcc.n	148e <__udivsi3+0x32>
    1488:	1212      	asrs	r2, r2, #8
    148a:	0209      	lsls	r1, r1, #8
    148c:	d065      	beq.n	155a <__udivsi3+0xfe>
    148e:	0b03      	lsrs	r3, r0, #12
    1490:	428b      	cmp	r3, r1
    1492:	d319      	bcc.n	14c8 <__udivsi3+0x6c>
    1494:	e000      	b.n	1498 <__udivsi3+0x3c>
    1496:	0a09      	lsrs	r1, r1, #8
    1498:	0bc3      	lsrs	r3, r0, #15
    149a:	428b      	cmp	r3, r1
    149c:	d301      	bcc.n	14a2 <__udivsi3+0x46>
    149e:	03cb      	lsls	r3, r1, #15
    14a0:	1ac0      	subs	r0, r0, r3
    14a2:	4152      	adcs	r2, r2
    14a4:	0b83      	lsrs	r3, r0, #14
    14a6:	428b      	cmp	r3, r1
    14a8:	d301      	bcc.n	14ae <__udivsi3+0x52>
    14aa:	038b      	lsls	r3, r1, #14
    14ac:	1ac0      	subs	r0, r0, r3
    14ae:	4152      	adcs	r2, r2
    14b0:	0b43      	lsrs	r3, r0, #13
    14b2:	428b      	cmp	r3, r1
    14b4:	d301      	bcc.n	14ba <__udivsi3+0x5e>
    14b6:	034b      	lsls	r3, r1, #13
    14b8:	1ac0      	subs	r0, r0, r3
    14ba:	4152      	adcs	r2, r2
    14bc:	0b03      	lsrs	r3, r0, #12
    14be:	428b      	cmp	r3, r1
    14c0:	d301      	bcc.n	14c6 <__udivsi3+0x6a>
    14c2:	030b      	lsls	r3, r1, #12
    14c4:	1ac0      	subs	r0, r0, r3
    14c6:	4152      	adcs	r2, r2
    14c8:	0ac3      	lsrs	r3, r0, #11
    14ca:	428b      	cmp	r3, r1
    14cc:	d301      	bcc.n	14d2 <__udivsi3+0x76>
    14ce:	02cb      	lsls	r3, r1, #11
    14d0:	1ac0      	subs	r0, r0, r3
    14d2:	4152      	adcs	r2, r2
    14d4:	0a83      	lsrs	r3, r0, #10
    14d6:	428b      	cmp	r3, r1
    14d8:	d301      	bcc.n	14de <__udivsi3+0x82>
    14da:	028b      	lsls	r3, r1, #10
    14dc:	1ac0      	subs	r0, r0, r3
    14de:	4152      	adcs	r2, r2
    14e0:	0a43      	lsrs	r3, r0, #9
    14e2:	428b      	cmp	r3, r1
    14e4:	d301      	bcc.n	14ea <__udivsi3+0x8e>
    14e6:	024b      	lsls	r3, r1, #9
    14e8:	1ac0      	subs	r0, r0, r3
    14ea:	4152      	adcs	r2, r2
    14ec:	0a03      	lsrs	r3, r0, #8
    14ee:	428b      	cmp	r3, r1
    14f0:	d301      	bcc.n	14f6 <__udivsi3+0x9a>
    14f2:	020b      	lsls	r3, r1, #8
    14f4:	1ac0      	subs	r0, r0, r3
    14f6:	4152      	adcs	r2, r2
    14f8:	d2cd      	bcs.n	1496 <__udivsi3+0x3a>
    14fa:	09c3      	lsrs	r3, r0, #7
    14fc:	428b      	cmp	r3, r1
    14fe:	d301      	bcc.n	1504 <__udivsi3+0xa8>
    1500:	01cb      	lsls	r3, r1, #7
    1502:	1ac0      	subs	r0, r0, r3
    1504:	4152      	adcs	r2, r2
    1506:	0983      	lsrs	r3, r0, #6
    1508:	428b      	cmp	r3, r1
    150a:	d301      	bcc.n	1510 <__udivsi3+0xb4>
    150c:	018b      	lsls	r3, r1, #6
    150e:	1ac0      	subs	r0, r0, r3
    1510:	4152      	adcs	r2, r2
    1512:	0943      	lsrs	r3, r0, #5
    1514:	428b      	cmp	r3, r1
    1516:	d301      	bcc.n	151c <__udivsi3+0xc0>
    1518:	014b      	lsls	r3, r1, #5
    151a:	1ac0      	subs	r0, r0, r3
    151c:	4152      	adcs	r2, r2
    151e:	0903      	lsrs	r3, r0, #4
    1520:	428b      	cmp	r3, r1
    1522:	d301      	bcc.n	1528 <__udivsi3+0xcc>
    1524:	010b      	lsls	r3, r1, #4
    1526:	1ac0      	subs	r0, r0, r3
    1528:	4152      	adcs	r2, r2
    152a:	08c3      	lsrs	r3, r0, #3
    152c:	428b      	cmp	r3, r1
    152e:	d301      	bcc.n	1534 <__udivsi3+0xd8>
    1530:	00cb      	lsls	r3, r1, #3
    1532:	1ac0      	subs	r0, r0, r3
    1534:	4152      	adcs	r2, r2
    1536:	0883      	lsrs	r3, r0, #2
    1538:	428b      	cmp	r3, r1
    153a:	d301      	bcc.n	1540 <__udivsi3+0xe4>
    153c:	008b      	lsls	r3, r1, #2
    153e:	1ac0      	subs	r0, r0, r3
    1540:	4152      	adcs	r2, r2
    1542:	0843      	lsrs	r3, r0, #1
    1544:	428b      	cmp	r3, r1
    1546:	d301      	bcc.n	154c <__udivsi3+0xf0>
    1548:	004b      	lsls	r3, r1, #1
    154a:	1ac0      	subs	r0, r0, r3
    154c:	4152      	adcs	r2, r2
    154e:	1a41      	subs	r1, r0, r1
    1550:	d200      	bcs.n	1554 <__udivsi3+0xf8>
    1552:	4601      	mov	r1, r0
    1554:	4152      	adcs	r2, r2
    1556:	4610      	mov	r0, r2
    1558:	4770      	bx	lr
    155a:	e7ff      	b.n	155c <__udivsi3+0x100>
    155c:	b501      	push	{r0, lr}
    155e:	2000      	movs	r0, #0
    1560:	f000 f806 	bl	1570 <__aeabi_idiv0>
    1564:	bd02      	pop	{r1, pc}
    1566:	46c0      	nop			; (mov r8, r8)

00001568 <__aeabi_uidivmod>:
    1568:	2900      	cmp	r1, #0
    156a:	d0f7      	beq.n	155c <__udivsi3+0x100>
    156c:	e776      	b.n	145c <__udivsi3>
    156e:	4770      	bx	lr

00001570 <__aeabi_idiv0>:
    1570:	4770      	bx	lr
    1572:	46c0      	nop			; (mov r8, r8)

00001574 <__libc_init_array>:
    1574:	b570      	push	{r4, r5, r6, lr}
    1576:	2600      	movs	r6, #0
    1578:	4d0c      	ldr	r5, [pc, #48]	; (15ac <__libc_init_array+0x38>)
    157a:	4c0d      	ldr	r4, [pc, #52]	; (15b0 <__libc_init_array+0x3c>)
    157c:	1b64      	subs	r4, r4, r5
    157e:	10a4      	asrs	r4, r4, #2
    1580:	42a6      	cmp	r6, r4
    1582:	d109      	bne.n	1598 <__libc_init_array+0x24>
    1584:	2600      	movs	r6, #0
    1586:	f000 f877 	bl	1678 <_init>
    158a:	4d0a      	ldr	r5, [pc, #40]	; (15b4 <__libc_init_array+0x40>)
    158c:	4c0a      	ldr	r4, [pc, #40]	; (15b8 <__libc_init_array+0x44>)
    158e:	1b64      	subs	r4, r4, r5
    1590:	10a4      	asrs	r4, r4, #2
    1592:	42a6      	cmp	r6, r4
    1594:	d105      	bne.n	15a2 <__libc_init_array+0x2e>
    1596:	bd70      	pop	{r4, r5, r6, pc}
    1598:	00b3      	lsls	r3, r6, #2
    159a:	58eb      	ldr	r3, [r5, r3]
    159c:	4798      	blx	r3
    159e:	3601      	adds	r6, #1
    15a0:	e7ee      	b.n	1580 <__libc_init_array+0xc>
    15a2:	00b3      	lsls	r3, r6, #2
    15a4:	58eb      	ldr	r3, [r5, r3]
    15a6:	4798      	blx	r3
    15a8:	3601      	adds	r6, #1
    15aa:	e7f2      	b.n	1592 <__libc_init_array+0x1e>
    15ac:	00001684 	.word	0x00001684
    15b0:	00001684 	.word	0x00001684
    15b4:	00001684 	.word	0x00001684
    15b8:	00001688 	.word	0x00001688
    15bc:	682f2e2e 	.word	0x682f2e2e
    15c0:	732f6c61 	.word	0x732f6c61
    15c4:	682f6372 	.word	0x682f6372
    15c8:	695f6c61 	.word	0x695f6c61
    15cc:	6d5f6332 	.word	0x6d5f6332
    15d0:	6e79735f 	.word	0x6e79735f
    15d4:	00632e63 	.word	0x00632e63
    15d8:	682f2e2e 	.word	0x682f2e2e
    15dc:	732f6c61 	.word	0x732f6c61
    15e0:	682f6372 	.word	0x682f6372
    15e4:	735f6c61 	.word	0x735f6c61
    15e8:	6d5f6970 	.word	0x6d5f6970
    15ec:	6e79735f 	.word	0x6e79735f
    15f0:	00632e63 	.word	0x00632e63
    15f4:	682f2e2e 	.word	0x682f2e2e
    15f8:	732f6c61 	.word	0x732f6c61
    15fc:	682f6372 	.word	0x682f6372
    1600:	745f6c61 	.word	0x745f6c61
    1604:	72656d69 	.word	0x72656d69
    1608:	0000632e 	.word	0x0000632e
    160c:	682f2e2e 	.word	0x682f2e2e
    1610:	752f6c61 	.word	0x752f6c61
    1614:	736c6974 	.word	0x736c6974
    1618:	6372732f 	.word	0x6372732f
    161c:	6974752f 	.word	0x6974752f
    1620:	6c5f736c 	.word	0x6c5f736c
    1624:	2e747369 	.word	0x2e747369
    1628:	00000063 	.word	0x00000063
    162c:	682f2e2e 	.word	0x682f2e2e
    1630:	722f6c70 	.word	0x722f6c70
    1634:	682f6374 	.word	0x682f6374
    1638:	725f6c70 	.word	0x725f6c70
    163c:	632e6374 	.word	0x632e6374
    1640:	00000000 	.word	0x00000000

00001644 <_i2cms>:
    1644:	00000003 00200014 00000100 000000ff     ...... .........
    1654:	00d70000 000f4240 682f2e2e 732f6c70     ....@B..../hpl/s
    1664:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    1674:	0000632e                                .c..

00001678 <_init>:
    1678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    167e:	bc08      	pop	{r3}
    1680:	469e      	mov	lr, r3
    1682:	4770      	bx	lr

00001684 <__init_array_start>:
    1684:	000000dd 	.word	0x000000dd

00001688 <_fini>:
    1688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    168e:	bc08      	pop	{r3}
    1690:	469e      	mov	lr, r3
    1692:	4770      	bx	lr

00001694 <__fini_array_start>:
    1694:	000000b5 	.word	0x000000b5
