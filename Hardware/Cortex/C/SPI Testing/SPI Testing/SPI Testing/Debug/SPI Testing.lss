
SPI Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010f4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000474  20000000  000010f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002a4  20000474  00001568  00020474  2**2
                  ALLOC
  3 .stack        00000400  20000718  0000180c  00020474  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000ae0d  00000000  00000000  000204f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000512  00000000  00000000  0002b302  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000053c  00000000  00000000  0002b814  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000f8  00000000  00000000  0002bd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  0002be48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00010491  00000000  00000000  0002bf20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000111d  00000000  00000000  0003c3b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006c0a8  00000000  00000000  0003d4ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000004f4  00000000  00000000  000a9578  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 0b 00 20 15 01 00 00 0d 02 00 00 0d 02 00 00     ... ............
	...
      2c:	0d 02 00 00 00 00 00 00 00 00 00 00 0d 02 00 00     ................
      3c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      4c:	0d 02 00 00 e9 0c 00 00 0d 02 00 00 0d 02 00 00     ................
      5c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      6c:	0d 02 00 00 0d 02 00 00 00 00 00 00 00 00 00 00     ................
      7c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      8c:	0d 02 00 00 0d 02 00 00 00 00 00 00 00 00 00 00     ................
      9c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      ac:	0d 02 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000474 	.word	0x20000474
      d4:	00000000 	.word	0x00000000
      d8:	000010f4 	.word	0x000010f4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000478 	.word	0x20000478
     108:	000010f4 	.word	0x000010f4
     10c:	000010f4 	.word	0x000010f4
     110:	00000000 	.word	0x00000000

00000114 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     11a:	4b2f      	ldr	r3, [pc, #188]	; (1d8 <Reset_Handler+0xc4>)
     11c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     11e:	4b2f      	ldr	r3, [pc, #188]	; (1dc <Reset_Handler+0xc8>)
     120:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     122:	687a      	ldr	r2, [r7, #4]
     124:	683b      	ldr	r3, [r7, #0]
     126:	429a      	cmp	r2, r3
     128:	d00c      	beq.n	144 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     12a:	e007      	b.n	13c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     12c:	683b      	ldr	r3, [r7, #0]
     12e:	1d1a      	adds	r2, r3, #4
     130:	603a      	str	r2, [r7, #0]
     132:	687a      	ldr	r2, [r7, #4]
     134:	1d11      	adds	r1, r2, #4
     136:	6079      	str	r1, [r7, #4]
     138:	6812      	ldr	r2, [r2, #0]
     13a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     13c:	683a      	ldr	r2, [r7, #0]
     13e:	4b28      	ldr	r3, [pc, #160]	; (1e0 <Reset_Handler+0xcc>)
     140:	429a      	cmp	r2, r3
     142:	d3f3      	bcc.n	12c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     144:	4b27      	ldr	r3, [pc, #156]	; (1e4 <Reset_Handler+0xd0>)
     146:	603b      	str	r3, [r7, #0]
     148:	e004      	b.n	154 <Reset_Handler+0x40>
                *pDest++ = 0;
     14a:	683b      	ldr	r3, [r7, #0]
     14c:	1d1a      	adds	r2, r3, #4
     14e:	603a      	str	r2, [r7, #0]
     150:	2200      	movs	r2, #0
     152:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     154:	683a      	ldr	r2, [r7, #0]
     156:	4b24      	ldr	r3, [pc, #144]	; (1e8 <Reset_Handler+0xd4>)
     158:	429a      	cmp	r2, r3
     15a:	d3f6      	bcc.n	14a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xd8>)
     15e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     160:	4b23      	ldr	r3, [pc, #140]	; (1f0 <Reset_Handler+0xdc>)
     162:	687a      	ldr	r2, [r7, #4]
     164:	21ff      	movs	r1, #255	; 0xff
     166:	438a      	bics	r2, r1
     168:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16a:	4a22      	ldr	r2, [pc, #136]	; (1f4 <Reset_Handler+0xe0>)
     16c:	2390      	movs	r3, #144	; 0x90
     16e:	005b      	lsls	r3, r3, #1
     170:	2102      	movs	r1, #2
     172:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     174:	4a20      	ldr	r2, [pc, #128]	; (1f8 <Reset_Handler+0xe4>)
     176:	78d3      	ldrb	r3, [r2, #3]
     178:	2103      	movs	r1, #3
     17a:	438b      	bics	r3, r1
     17c:	1c19      	adds	r1, r3, #0
     17e:	2302      	movs	r3, #2
     180:	430b      	orrs	r3, r1
     182:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     184:	4a1c      	ldr	r2, [pc, #112]	; (1f8 <Reset_Handler+0xe4>)
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	210c      	movs	r1, #12
     18a:	438b      	bics	r3, r1
     18c:	1c19      	adds	r1, r3, #0
     18e:	2308      	movs	r3, #8
     190:	430b      	orrs	r3, r1
     192:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     194:	4a19      	ldr	r2, [pc, #100]	; (1fc <Reset_Handler+0xe8>)
     196:	7b93      	ldrb	r3, [r2, #14]
     198:	2130      	movs	r1, #48	; 0x30
     19a:	438b      	bics	r3, r1
     19c:	1c19      	adds	r1, r3, #0
     19e:	2320      	movs	r3, #32
     1a0:	430b      	orrs	r3, r1
     1a2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a4:	4a15      	ldr	r2, [pc, #84]	; (1fc <Reset_Handler+0xe8>)
     1a6:	7b93      	ldrb	r3, [r2, #14]
     1a8:	210c      	movs	r1, #12
     1aa:	438b      	bics	r3, r1
     1ac:	1c19      	adds	r1, r3, #0
     1ae:	2308      	movs	r3, #8
     1b0:	430b      	orrs	r3, r1
     1b2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b4:	4a11      	ldr	r2, [pc, #68]	; (1fc <Reset_Handler+0xe8>)
     1b6:	7b93      	ldrb	r3, [r2, #14]
     1b8:	2103      	movs	r1, #3
     1ba:	438b      	bics	r3, r1
     1bc:	1c19      	adds	r1, r3, #0
     1be:	2302      	movs	r3, #2
     1c0:	430b      	orrs	r3, r1
     1c2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c4:	4a0e      	ldr	r2, [pc, #56]	; (200 <Reset_Handler+0xec>)
     1c6:	6853      	ldr	r3, [r2, #4]
     1c8:	2180      	movs	r1, #128	; 0x80
     1ca:	430b      	orrs	r3, r1
     1cc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ce:	4b0d      	ldr	r3, [pc, #52]	; (204 <Reset_Handler+0xf0>)
     1d0:	4798      	blx	r3

        /* Branch to main function */
        main();
     1d2:	4b0d      	ldr	r3, [pc, #52]	; (208 <Reset_Handler+0xf4>)
     1d4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xc2>
     1d8:	000010f4 	.word	0x000010f4
     1dc:	20000000 	.word	0x20000000
     1e0:	20000474 	.word	0x20000474
     1e4:	20000474 	.word	0x20000474
     1e8:	20000718 	.word	0x20000718
     1ec:	00000000 	.word	0x00000000
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	41007000 	.word	0x41007000
     1f8:	41005000 	.word	0x41005000
     1fc:	41004800 	.word	0x41004800
     200:	41004000 	.word	0x41004000
     204:	00000f2d 	.word	0x00000f2d
     208:	00000e51 	.word	0x00000e51

0000020c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     20c:	b580      	push	{r7, lr}
     20e:	af00      	add	r7, sp, #0
        while (1) {
     210:	e7fe      	b.n	210 <Dummy_Handler+0x4>
	...

00000214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
     214:	b580      	push	{r7, lr}
     216:	b082      	sub	sp, #8
     218:	af00      	add	r7, sp, #0
     21a:	0002      	movs	r2, r0
     21c:	1dfb      	adds	r3, r7, #7
     21e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
     220:	1dfb      	adds	r3, r7, #7
     222:	781b      	ldrb	r3, [r3, #0]
     224:	2b7f      	cmp	r3, #127	; 0x7f
     226:	d809      	bhi.n	23c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     228:	4b06      	ldr	r3, [pc, #24]	; (244 <__NVIC_EnableIRQ+0x30>)
     22a:	1dfa      	adds	r2, r7, #7
     22c:	7812      	ldrb	r2, [r2, #0]
     22e:	0011      	movs	r1, r2
     230:	221f      	movs	r2, #31
     232:	400a      	ands	r2, r1
     234:	2101      	movs	r1, #1
     236:	4091      	lsls	r1, r2
     238:	000a      	movs	r2, r1
     23a:	601a      	str	r2, [r3, #0]
  }
}
     23c:	46c0      	nop			; (mov r8, r8)
     23e:	46bd      	mov	sp, r7
     240:	b002      	add	sp, #8
     242:	bd80      	pop	{r7, pc}
     244:	e000e100 	.word	0xe000e100

00000248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     248:	b5b0      	push	{r4, r5, r7, lr}
     24a:	b082      	sub	sp, #8
     24c:	af00      	add	r7, sp, #0
     24e:	0002      	movs	r2, r0
     250:	6039      	str	r1, [r7, #0]
     252:	1dfb      	adds	r3, r7, #7
     254:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
     256:	1dfb      	adds	r3, r7, #7
     258:	781b      	ldrb	r3, [r3, #0]
     25a:	2b7f      	cmp	r3, #127	; 0x7f
     25c:	d828      	bhi.n	2b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     25e:	4c2f      	ldr	r4, [pc, #188]	; (31c <__NVIC_SetPriority+0xd4>)
     260:	1dfb      	adds	r3, r7, #7
     262:	781b      	ldrb	r3, [r3, #0]
     264:	b25b      	sxtb	r3, r3
     266:	089b      	lsrs	r3, r3, #2
     268:	492c      	ldr	r1, [pc, #176]	; (31c <__NVIC_SetPriority+0xd4>)
     26a:	1dfa      	adds	r2, r7, #7
     26c:	7812      	ldrb	r2, [r2, #0]
     26e:	b252      	sxtb	r2, r2
     270:	0892      	lsrs	r2, r2, #2
     272:	32c0      	adds	r2, #192	; 0xc0
     274:	0092      	lsls	r2, r2, #2
     276:	5852      	ldr	r2, [r2, r1]
     278:	1df9      	adds	r1, r7, #7
     27a:	7809      	ldrb	r1, [r1, #0]
     27c:	0008      	movs	r0, r1
     27e:	2103      	movs	r1, #3
     280:	4001      	ands	r1, r0
     282:	00c9      	lsls	r1, r1, #3
     284:	20ff      	movs	r0, #255	; 0xff
     286:	4088      	lsls	r0, r1
     288:	0001      	movs	r1, r0
     28a:	43c9      	mvns	r1, r1
     28c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     28e:	683a      	ldr	r2, [r7, #0]
     290:	0192      	lsls	r2, r2, #6
     292:	20ff      	movs	r0, #255	; 0xff
     294:	4010      	ands	r0, r2
     296:	1dfa      	adds	r2, r7, #7
     298:	7812      	ldrb	r2, [r2, #0]
     29a:	0015      	movs	r5, r2
     29c:	2203      	movs	r2, #3
     29e:	402a      	ands	r2, r5
     2a0:	00d2      	lsls	r2, r2, #3
     2a2:	4090      	lsls	r0, r2
     2a4:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     2a6:	430a      	orrs	r2, r1
     2a8:	33c0      	adds	r3, #192	; 0xc0
     2aa:	009b      	lsls	r3, r3, #2
     2ac:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
     2ae:	e031      	b.n	314 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     2b0:	4c1b      	ldr	r4, [pc, #108]	; (320 <__NVIC_SetPriority+0xd8>)
     2b2:	1dfb      	adds	r3, r7, #7
     2b4:	781b      	ldrb	r3, [r3, #0]
     2b6:	001a      	movs	r2, r3
     2b8:	230f      	movs	r3, #15
     2ba:	4013      	ands	r3, r2
     2bc:	3b08      	subs	r3, #8
     2be:	0899      	lsrs	r1, r3, #2
     2c0:	4a17      	ldr	r2, [pc, #92]	; (320 <__NVIC_SetPriority+0xd8>)
     2c2:	1dfb      	adds	r3, r7, #7
     2c4:	781b      	ldrb	r3, [r3, #0]
     2c6:	0018      	movs	r0, r3
     2c8:	230f      	movs	r3, #15
     2ca:	4003      	ands	r3, r0
     2cc:	3b08      	subs	r3, #8
     2ce:	089b      	lsrs	r3, r3, #2
     2d0:	3306      	adds	r3, #6
     2d2:	009b      	lsls	r3, r3, #2
     2d4:	18d3      	adds	r3, r2, r3
     2d6:	3304      	adds	r3, #4
     2d8:	681b      	ldr	r3, [r3, #0]
     2da:	1dfa      	adds	r2, r7, #7
     2dc:	7812      	ldrb	r2, [r2, #0]
     2de:	0010      	movs	r0, r2
     2e0:	2203      	movs	r2, #3
     2e2:	4002      	ands	r2, r0
     2e4:	00d2      	lsls	r2, r2, #3
     2e6:	20ff      	movs	r0, #255	; 0xff
     2e8:	4090      	lsls	r0, r2
     2ea:	0002      	movs	r2, r0
     2ec:	43d2      	mvns	r2, r2
     2ee:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     2f0:	683b      	ldr	r3, [r7, #0]
     2f2:	019b      	lsls	r3, r3, #6
     2f4:	20ff      	movs	r0, #255	; 0xff
     2f6:	4018      	ands	r0, r3
     2f8:	1dfb      	adds	r3, r7, #7
     2fa:	781b      	ldrb	r3, [r3, #0]
     2fc:	001d      	movs	r5, r3
     2fe:	2303      	movs	r3, #3
     300:	402b      	ands	r3, r5
     302:	00db      	lsls	r3, r3, #3
     304:	4098      	lsls	r0, r3
     306:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     308:	431a      	orrs	r2, r3
     30a:	1d8b      	adds	r3, r1, #6
     30c:	009b      	lsls	r3, r3, #2
     30e:	18e3      	adds	r3, r4, r3
     310:	3304      	adds	r3, #4
     312:	601a      	str	r2, [r3, #0]
}
     314:	46c0      	nop			; (mov r8, r8)
     316:	46bd      	mov	sp, r7
     318:	b002      	add	sp, #8
     31a:	bdb0      	pop	{r4, r5, r7, pc}
     31c:	e000e100 	.word	0xe000e100
     320:	e000ed00 	.word	0xe000ed00

00000324 <setPinPort>:
enum pull_en _pull_en;
enum input_res_pul _input_res_pul;
enum num _num;
};

void setPinPort(struct pin* Pin, enum port Port){
     324:	b580      	push	{r7, lr}
     326:	b082      	sub	sp, #8
     328:	af00      	add	r7, sp, #0
     32a:	6078      	str	r0, [r7, #4]
     32c:	000a      	movs	r2, r1
     32e:	1cfb      	adds	r3, r7, #3
     330:	701a      	strb	r2, [r3, #0]
	Pin->_port=Port;
     332:	687b      	ldr	r3, [r7, #4]
     334:	1cfa      	adds	r2, r7, #3
     336:	7812      	ldrb	r2, [r2, #0]
     338:	735a      	strb	r2, [r3, #13]
	Pin->isPeripheralCont=false;
     33a:	687b      	ldr	r3, [r7, #4]
     33c:	2200      	movs	r2, #0
     33e:	731a      	strb	r2, [r3, #12]
	return;
     340:	46c0      	nop			; (mov r8, r8)
}
     342:	46bd      	mov	sp, r7
     344:	b002      	add	sp, #8
     346:	bd80      	pop	{r7, pc}

00000348 <setPinNum>:
void setPinNum(struct pin* Pin, enum num Num){
     348:	b580      	push	{r7, lr}
     34a:	b082      	sub	sp, #8
     34c:	af00      	add	r7, sp, #0
     34e:	6078      	str	r0, [r7, #4]
     350:	000a      	movs	r2, r1
     352:	1cfb      	adds	r3, r7, #3
     354:	701a      	strb	r2, [r3, #0]
	Pin->_num=Num;
     356:	687b      	ldr	r3, [r7, #4]
     358:	1cfa      	adds	r2, r7, #3
     35a:	7812      	ldrb	r2, [r2, #0]
     35c:	745a      	strb	r2, [r3, #17]
	Pin->bitmask=0;
     35e:	687b      	ldr	r3, [r7, #4]
     360:	2200      	movs	r2, #0
     362:	601a      	str	r2, [r3, #0]
	Pin->bitmask = 1UL<< Num;
     364:	1cfb      	adds	r3, r7, #3
     366:	781b      	ldrb	r3, [r3, #0]
     368:	2201      	movs	r2, #1
     36a:	409a      	lsls	r2, r3
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	601a      	str	r2, [r3, #0]
	return;
     370:	46c0      	nop			; (mov r8, r8)
}
     372:	46bd      	mov	sp, r7
     374:	b002      	add	sp, #8
     376:	bd80      	pop	{r7, pc}

00000378 <setPinDrive>:
void setPinDrive(struct pin* Pin, enum pull_en Pull_en){
     378:	b580      	push	{r7, lr}
     37a:	b082      	sub	sp, #8
     37c:	af00      	add	r7, sp, #0
     37e:	6078      	str	r0, [r7, #4]
     380:	000a      	movs	r2, r1
     382:	1cfb      	adds	r3, r7, #3
     384:	701a      	strb	r2, [r3, #0]
	Pin->_pull_en=Pull_en;
     386:	687b      	ldr	r3, [r7, #4]
     388:	1cfa      	adds	r2, r7, #3
     38a:	7812      	ldrb	r2, [r2, #0]
     38c:	73da      	strb	r2, [r3, #15]
	return;
     38e:	46c0      	nop			; (mov r8, r8)
}
     390:	46bd      	mov	sp, r7
     392:	b002      	add	sp, #8
     394:	bd80      	pop	{r7, pc}

00000396 <setPinResPull>:
void setPinResPull(struct pin* Pin, enum input_res_pul Pull){
     396:	b580      	push	{r7, lr}
     398:	b082      	sub	sp, #8
     39a:	af00      	add	r7, sp, #0
     39c:	6078      	str	r0, [r7, #4]
     39e:	000a      	movs	r2, r1
     3a0:	1cfb      	adds	r3, r7, #3
     3a2:	701a      	strb	r2, [r3, #0]
	Pin->_input_res_pul=Pull;
     3a4:	687b      	ldr	r3, [r7, #4]
     3a6:	1cfa      	adds	r2, r7, #3
     3a8:	7812      	ldrb	r2, [r2, #0]
     3aa:	741a      	strb	r2, [r3, #16]
	return;
     3ac:	46c0      	nop			; (mov r8, r8)
}
     3ae:	46bd      	mov	sp, r7
     3b0:	b002      	add	sp, #8
     3b2:	bd80      	pop	{r7, pc}

000003b4 <setPinDir>:
void setPinDir(struct pin* Pin, enum pin_mode dir){//Set after Port, Num, and pull up/down or
     3b4:	b580      	push	{r7, lr}
     3b6:	b082      	sub	sp, #8
     3b8:	af00      	add	r7, sp, #0
     3ba:	6078      	str	r0, [r7, #4]
     3bc:	000a      	movs	r2, r1
     3be:	1cfb      	adds	r3, r7, #3
     3c0:	701a      	strb	r2, [r3, #0]
	Pin->_pin_mode=dir;
     3c2:	687b      	ldr	r3, [r7, #4]
     3c4:	1cfa      	adds	r2, r7, #3
     3c6:	7812      	ldrb	r2, [r2, #0]
     3c8:	739a      	strb	r2, [r3, #14]
	if(dir == OUTPUT){
     3ca:	1cfb      	adds	r3, r7, #3
     3cc:	781b      	ldrb	r3, [r3, #0]
     3ce:	2b09      	cmp	r3, #9
     3d0:	d10d      	bne.n	3ee <setPinDir+0x3a>
		PORT->Group[Pin->_port].DIRSET.reg = Pin->bitmask;
     3d2:	4922      	ldr	r1, [pc, #136]	; (45c <STACK_SIZE+0x5c>)
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	7b5b      	ldrb	r3, [r3, #13]
     3d8:	0018      	movs	r0, r3
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	681a      	ldr	r2, [r3, #0]
     3de:	01c3      	lsls	r3, r0, #7
     3e0:	18cb      	adds	r3, r1, r3
     3e2:	3308      	adds	r3, #8
     3e4:	601a      	str	r2, [r3, #0]
		Pin->isPeripheralCont = false;
     3e6:	687b      	ldr	r3, [r7, #4]
     3e8:	2200      	movs	r2, #0
     3ea:	731a      	strb	r2, [r3, #12]
		else if(Pin->_input_res_pul==PULL_DOWN){
			PORT->Group[Pin->_num].OUTCLR.reg = Pin->bitmask;
		}
	}
	else{Pin->isPeripheralCont = true;}
}
     3ec:	e031      	b.n	452 <STACK_SIZE+0x52>
	else if(dir==INPUT){
     3ee:	1cfb      	adds	r3, r7, #3
     3f0:	781b      	ldrb	r3, [r3, #0]
     3f2:	2b08      	cmp	r3, #8
     3f4:	d12a      	bne.n	44c <STACK_SIZE+0x4c>
		Pin->isPeripheralCont = false;
     3f6:	687b      	ldr	r3, [r7, #4]
     3f8:	2200      	movs	r2, #0
     3fa:	731a      	strb	r2, [r3, #12]
		PORT->Group[Pin->_port].DIRCLR.reg = Pin->bitmask;
     3fc:	4917      	ldr	r1, [pc, #92]	; (45c <STACK_SIZE+0x5c>)
     3fe:	687b      	ldr	r3, [r7, #4]
     400:	7b5b      	ldrb	r3, [r3, #13]
     402:	0018      	movs	r0, r3
     404:	687b      	ldr	r3, [r7, #4]
     406:	681a      	ldr	r2, [r3, #0]
     408:	01c3      	lsls	r3, r0, #7
     40a:	18cb      	adds	r3, r1, r3
     40c:	3304      	adds	r3, #4
     40e:	601a      	str	r2, [r3, #0]
		if(Pin->_input_res_pul == PULL_UP){
     410:	687b      	ldr	r3, [r7, #4]
     412:	7c1b      	ldrb	r3, [r3, #16]
     414:	2b01      	cmp	r3, #1
     416:	d10a      	bne.n	42e <STACK_SIZE+0x2e>
			PORT->Group[Pin->_num].OUTSET.reg = Pin->bitmask;
     418:	4910      	ldr	r1, [pc, #64]	; (45c <STACK_SIZE+0x5c>)
     41a:	687b      	ldr	r3, [r7, #4]
     41c:	7c5b      	ldrb	r3, [r3, #17]
     41e:	0018      	movs	r0, r3
     420:	687b      	ldr	r3, [r7, #4]
     422:	681a      	ldr	r2, [r3, #0]
     424:	01c3      	lsls	r3, r0, #7
     426:	18cb      	adds	r3, r1, r3
     428:	3318      	adds	r3, #24
     42a:	601a      	str	r2, [r3, #0]
}
     42c:	e011      	b.n	452 <STACK_SIZE+0x52>
		else if(Pin->_input_res_pul==PULL_DOWN){
     42e:	687b      	ldr	r3, [r7, #4]
     430:	7c1b      	ldrb	r3, [r3, #16]
     432:	2b02      	cmp	r3, #2
     434:	d10d      	bne.n	452 <STACK_SIZE+0x52>
			PORT->Group[Pin->_num].OUTCLR.reg = Pin->bitmask;
     436:	4909      	ldr	r1, [pc, #36]	; (45c <STACK_SIZE+0x5c>)
     438:	687b      	ldr	r3, [r7, #4]
     43a:	7c5b      	ldrb	r3, [r3, #17]
     43c:	0018      	movs	r0, r3
     43e:	687b      	ldr	r3, [r7, #4]
     440:	681a      	ldr	r2, [r3, #0]
     442:	01c3      	lsls	r3, r0, #7
     444:	18cb      	adds	r3, r1, r3
     446:	3314      	adds	r3, #20
     448:	601a      	str	r2, [r3, #0]
}
     44a:	e002      	b.n	452 <STACK_SIZE+0x52>
	else{Pin->isPeripheralCont = true;}
     44c:	687b      	ldr	r3, [r7, #4]
     44e:	2201      	movs	r2, #1
     450:	731a      	strb	r2, [r3, #12]
}
     452:	46c0      	nop			; (mov r8, r8)
     454:	46bd      	mov	sp, r7
     456:	b002      	add	sp, #8
     458:	bd80      	pop	{r7, pc}
     45a:	46c0      	nop			; (mov r8, r8)
     45c:	41004400 	.word	0x41004400

00000460 <PinCFG>:
void PinCFG(struct pin* Pin, enum pin_mode dir, enum pull_en Pull_en, enum input_res_pul Pull){
     460:	b590      	push	{r4, r7, lr}
     462:	b085      	sub	sp, #20
     464:	af00      	add	r7, sp, #0
     466:	6078      	str	r0, [r7, #4]
     468:	000c      	movs	r4, r1
     46a:	0010      	movs	r0, r2
     46c:	0019      	movs	r1, r3
     46e:	1cfb      	adds	r3, r7, #3
     470:	1c22      	adds	r2, r4, #0
     472:	701a      	strb	r2, [r3, #0]
     474:	1cbb      	adds	r3, r7, #2
     476:	1c02      	adds	r2, r0, #0
     478:	701a      	strb	r2, [r3, #0]
     47a:	1c7b      	adds	r3, r7, #1
     47c:	1c0a      	adds	r2, r1, #0
     47e:	701a      	strb	r2, [r3, #0]
	setPinDrive(Pin,Pull_en);
     480:	1cbb      	adds	r3, r7, #2
     482:	781a      	ldrb	r2, [r3, #0]
     484:	687b      	ldr	r3, [r7, #4]
     486:	0011      	movs	r1, r2
     488:	0018      	movs	r0, r3
     48a:	4b43      	ldr	r3, [pc, #268]	; (598 <PinCFG+0x138>)
     48c:	4798      	blx	r3
	setPinResPull(Pin,Pull);
     48e:	1c7b      	adds	r3, r7, #1
     490:	781a      	ldrb	r2, [r3, #0]
     492:	687b      	ldr	r3, [r7, #4]
     494:	0011      	movs	r1, r2
     496:	0018      	movs	r0, r3
     498:	4b40      	ldr	r3, [pc, #256]	; (59c <PinCFG+0x13c>)
     49a:	4798      	blx	r3
	setPinDir(Pin,dir);
     49c:	1cfb      	adds	r3, r7, #3
     49e:	781a      	ldrb	r2, [r3, #0]
     4a0:	687b      	ldr	r3, [r7, #4]
     4a2:	0011      	movs	r1, r2
     4a4:	0018      	movs	r0, r3
     4a6:	4b3e      	ldr	r3, [pc, #248]	; (5a0 <PinCFG+0x140>)
     4a8:	4798      	blx	r3
	Pin->wrConfigVal |= PORT_WRCONFIG_WRPINCFG;
     4aa:	687b      	ldr	r3, [r7, #4]
     4ac:	689b      	ldr	r3, [r3, #8]
     4ae:	2280      	movs	r2, #128	; 0x80
     4b0:	05d2      	lsls	r2, r2, #23
     4b2:	431a      	orrs	r2, r3
     4b4:	687b      	ldr	r3, [r7, #4]
     4b6:	609a      	str	r2, [r3, #8]
	uint16_t pinBitmaskHalf = 1;
     4b8:	230e      	movs	r3, #14
     4ba:	18fb      	adds	r3, r7, r3
     4bc:	2201      	movs	r2, #1
     4be:	801a      	strh	r2, [r3, #0]
	if(Pin->_num < BITSINHALFWORD){
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	7c5b      	ldrb	r3, [r3, #17]
     4c4:	2b0f      	cmp	r3, #15
     4c6:	d80a      	bhi.n	4de <PinCFG+0x7e>
		pinBitmaskHalf <<= Pin->_num;
     4c8:	230e      	movs	r3, #14
     4ca:	18fb      	adds	r3, r7, r3
     4cc:	881b      	ldrh	r3, [r3, #0]
     4ce:	687a      	ldr	r2, [r7, #4]
     4d0:	7c52      	ldrb	r2, [r2, #17]
     4d2:	4093      	lsls	r3, r2
     4d4:	001a      	movs	r2, r3
     4d6:	230e      	movs	r3, #14
     4d8:	18fb      	adds	r3, r7, r3
     4da:	801a      	strh	r2, [r3, #0]
     4dc:	e010      	b.n	500 <PinCFG+0xa0>
	}
	else{
		Pin->wrConfigVal |= PORT_WRCONFIG_HWSEL;
     4de:	687b      	ldr	r3, [r7, #4]
     4e0:	689b      	ldr	r3, [r3, #8]
     4e2:	2280      	movs	r2, #128	; 0x80
     4e4:	0612      	lsls	r2, r2, #24
     4e6:	431a      	orrs	r2, r3
     4e8:	687b      	ldr	r3, [r7, #4]
     4ea:	609a      	str	r2, [r3, #8]
		pinBitmaskHalf <<= (Pin->_num - BITSINHALFWORD);
     4ec:	230e      	movs	r3, #14
     4ee:	18fb      	adds	r3, r7, r3
     4f0:	881a      	ldrh	r2, [r3, #0]
     4f2:	687b      	ldr	r3, [r7, #4]
     4f4:	7c5b      	ldrb	r3, [r3, #17]
     4f6:	3b10      	subs	r3, #16
     4f8:	409a      	lsls	r2, r3
     4fa:	230e      	movs	r3, #14
     4fc:	18fb      	adds	r3, r7, r3
     4fe:	801a      	strh	r2, [r3, #0]
	}
	Pin->wrConfigVal |= PORT_WRCONFIG_PINMASK(pinBitmaskHalf);
     500:	687b      	ldr	r3, [r7, #4]
     502:	689a      	ldr	r2, [r3, #8]
     504:	230e      	movs	r3, #14
     506:	18fb      	adds	r3, r7, r3
     508:	881b      	ldrh	r3, [r3, #0]
     50a:	431a      	orrs	r2, r3
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	609a      	str	r2, [r3, #8]
	if(Pin->_pin_mode == OUTPUT &&Pin->_pull_en == HIGH){
     510:	687b      	ldr	r3, [r7, #4]
     512:	7b9b      	ldrb	r3, [r3, #14]
     514:	2b09      	cmp	r3, #9
     516:	d10a      	bne.n	52e <PinCFG+0xce>
     518:	687b      	ldr	r3, [r7, #4]
     51a:	7bdb      	ldrb	r3, [r3, #15]
     51c:	2b01      	cmp	r3, #1
     51e:	d106      	bne.n	52e <PinCFG+0xce>
		Pin->wrConfigVal |= PORT_WRCONFIG_DRVSTR;
     520:	687b      	ldr	r3, [r7, #4]
     522:	689b      	ldr	r3, [r3, #8]
     524:	2280      	movs	r2, #128	; 0x80
     526:	03d2      	lsls	r2, r2, #15
     528:	431a      	orrs	r2, r3
     52a:	687b      	ldr	r3, [r7, #4]
     52c:	609a      	str	r2, [r3, #8]
	}
	if(Pin->_pin_mode == INPUT){
     52e:	687b      	ldr	r3, [r7, #4]
     530:	7b9b      	ldrb	r3, [r3, #14]
     532:	2b08      	cmp	r3, #8
     534:	d106      	bne.n	544 <PinCFG+0xe4>
		Pin->wrConfigVal |= PORT_WRCONFIG_INEN;
     536:	687b      	ldr	r3, [r7, #4]
     538:	689b      	ldr	r3, [r3, #8]
     53a:	2280      	movs	r2, #128	; 0x80
     53c:	0292      	lsls	r2, r2, #10
     53e:	431a      	orrs	r2, r3
     540:	687b      	ldr	r3, [r7, #4]
     542:	609a      	str	r2, [r3, #8]
	}
	if(Pin->_pin_mode == INPUT && Pin->_input_res_pul == NONE){
     544:	687b      	ldr	r3, [r7, #4]
     546:	7b9b      	ldrb	r3, [r3, #14]
     548:	2b08      	cmp	r3, #8
     54a:	d10a      	bne.n	562 <PinCFG+0x102>
     54c:	687b      	ldr	r3, [r7, #4]
     54e:	7c1b      	ldrb	r3, [r3, #16]
     550:	2b00      	cmp	r3, #0
     552:	d106      	bne.n	562 <PinCFG+0x102>
		Pin->wrConfigVal |= PORT_WRCONFIG_PULLEN;
     554:	687b      	ldr	r3, [r7, #4]
     556:	689b      	ldr	r3, [r3, #8]
     558:	2280      	movs	r2, #128	; 0x80
     55a:	02d2      	lsls	r2, r2, #11
     55c:	431a      	orrs	r2, r3
     55e:	687b      	ldr	r3, [r7, #4]
     560:	609a      	str	r2, [r3, #8]
	}
	if(Pin->isPeripheralCont){
     562:	687b      	ldr	r3, [r7, #4]
     564:	7b1b      	ldrb	r3, [r3, #12]
     566:	2b00      	cmp	r3, #0
     568:	d011      	beq.n	58e <PinCFG+0x12e>
		Pin->wrConfigVal |= PORT_WRCONFIG_PMUX((uint8_t)Pin->_pin_mode);
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	689a      	ldr	r2, [r3, #8]
     56e:	687b      	ldr	r3, [r7, #4]
     570:	7b9b      	ldrb	r3, [r3, #14]
     572:	061b      	lsls	r3, r3, #24
     574:	0019      	movs	r1, r3
     576:	23f0      	movs	r3, #240	; 0xf0
     578:	051b      	lsls	r3, r3, #20
     57a:	400b      	ands	r3, r1
     57c:	431a      	orrs	r2, r3
     57e:	687b      	ldr	r3, [r7, #4]
     580:	609a      	str	r2, [r3, #8]
		Pin->wrConfigVal|= PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN;
     582:	687b      	ldr	r3, [r7, #4]
     584:	689b      	ldr	r3, [r3, #8]
     586:	4a07      	ldr	r2, [pc, #28]	; (5a4 <PinCFG+0x144>)
     588:	431a      	orrs	r2, r3
     58a:	687b      	ldr	r3, [r7, #4]
     58c:	609a      	str	r2, [r3, #8]
		
	}
}
     58e:	46c0      	nop			; (mov r8, r8)
     590:	46bd      	mov	sp, r7
     592:	b005      	add	sp, #20
     594:	bd90      	pop	{r4, r7, pc}
     596:	46c0      	nop			; (mov r8, r8)
     598:	00000379 	.word	0x00000379
     59c:	00000397 	.word	0x00000397
     5a0:	000003b5 	.word	0x000003b5
     5a4:	10010000 	.word	0x10010000

000005a8 <setPin>:

void setPin(struct pin* Pin, enum pin_mode dir, enum pull_en Pull_en, enum input_res_pul Pull ){
     5a8:	b590      	push	{r4, r7, lr}
     5aa:	b083      	sub	sp, #12
     5ac:	af00      	add	r7, sp, #0
     5ae:	6078      	str	r0, [r7, #4]
     5b0:	000c      	movs	r4, r1
     5b2:	0010      	movs	r0, r2
     5b4:	0019      	movs	r1, r3
     5b6:	1cfb      	adds	r3, r7, #3
     5b8:	1c22      	adds	r2, r4, #0
     5ba:	701a      	strb	r2, [r3, #0]
     5bc:	1cbb      	adds	r3, r7, #2
     5be:	1c02      	adds	r2, r0, #0
     5c0:	701a      	strb	r2, [r3, #0]
     5c2:	1c7b      	adds	r3, r7, #1
     5c4:	1c0a      	adds	r2, r1, #0
     5c6:	701a      	strb	r2, [r3, #0]
	PinCFG(Pin, dir, Pull_en, Pull);
     5c8:	1c7b      	adds	r3, r7, #1
     5ca:	781c      	ldrb	r4, [r3, #0]
     5cc:	1cbb      	adds	r3, r7, #2
     5ce:	781a      	ldrb	r2, [r3, #0]
     5d0:	1cfb      	adds	r3, r7, #3
     5d2:	7819      	ldrb	r1, [r3, #0]
     5d4:	6878      	ldr	r0, [r7, #4]
     5d6:	0023      	movs	r3, r4
     5d8:	4c07      	ldr	r4, [pc, #28]	; (5f8 <setPin+0x50>)
     5da:	47a0      	blx	r4
	PORT->Group[Pin->_port].WRCONFIG.reg = Pin->wrConfigVal;
     5dc:	4907      	ldr	r1, [pc, #28]	; (5fc <setPin+0x54>)
     5de:	687b      	ldr	r3, [r7, #4]
     5e0:	7b5b      	ldrb	r3, [r3, #13]
     5e2:	0018      	movs	r0, r3
     5e4:	687b      	ldr	r3, [r7, #4]
     5e6:	689a      	ldr	r2, [r3, #8]
     5e8:	01c3      	lsls	r3, r0, #7
     5ea:	18cb      	adds	r3, r1, r3
     5ec:	3328      	adds	r3, #40	; 0x28
     5ee:	601a      	str	r2, [r3, #0]
}
     5f0:	46c0      	nop			; (mov r8, r8)
     5f2:	46bd      	mov	sp, r7
     5f4:	b003      	add	sp, #12
     5f6:	bd90      	pop	{r4, r7, pc}
     5f8:	00000461 	.word	0x00000461
     5fc:	41004400 	.word	0x41004400

00000600 <writePin>:


void writePin(struct pin* Pin, bool val){
     600:	b580      	push	{r7, lr}
     602:	b082      	sub	sp, #8
     604:	af00      	add	r7, sp, #0
     606:	6078      	str	r0, [r7, #4]
     608:	000a      	movs	r2, r1
     60a:	1cfb      	adds	r3, r7, #3
     60c:	701a      	strb	r2, [r3, #0]
	if(val){
     60e:	1cfb      	adds	r3, r7, #3
     610:	781b      	ldrb	r3, [r3, #0]
     612:	2b00      	cmp	r3, #0
     614:	d009      	beq.n	62a <writePin+0x2a>
		PORT->Group[Pin->_port].OUTSET.reg = Pin->bitmask;
     616:	490f      	ldr	r1, [pc, #60]	; (654 <writePin+0x54>)
     618:	687b      	ldr	r3, [r7, #4]
     61a:	7b5b      	ldrb	r3, [r3, #13]
     61c:	0018      	movs	r0, r3
     61e:	687b      	ldr	r3, [r7, #4]
     620:	681a      	ldr	r2, [r3, #0]
     622:	01c3      	lsls	r3, r0, #7
     624:	18cb      	adds	r3, r1, r3
     626:	3318      	adds	r3, #24
     628:	601a      	str	r2, [r3, #0]
	}
	if(!val){
     62a:	1cfb      	adds	r3, r7, #3
     62c:	781b      	ldrb	r3, [r3, #0]
     62e:	2201      	movs	r2, #1
     630:	4053      	eors	r3, r2
     632:	b2db      	uxtb	r3, r3
     634:	2b00      	cmp	r3, #0
     636:	d009      	beq.n	64c <writePin+0x4c>
		PORT->Group[Pin->_port].OUTCLR.reg = Pin->bitmask;
     638:	4906      	ldr	r1, [pc, #24]	; (654 <writePin+0x54>)
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	7b5b      	ldrb	r3, [r3, #13]
     63e:	0018      	movs	r0, r3
     640:	687b      	ldr	r3, [r7, #4]
     642:	681a      	ldr	r2, [r3, #0]
     644:	01c3      	lsls	r3, r0, #7
     646:	18cb      	adds	r3, r1, r3
     648:	3314      	adds	r3, #20
     64a:	601a      	str	r2, [r3, #0]
	}
}
     64c:	46c0      	nop			; (mov r8, r8)
     64e:	46bd      	mov	sp, r7
     650:	b002      	add	sp, #8
     652:	bd80      	pop	{r7, pc}
     654:	41004400 	.word	0x41004400

00000658 <initPins>:
struct pin PA27;
struct pin PA28;
struct pin PA29;
struct pin PA30;
struct pin PA31;
void initPins(){
     658:	b580      	push	{r7, lr}
     65a:	b082      	sub	sp, #8
     65c:	af00      	add	r7, sp, #0
enum port Port=PORTA;
     65e:	1dfb      	adds	r3, r7, #7
     660:	2200      	movs	r2, #0
     662:	701a      	strb	r2, [r3, #0]
setPinPort(&PA00,Port);
     664:	1dfb      	adds	r3, r7, #7
     666:	781a      	ldrb	r2, [r3, #0]
     668:	4be6      	ldr	r3, [pc, #920]	; (a04 <initPins+0x3ac>)
     66a:	0011      	movs	r1, r2
     66c:	0018      	movs	r0, r3
     66e:	4be6      	ldr	r3, [pc, #920]	; (a08 <initPins+0x3b0>)
     670:	4798      	blx	r3
setPinPort(&PA01,Port);
     672:	1dfb      	adds	r3, r7, #7
     674:	781a      	ldrb	r2, [r3, #0]
     676:	4be5      	ldr	r3, [pc, #916]	; (a0c <initPins+0x3b4>)
     678:	0011      	movs	r1, r2
     67a:	0018      	movs	r0, r3
     67c:	4be2      	ldr	r3, [pc, #904]	; (a08 <initPins+0x3b0>)
     67e:	4798      	blx	r3
setPinPort(&PA02,Port);
     680:	1dfb      	adds	r3, r7, #7
     682:	781a      	ldrb	r2, [r3, #0]
     684:	4be2      	ldr	r3, [pc, #904]	; (a10 <initPins+0x3b8>)
     686:	0011      	movs	r1, r2
     688:	0018      	movs	r0, r3
     68a:	4bdf      	ldr	r3, [pc, #892]	; (a08 <initPins+0x3b0>)
     68c:	4798      	blx	r3
setPinPort(&PA03,Port);
     68e:	1dfb      	adds	r3, r7, #7
     690:	781a      	ldrb	r2, [r3, #0]
     692:	4be0      	ldr	r3, [pc, #896]	; (a14 <initPins+0x3bc>)
     694:	0011      	movs	r1, r2
     696:	0018      	movs	r0, r3
     698:	4bdb      	ldr	r3, [pc, #876]	; (a08 <initPins+0x3b0>)
     69a:	4798      	blx	r3
setPinPort(&PA04,Port);
     69c:	1dfb      	adds	r3, r7, #7
     69e:	781a      	ldrb	r2, [r3, #0]
     6a0:	4bdd      	ldr	r3, [pc, #884]	; (a18 <initPins+0x3c0>)
     6a2:	0011      	movs	r1, r2
     6a4:	0018      	movs	r0, r3
     6a6:	4bd8      	ldr	r3, [pc, #864]	; (a08 <initPins+0x3b0>)
     6a8:	4798      	blx	r3
setPinPort(&PA05,Port);
     6aa:	1dfb      	adds	r3, r7, #7
     6ac:	781a      	ldrb	r2, [r3, #0]
     6ae:	4bdb      	ldr	r3, [pc, #876]	; (a1c <initPins+0x3c4>)
     6b0:	0011      	movs	r1, r2
     6b2:	0018      	movs	r0, r3
     6b4:	4bd4      	ldr	r3, [pc, #848]	; (a08 <initPins+0x3b0>)
     6b6:	4798      	blx	r3
setPinPort(&PA06,Port);
     6b8:	1dfb      	adds	r3, r7, #7
     6ba:	781a      	ldrb	r2, [r3, #0]
     6bc:	4bd8      	ldr	r3, [pc, #864]	; (a20 <initPins+0x3c8>)
     6be:	0011      	movs	r1, r2
     6c0:	0018      	movs	r0, r3
     6c2:	4bd1      	ldr	r3, [pc, #836]	; (a08 <initPins+0x3b0>)
     6c4:	4798      	blx	r3
setPinPort(&PA07,Port);
     6c6:	1dfb      	adds	r3, r7, #7
     6c8:	781a      	ldrb	r2, [r3, #0]
     6ca:	4bd6      	ldr	r3, [pc, #856]	; (a24 <initPins+0x3cc>)
     6cc:	0011      	movs	r1, r2
     6ce:	0018      	movs	r0, r3
     6d0:	4bcd      	ldr	r3, [pc, #820]	; (a08 <initPins+0x3b0>)
     6d2:	4798      	blx	r3
setPinPort(&PA08,Port);
     6d4:	1dfb      	adds	r3, r7, #7
     6d6:	781a      	ldrb	r2, [r3, #0]
     6d8:	4bd3      	ldr	r3, [pc, #844]	; (a28 <initPins+0x3d0>)
     6da:	0011      	movs	r1, r2
     6dc:	0018      	movs	r0, r3
     6de:	4bca      	ldr	r3, [pc, #808]	; (a08 <initPins+0x3b0>)
     6e0:	4798      	blx	r3
setPinPort(&PA09,Port);
     6e2:	1dfb      	adds	r3, r7, #7
     6e4:	781a      	ldrb	r2, [r3, #0]
     6e6:	4bd1      	ldr	r3, [pc, #836]	; (a2c <initPins+0x3d4>)
     6e8:	0011      	movs	r1, r2
     6ea:	0018      	movs	r0, r3
     6ec:	4bc6      	ldr	r3, [pc, #792]	; (a08 <initPins+0x3b0>)
     6ee:	4798      	blx	r3
setPinPort(&PA10,Port);
     6f0:	1dfb      	adds	r3, r7, #7
     6f2:	781a      	ldrb	r2, [r3, #0]
     6f4:	4bce      	ldr	r3, [pc, #824]	; (a30 <initPins+0x3d8>)
     6f6:	0011      	movs	r1, r2
     6f8:	0018      	movs	r0, r3
     6fa:	4bc3      	ldr	r3, [pc, #780]	; (a08 <initPins+0x3b0>)
     6fc:	4798      	blx	r3
setPinPort(&PA11,Port);
     6fe:	1dfb      	adds	r3, r7, #7
     700:	781a      	ldrb	r2, [r3, #0]
     702:	4bcc      	ldr	r3, [pc, #816]	; (a34 <initPins+0x3dc>)
     704:	0011      	movs	r1, r2
     706:	0018      	movs	r0, r3
     708:	4bbf      	ldr	r3, [pc, #764]	; (a08 <initPins+0x3b0>)
     70a:	4798      	blx	r3
setPinPort(&PA14,Port);
     70c:	1dfb      	adds	r3, r7, #7
     70e:	781a      	ldrb	r2, [r3, #0]
     710:	4bc9      	ldr	r3, [pc, #804]	; (a38 <initPins+0x3e0>)
     712:	0011      	movs	r1, r2
     714:	0018      	movs	r0, r3
     716:	4bbc      	ldr	r3, [pc, #752]	; (a08 <initPins+0x3b0>)
     718:	4798      	blx	r3
setPinPort(&PA15,Port);
     71a:	1dfb      	adds	r3, r7, #7
     71c:	781a      	ldrb	r2, [r3, #0]
     71e:	4bc7      	ldr	r3, [pc, #796]	; (a3c <initPins+0x3e4>)
     720:	0011      	movs	r1, r2
     722:	0018      	movs	r0, r3
     724:	4bb8      	ldr	r3, [pc, #736]	; (a08 <initPins+0x3b0>)
     726:	4798      	blx	r3
setPinPort(&PA16,Port);
     728:	1dfb      	adds	r3, r7, #7
     72a:	781a      	ldrb	r2, [r3, #0]
     72c:	4bc4      	ldr	r3, [pc, #784]	; (a40 <initPins+0x3e8>)
     72e:	0011      	movs	r1, r2
     730:	0018      	movs	r0, r3
     732:	4bb5      	ldr	r3, [pc, #724]	; (a08 <initPins+0x3b0>)
     734:	4798      	blx	r3
setPinPort(&PA17,Port);
     736:	1dfb      	adds	r3, r7, #7
     738:	781a      	ldrb	r2, [r3, #0]
     73a:	4bc2      	ldr	r3, [pc, #776]	; (a44 <initPins+0x3ec>)
     73c:	0011      	movs	r1, r2
     73e:	0018      	movs	r0, r3
     740:	4bb1      	ldr	r3, [pc, #708]	; (a08 <initPins+0x3b0>)
     742:	4798      	blx	r3
setPinPort(&PA18,Port);
     744:	1dfb      	adds	r3, r7, #7
     746:	781a      	ldrb	r2, [r3, #0]
     748:	4bbf      	ldr	r3, [pc, #764]	; (a48 <initPins+0x3f0>)
     74a:	0011      	movs	r1, r2
     74c:	0018      	movs	r0, r3
     74e:	4bae      	ldr	r3, [pc, #696]	; (a08 <initPins+0x3b0>)
     750:	4798      	blx	r3
setPinPort(&PA19,Port);
     752:	1dfb      	adds	r3, r7, #7
     754:	781a      	ldrb	r2, [r3, #0]
     756:	4bbd      	ldr	r3, [pc, #756]	; (a4c <initPins+0x3f4>)
     758:	0011      	movs	r1, r2
     75a:	0018      	movs	r0, r3
     75c:	4baa      	ldr	r3, [pc, #680]	; (a08 <initPins+0x3b0>)
     75e:	4798      	blx	r3
setPinPort(&PA22,Port);
     760:	1dfb      	adds	r3, r7, #7
     762:	781a      	ldrb	r2, [r3, #0]
     764:	4bba      	ldr	r3, [pc, #744]	; (a50 <initPins+0x3f8>)
     766:	0011      	movs	r1, r2
     768:	0018      	movs	r0, r3
     76a:	4ba7      	ldr	r3, [pc, #668]	; (a08 <initPins+0x3b0>)
     76c:	4798      	blx	r3
setPinPort(&PA23,Port);
     76e:	1dfb      	adds	r3, r7, #7
     770:	781a      	ldrb	r2, [r3, #0]
     772:	4bb8      	ldr	r3, [pc, #736]	; (a54 <initPins+0x3fc>)
     774:	0011      	movs	r1, r2
     776:	0018      	movs	r0, r3
     778:	4ba3      	ldr	r3, [pc, #652]	; (a08 <initPins+0x3b0>)
     77a:	4798      	blx	r3
setPinPort(&PA24,Port);
     77c:	1dfb      	adds	r3, r7, #7
     77e:	781a      	ldrb	r2, [r3, #0]
     780:	4bb5      	ldr	r3, [pc, #724]	; (a58 <initPins+0x400>)
     782:	0011      	movs	r1, r2
     784:	0018      	movs	r0, r3
     786:	4ba0      	ldr	r3, [pc, #640]	; (a08 <initPins+0x3b0>)
     788:	4798      	blx	r3
setPinPort(&PA25,Port);
     78a:	1dfb      	adds	r3, r7, #7
     78c:	781a      	ldrb	r2, [r3, #0]
     78e:	4bb3      	ldr	r3, [pc, #716]	; (a5c <initPins+0x404>)
     790:	0011      	movs	r1, r2
     792:	0018      	movs	r0, r3
     794:	4b9c      	ldr	r3, [pc, #624]	; (a08 <initPins+0x3b0>)
     796:	4798      	blx	r3
setPinPort(&PA27,Port);
     798:	1dfb      	adds	r3, r7, #7
     79a:	781a      	ldrb	r2, [r3, #0]
     79c:	4bb0      	ldr	r3, [pc, #704]	; (a60 <initPins+0x408>)
     79e:	0011      	movs	r1, r2
     7a0:	0018      	movs	r0, r3
     7a2:	4b99      	ldr	r3, [pc, #612]	; (a08 <initPins+0x3b0>)
     7a4:	4798      	blx	r3
setPinPort(&PA28,Port);
     7a6:	1dfb      	adds	r3, r7, #7
     7a8:	781a      	ldrb	r2, [r3, #0]
     7aa:	4bae      	ldr	r3, [pc, #696]	; (a64 <initPins+0x40c>)
     7ac:	0011      	movs	r1, r2
     7ae:	0018      	movs	r0, r3
     7b0:	4b95      	ldr	r3, [pc, #596]	; (a08 <initPins+0x3b0>)
     7b2:	4798      	blx	r3
setPinPort(&PA29,Port);
     7b4:	1dfb      	adds	r3, r7, #7
     7b6:	781a      	ldrb	r2, [r3, #0]
     7b8:	4bab      	ldr	r3, [pc, #684]	; (a68 <initPins+0x410>)
     7ba:	0011      	movs	r1, r2
     7bc:	0018      	movs	r0, r3
     7be:	4b92      	ldr	r3, [pc, #584]	; (a08 <initPins+0x3b0>)
     7c0:	4798      	blx	r3
setPinPort(&PA30,Port);
     7c2:	1dfb      	adds	r3, r7, #7
     7c4:	781a      	ldrb	r2, [r3, #0]
     7c6:	4ba9      	ldr	r3, [pc, #676]	; (a6c <initPins+0x414>)
     7c8:	0011      	movs	r1, r2
     7ca:	0018      	movs	r0, r3
     7cc:	4b8e      	ldr	r3, [pc, #568]	; (a08 <initPins+0x3b0>)
     7ce:	4798      	blx	r3
setPinPort(&PA31,Port);
     7d0:	1dfb      	adds	r3, r7, #7
     7d2:	781a      	ldrb	r2, [r3, #0]
     7d4:	4ba6      	ldr	r3, [pc, #664]	; (a70 <initPins+0x418>)
     7d6:	0011      	movs	r1, r2
     7d8:	0018      	movs	r0, r3
     7da:	4b8b      	ldr	r3, [pc, #556]	; (a08 <initPins+0x3b0>)
     7dc:	4798      	blx	r3
enum num Num = P00;
     7de:	1dbb      	adds	r3, r7, #6
     7e0:	2200      	movs	r2, #0
     7e2:	701a      	strb	r2, [r3, #0]
setPinNum(&PA00,Num);
     7e4:	1dbb      	adds	r3, r7, #6
     7e6:	781a      	ldrb	r2, [r3, #0]
     7e8:	4b86      	ldr	r3, [pc, #536]	; (a04 <initPins+0x3ac>)
     7ea:	0011      	movs	r1, r2
     7ec:	0018      	movs	r0, r3
     7ee:	4ba1      	ldr	r3, [pc, #644]	; (a74 <initPins+0x41c>)
     7f0:	4798      	blx	r3
Num=P01;
     7f2:	1dbb      	adds	r3, r7, #6
     7f4:	2201      	movs	r2, #1
     7f6:	701a      	strb	r2, [r3, #0]
setPinNum(&PA01,Num);
     7f8:	1dbb      	adds	r3, r7, #6
     7fa:	781a      	ldrb	r2, [r3, #0]
     7fc:	4b83      	ldr	r3, [pc, #524]	; (a0c <initPins+0x3b4>)
     7fe:	0011      	movs	r1, r2
     800:	0018      	movs	r0, r3
     802:	4b9c      	ldr	r3, [pc, #624]	; (a74 <initPins+0x41c>)
     804:	4798      	blx	r3
Num=P02;
     806:	1dbb      	adds	r3, r7, #6
     808:	2202      	movs	r2, #2
     80a:	701a      	strb	r2, [r3, #0]
setPinNum(&PA02,Num);
     80c:	1dbb      	adds	r3, r7, #6
     80e:	781a      	ldrb	r2, [r3, #0]
     810:	4b7f      	ldr	r3, [pc, #508]	; (a10 <initPins+0x3b8>)
     812:	0011      	movs	r1, r2
     814:	0018      	movs	r0, r3
     816:	4b97      	ldr	r3, [pc, #604]	; (a74 <initPins+0x41c>)
     818:	4798      	blx	r3
Num=P03;
     81a:	1dbb      	adds	r3, r7, #6
     81c:	2203      	movs	r2, #3
     81e:	701a      	strb	r2, [r3, #0]
setPinNum(&PA03,Num);
     820:	1dbb      	adds	r3, r7, #6
     822:	781a      	ldrb	r2, [r3, #0]
     824:	4b7b      	ldr	r3, [pc, #492]	; (a14 <initPins+0x3bc>)
     826:	0011      	movs	r1, r2
     828:	0018      	movs	r0, r3
     82a:	4b92      	ldr	r3, [pc, #584]	; (a74 <initPins+0x41c>)
     82c:	4798      	blx	r3
Num=P04;
     82e:	1dbb      	adds	r3, r7, #6
     830:	2204      	movs	r2, #4
     832:	701a      	strb	r2, [r3, #0]
setPinNum(&PA04,Num);
     834:	1dbb      	adds	r3, r7, #6
     836:	781a      	ldrb	r2, [r3, #0]
     838:	4b77      	ldr	r3, [pc, #476]	; (a18 <initPins+0x3c0>)
     83a:	0011      	movs	r1, r2
     83c:	0018      	movs	r0, r3
     83e:	4b8d      	ldr	r3, [pc, #564]	; (a74 <initPins+0x41c>)
     840:	4798      	blx	r3
Num=P05;
     842:	1dbb      	adds	r3, r7, #6
     844:	2205      	movs	r2, #5
     846:	701a      	strb	r2, [r3, #0]
setPinNum(&PA05,Num);
     848:	1dbb      	adds	r3, r7, #6
     84a:	781a      	ldrb	r2, [r3, #0]
     84c:	4b73      	ldr	r3, [pc, #460]	; (a1c <initPins+0x3c4>)
     84e:	0011      	movs	r1, r2
     850:	0018      	movs	r0, r3
     852:	4b88      	ldr	r3, [pc, #544]	; (a74 <initPins+0x41c>)
     854:	4798      	blx	r3
Num=P06;
     856:	1dbb      	adds	r3, r7, #6
     858:	2206      	movs	r2, #6
     85a:	701a      	strb	r2, [r3, #0]
setPinNum(&PA06,Num);
     85c:	1dbb      	adds	r3, r7, #6
     85e:	781a      	ldrb	r2, [r3, #0]
     860:	4b6f      	ldr	r3, [pc, #444]	; (a20 <initPins+0x3c8>)
     862:	0011      	movs	r1, r2
     864:	0018      	movs	r0, r3
     866:	4b83      	ldr	r3, [pc, #524]	; (a74 <initPins+0x41c>)
     868:	4798      	blx	r3
Num=P07;
     86a:	1dbb      	adds	r3, r7, #6
     86c:	2207      	movs	r2, #7
     86e:	701a      	strb	r2, [r3, #0]
setPinNum(&PA07,Num);
     870:	1dbb      	adds	r3, r7, #6
     872:	781a      	ldrb	r2, [r3, #0]
     874:	4b6b      	ldr	r3, [pc, #428]	; (a24 <initPins+0x3cc>)
     876:	0011      	movs	r1, r2
     878:	0018      	movs	r0, r3
     87a:	4b7e      	ldr	r3, [pc, #504]	; (a74 <initPins+0x41c>)
     87c:	4798      	blx	r3
Num=P08;
     87e:	1dbb      	adds	r3, r7, #6
     880:	2208      	movs	r2, #8
     882:	701a      	strb	r2, [r3, #0]
setPinNum(&PA08,Num);
     884:	1dbb      	adds	r3, r7, #6
     886:	781a      	ldrb	r2, [r3, #0]
     888:	4b67      	ldr	r3, [pc, #412]	; (a28 <initPins+0x3d0>)
     88a:	0011      	movs	r1, r2
     88c:	0018      	movs	r0, r3
     88e:	4b79      	ldr	r3, [pc, #484]	; (a74 <initPins+0x41c>)
     890:	4798      	blx	r3
Num=P09;
     892:	1dbb      	adds	r3, r7, #6
     894:	2209      	movs	r2, #9
     896:	701a      	strb	r2, [r3, #0]
setPinNum(&PA09,Num);
     898:	1dbb      	adds	r3, r7, #6
     89a:	781a      	ldrb	r2, [r3, #0]
     89c:	4b63      	ldr	r3, [pc, #396]	; (a2c <initPins+0x3d4>)
     89e:	0011      	movs	r1, r2
     8a0:	0018      	movs	r0, r3
     8a2:	4b74      	ldr	r3, [pc, #464]	; (a74 <initPins+0x41c>)
     8a4:	4798      	blx	r3
Num=P10;
     8a6:	1dbb      	adds	r3, r7, #6
     8a8:	220a      	movs	r2, #10
     8aa:	701a      	strb	r2, [r3, #0]
setPinNum(&PA10,Num);
     8ac:	1dbb      	adds	r3, r7, #6
     8ae:	781a      	ldrb	r2, [r3, #0]
     8b0:	4b5f      	ldr	r3, [pc, #380]	; (a30 <initPins+0x3d8>)
     8b2:	0011      	movs	r1, r2
     8b4:	0018      	movs	r0, r3
     8b6:	4b6f      	ldr	r3, [pc, #444]	; (a74 <initPins+0x41c>)
     8b8:	4798      	blx	r3
Num=P11;
     8ba:	1dbb      	adds	r3, r7, #6
     8bc:	220b      	movs	r2, #11
     8be:	701a      	strb	r2, [r3, #0]
setPinNum(&PA11,Num);
     8c0:	1dbb      	adds	r3, r7, #6
     8c2:	781a      	ldrb	r2, [r3, #0]
     8c4:	4b5b      	ldr	r3, [pc, #364]	; (a34 <initPins+0x3dc>)
     8c6:	0011      	movs	r1, r2
     8c8:	0018      	movs	r0, r3
     8ca:	4b6a      	ldr	r3, [pc, #424]	; (a74 <initPins+0x41c>)
     8cc:	4798      	blx	r3
Num=P14;
     8ce:	1dbb      	adds	r3, r7, #6
     8d0:	220e      	movs	r2, #14
     8d2:	701a      	strb	r2, [r3, #0]
setPinNum(&PA14,Num);
     8d4:	1dbb      	adds	r3, r7, #6
     8d6:	781a      	ldrb	r2, [r3, #0]
     8d8:	4b57      	ldr	r3, [pc, #348]	; (a38 <initPins+0x3e0>)
     8da:	0011      	movs	r1, r2
     8dc:	0018      	movs	r0, r3
     8de:	4b65      	ldr	r3, [pc, #404]	; (a74 <initPins+0x41c>)
     8e0:	4798      	blx	r3
Num=P15;
     8e2:	1dbb      	adds	r3, r7, #6
     8e4:	220f      	movs	r2, #15
     8e6:	701a      	strb	r2, [r3, #0]
setPinNum(&PA15,Num);
     8e8:	1dbb      	adds	r3, r7, #6
     8ea:	781a      	ldrb	r2, [r3, #0]
     8ec:	4b53      	ldr	r3, [pc, #332]	; (a3c <initPins+0x3e4>)
     8ee:	0011      	movs	r1, r2
     8f0:	0018      	movs	r0, r3
     8f2:	4b60      	ldr	r3, [pc, #384]	; (a74 <initPins+0x41c>)
     8f4:	4798      	blx	r3
Num=P16;
     8f6:	1dbb      	adds	r3, r7, #6
     8f8:	2210      	movs	r2, #16
     8fa:	701a      	strb	r2, [r3, #0]
setPinNum(&PA16,Num);
     8fc:	1dbb      	adds	r3, r7, #6
     8fe:	781a      	ldrb	r2, [r3, #0]
     900:	4b4f      	ldr	r3, [pc, #316]	; (a40 <initPins+0x3e8>)
     902:	0011      	movs	r1, r2
     904:	0018      	movs	r0, r3
     906:	4b5b      	ldr	r3, [pc, #364]	; (a74 <initPins+0x41c>)
     908:	4798      	blx	r3
Num=P17;
     90a:	1dbb      	adds	r3, r7, #6
     90c:	2211      	movs	r2, #17
     90e:	701a      	strb	r2, [r3, #0]
setPinNum(&PA17,Num);
     910:	1dbb      	adds	r3, r7, #6
     912:	781a      	ldrb	r2, [r3, #0]
     914:	4b4b      	ldr	r3, [pc, #300]	; (a44 <initPins+0x3ec>)
     916:	0011      	movs	r1, r2
     918:	0018      	movs	r0, r3
     91a:	4b56      	ldr	r3, [pc, #344]	; (a74 <initPins+0x41c>)
     91c:	4798      	blx	r3
Num=P18;
     91e:	1dbb      	adds	r3, r7, #6
     920:	2212      	movs	r2, #18
     922:	701a      	strb	r2, [r3, #0]
setPinNum(&PA18,Num);
     924:	1dbb      	adds	r3, r7, #6
     926:	781a      	ldrb	r2, [r3, #0]
     928:	4b47      	ldr	r3, [pc, #284]	; (a48 <initPins+0x3f0>)
     92a:	0011      	movs	r1, r2
     92c:	0018      	movs	r0, r3
     92e:	4b51      	ldr	r3, [pc, #324]	; (a74 <initPins+0x41c>)
     930:	4798      	blx	r3
Num=P19;
     932:	1dbb      	adds	r3, r7, #6
     934:	2213      	movs	r2, #19
     936:	701a      	strb	r2, [r3, #0]
setPinNum(&PA19,Num);
     938:	1dbb      	adds	r3, r7, #6
     93a:	781a      	ldrb	r2, [r3, #0]
     93c:	4b43      	ldr	r3, [pc, #268]	; (a4c <initPins+0x3f4>)
     93e:	0011      	movs	r1, r2
     940:	0018      	movs	r0, r3
     942:	4b4c      	ldr	r3, [pc, #304]	; (a74 <initPins+0x41c>)
     944:	4798      	blx	r3
Num=P22;
     946:	1dbb      	adds	r3, r7, #6
     948:	2216      	movs	r2, #22
     94a:	701a      	strb	r2, [r3, #0]
setPinNum(&PA22,Num);
     94c:	1dbb      	adds	r3, r7, #6
     94e:	781a      	ldrb	r2, [r3, #0]
     950:	4b3f      	ldr	r3, [pc, #252]	; (a50 <initPins+0x3f8>)
     952:	0011      	movs	r1, r2
     954:	0018      	movs	r0, r3
     956:	4b47      	ldr	r3, [pc, #284]	; (a74 <initPins+0x41c>)
     958:	4798      	blx	r3
Num=P23;
     95a:	1dbb      	adds	r3, r7, #6
     95c:	2217      	movs	r2, #23
     95e:	701a      	strb	r2, [r3, #0]
setPinNum(&PA23,Num);
     960:	1dbb      	adds	r3, r7, #6
     962:	781a      	ldrb	r2, [r3, #0]
     964:	4b3b      	ldr	r3, [pc, #236]	; (a54 <initPins+0x3fc>)
     966:	0011      	movs	r1, r2
     968:	0018      	movs	r0, r3
     96a:	4b42      	ldr	r3, [pc, #264]	; (a74 <initPins+0x41c>)
     96c:	4798      	blx	r3
Num=P24;
     96e:	1dbb      	adds	r3, r7, #6
     970:	2218      	movs	r2, #24
     972:	701a      	strb	r2, [r3, #0]
setPinNum(&PA24,Num);
     974:	1dbb      	adds	r3, r7, #6
     976:	781a      	ldrb	r2, [r3, #0]
     978:	4b37      	ldr	r3, [pc, #220]	; (a58 <initPins+0x400>)
     97a:	0011      	movs	r1, r2
     97c:	0018      	movs	r0, r3
     97e:	4b3d      	ldr	r3, [pc, #244]	; (a74 <initPins+0x41c>)
     980:	4798      	blx	r3
Num=P25;
     982:	1dbb      	adds	r3, r7, #6
     984:	2219      	movs	r2, #25
     986:	701a      	strb	r2, [r3, #0]
setPinNum(&PA25,Num);
     988:	1dbb      	adds	r3, r7, #6
     98a:	781a      	ldrb	r2, [r3, #0]
     98c:	4b33      	ldr	r3, [pc, #204]	; (a5c <initPins+0x404>)
     98e:	0011      	movs	r1, r2
     990:	0018      	movs	r0, r3
     992:	4b38      	ldr	r3, [pc, #224]	; (a74 <initPins+0x41c>)
     994:	4798      	blx	r3
Num=P27;
     996:	1dbb      	adds	r3, r7, #6
     998:	221b      	movs	r2, #27
     99a:	701a      	strb	r2, [r3, #0]
setPinNum(&PA27,Num);
     99c:	1dbb      	adds	r3, r7, #6
     99e:	781a      	ldrb	r2, [r3, #0]
     9a0:	4b2f      	ldr	r3, [pc, #188]	; (a60 <initPins+0x408>)
     9a2:	0011      	movs	r1, r2
     9a4:	0018      	movs	r0, r3
     9a6:	4b33      	ldr	r3, [pc, #204]	; (a74 <initPins+0x41c>)
     9a8:	4798      	blx	r3
Num=P28;
     9aa:	1dbb      	adds	r3, r7, #6
     9ac:	221c      	movs	r2, #28
     9ae:	701a      	strb	r2, [r3, #0]
setPinNum(&PA28,Num);
     9b0:	1dbb      	adds	r3, r7, #6
     9b2:	781a      	ldrb	r2, [r3, #0]
     9b4:	4b2b      	ldr	r3, [pc, #172]	; (a64 <initPins+0x40c>)
     9b6:	0011      	movs	r1, r2
     9b8:	0018      	movs	r0, r3
     9ba:	4b2e      	ldr	r3, [pc, #184]	; (a74 <initPins+0x41c>)
     9bc:	4798      	blx	r3
Num=P29;
     9be:	1dbb      	adds	r3, r7, #6
     9c0:	221d      	movs	r2, #29
     9c2:	701a      	strb	r2, [r3, #0]
setPinNum(&PA29,Num);
     9c4:	1dbb      	adds	r3, r7, #6
     9c6:	781a      	ldrb	r2, [r3, #0]
     9c8:	4b27      	ldr	r3, [pc, #156]	; (a68 <initPins+0x410>)
     9ca:	0011      	movs	r1, r2
     9cc:	0018      	movs	r0, r3
     9ce:	4b29      	ldr	r3, [pc, #164]	; (a74 <initPins+0x41c>)
     9d0:	4798      	blx	r3
Num=P30;
     9d2:	1dbb      	adds	r3, r7, #6
     9d4:	221e      	movs	r2, #30
     9d6:	701a      	strb	r2, [r3, #0]
setPinNum(&PA30,Num);
     9d8:	1dbb      	adds	r3, r7, #6
     9da:	781a      	ldrb	r2, [r3, #0]
     9dc:	4b23      	ldr	r3, [pc, #140]	; (a6c <initPins+0x414>)
     9de:	0011      	movs	r1, r2
     9e0:	0018      	movs	r0, r3
     9e2:	4b24      	ldr	r3, [pc, #144]	; (a74 <initPins+0x41c>)
     9e4:	4798      	blx	r3
Num=P31;
     9e6:	1dbb      	adds	r3, r7, #6
     9e8:	221f      	movs	r2, #31
     9ea:	701a      	strb	r2, [r3, #0]
setPinNum(&PA31,Num);
     9ec:	1dbb      	adds	r3, r7, #6
     9ee:	781a      	ldrb	r2, [r3, #0]
     9f0:	4b1f      	ldr	r3, [pc, #124]	; (a70 <initPins+0x418>)
     9f2:	0011      	movs	r1, r2
     9f4:	0018      	movs	r0, r3
     9f6:	4b1f      	ldr	r3, [pc, #124]	; (a74 <initPins+0x41c>)
     9f8:	4798      	blx	r3
}
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	46bd      	mov	sp, r7
     9fe:	b002      	add	sp, #8
     a00:	bd80      	pop	{r7, pc}
     a02:	46c0      	nop			; (mov r8, r8)
     a04:	20000544 	.word	0x20000544
     a08:	00000325 	.word	0x00000325
     a0c:	20000530 	.word	0x20000530
     a10:	200005d8 	.word	0x200005d8
     a14:	20000678 	.word	0x20000678
     a18:	200004f0 	.word	0x200004f0
     a1c:	200005ec 	.word	0x200005ec
     a20:	200006a0 	.word	0x200006a0
     a24:	20000628 	.word	0x20000628
     a28:	200006cc 	.word	0x200006cc
     a2c:	200006b8 	.word	0x200006b8
     a30:	20000558 	.word	0x20000558
     a34:	20000600 	.word	0x20000600
     a38:	20000580 	.word	0x20000580
     a3c:	2000063c 	.word	0x2000063c
     a40:	20000504 	.word	0x20000504
     a44:	200005a8 	.word	0x200005a8
     a48:	200004c8 	.word	0x200004c8
     a4c:	20000594 	.word	0x20000594
     a50:	2000056c 	.word	0x2000056c
     a54:	20000650 	.word	0x20000650
     a58:	200006e0 	.word	0x200006e0
     a5c:	200005c4 	.word	0x200005c4
     a60:	2000068c 	.word	0x2000068c
     a64:	2000051c 	.word	0x2000051c
     a68:	20000614 	.word	0x20000614
     a6c:	20000664 	.word	0x20000664
     a70:	200004dc 	.word	0x200004dc
     a74:	00000349 	.word	0x00000349

00000a78 <changeClock>:
 *  Author: hanle
 */ 
//This File Will include needed declarations and functions to use the RTC to make a delay us function
#ifndef TIMING_H_
#define TIMING_H_
void changeClock(){
     a78:	b580      	push	{r7, lr}
     a7a:	b082      	sub	sp, #8
     a7c:	af00      	add	r7, sp, #0
	/* Set the correct number of wait states for 48 MHz @ 3.3v */
	NVMCTRL->CTRLB.bit.RWS = 1;
     a7e:	4a28      	ldr	r2, [pc, #160]	; (b20 <changeClock+0xa8>)
     a80:	6853      	ldr	r3, [r2, #4]
     a82:	211e      	movs	r1, #30
     a84:	438b      	bics	r3, r1
     a86:	2102      	movs	r1, #2
     a88:	430b      	orrs	r3, r1
     a8a:	6053      	str	r3, [r2, #4]
	/* This works around a quirk in the hardware (errata 1.2.1) -
	   the DFLLCTRL register must be manually reset to this value before
	   configuration. */
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
     a8c:	46c0      	nop			; (mov r8, r8)
     a8e:	4b25      	ldr	r3, [pc, #148]	; (b24 <changeClock+0xac>)
     a90:	68db      	ldr	r3, [r3, #12]
     a92:	06db      	lsls	r3, r3, #27
     a94:	0fdb      	lsrs	r3, r3, #31
     a96:	b2db      	uxtb	r3, r3
     a98:	2b00      	cmp	r3, #0
     a9a:	d0f8      	beq.n	a8e <changeClock+0x16>
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     a9c:	4b21      	ldr	r3, [pc, #132]	; (b24 <changeClock+0xac>)
     a9e:	2202      	movs	r2, #2
     aa0:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	4b1f      	ldr	r3, [pc, #124]	; (b24 <changeClock+0xac>)
     aa6:	68db      	ldr	r3, [r3, #12]
     aa8:	06db      	lsls	r3, r3, #27
     aaa:	0fdb      	lsrs	r3, r3, #31
     aac:	b2db      	uxtb	r3, r3
     aae:	2b00      	cmp	r3, #0
     ab0:	d0f8      	beq.n	aa4 <changeClock+0x2c>

	/* Write the coarse and fine calibration from NVM. */
	uint32_t coarse =
		((*(uint32_t*)FUSES_DFLL48M_COARSE_CAL_ADDR) & FUSES_DFLL48M_COARSE_CAL_Msk) >> FUSES_DFLL48M_COARSE_CAL_Pos;
     ab2:	4b1d      	ldr	r3, [pc, #116]	; (b28 <changeClock+0xb0>)
     ab4:	681b      	ldr	r3, [r3, #0]
	uint32_t coarse =
     ab6:	0e9b      	lsrs	r3, r3, #26
     ab8:	607b      	str	r3, [r7, #4]
	uint32_t fine =
		((*(uint32_t*)FUSES_DFLL48M_FINE_CAL_ADDR) & FUSES_DFLL48M_FINE_CAL_Msk) >> FUSES_DFLL48M_FINE_CAL_Pos;
     aba:	4b1c      	ldr	r3, [pc, #112]	; (b2c <changeClock+0xb4>)
     abc:	681b      	ldr	r3, [r3, #0]
	uint32_t fine =
     abe:	059b      	lsls	r3, r3, #22
     ac0:	0d9b      	lsrs	r3, r3, #22
     ac2:	603b      	str	r3, [r7, #0]

	SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     ac4:	4b17      	ldr	r3, [pc, #92]	; (b24 <changeClock+0xac>)
     ac6:	687a      	ldr	r2, [r7, #4]
     ac8:	0292      	lsls	r2, r2, #10
     aca:	0412      	lsls	r2, r2, #16
     acc:	0c11      	lsrs	r1, r2, #16
     ace:	683a      	ldr	r2, [r7, #0]
     ad0:	0592      	lsls	r2, r2, #22
     ad2:	0d92      	lsrs	r2, r2, #22
     ad4:	430a      	orrs	r2, r1
     ad6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Wait for the write to finish. */
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {};
     ad8:	46c0      	nop			; (mov r8, r8)
     ada:	4b12      	ldr	r3, [pc, #72]	; (b24 <changeClock+0xac>)
     adc:	68db      	ldr	r3, [r3, #12]
     ade:	06db      	lsls	r3, r3, #27
     ae0:	0fdb      	lsrs	r3, r3, #31
     ae2:	b2db      	uxtb	r3, r3
     ae4:	2b00      	cmp	r3, #0
     ae6:	d0f8      	beq.n	ada <changeClock+0x62>
	/* Enable the DFLL */
	SYSCTRL->DFLLCTRL.bit.ENABLE = 1;
     ae8:	4a0e      	ldr	r2, [pc, #56]	; (b24 <changeClock+0xac>)
     aea:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     aec:	2102      	movs	r1, #2
     aee:	430b      	orrs	r3, r1
     af0:	8493      	strh	r3, [r2, #36]	; 0x24

	/* Wait for the write to finish */
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {};
     af2:	46c0      	nop			; (mov r8, r8)
     af4:	4b0b      	ldr	r3, [pc, #44]	; (b24 <changeClock+0xac>)
     af6:	68db      	ldr	r3, [r3, #12]
     af8:	06db      	lsls	r3, r3, #27
     afa:	0fdb      	lsrs	r3, r3, #31
     afc:	b2db      	uxtb	r3, r3
     afe:	2b00      	cmp	r3, #0
     b00:	d0f8      	beq.n	af4 <changeClock+0x7c>
		
	/* Setup GCLK0 using the DFLL @ 48 MHz */
	GCLK->GENCTRL.reg =
     b02:	4b0b      	ldr	r3, [pc, #44]	; (b30 <changeClock+0xb8>)
     b04:	4a0b      	ldr	r2, [pc, #44]	; (b34 <changeClock+0xbc>)
     b06:	605a      	str	r2, [r3, #4]
		/* Improve the duty cycle. */
		GCLK_GENCTRL_IDC |
		GCLK_GENCTRL_GENEN;

	/* Wait for the write to complete */
	while(GCLK->STATUS.bit.SYNCBUSY);
     b08:	46c0      	nop			; (mov r8, r8)
     b0a:	4b09      	ldr	r3, [pc, #36]	; (b30 <changeClock+0xb8>)
     b0c:	785b      	ldrb	r3, [r3, #1]
     b0e:	061b      	lsls	r3, r3, #24
     b10:	0fdb      	lsrs	r3, r3, #31
     b12:	b2db      	uxtb	r3, r3
     b14:	2b00      	cmp	r3, #0
     b16:	d1f8      	bne.n	b0a <changeClock+0x92>
}
     b18:	46c0      	nop			; (mov r8, r8)
     b1a:	46bd      	mov	sp, r7
     b1c:	b002      	add	sp, #8
     b1e:	bd80      	pop	{r7, pc}
     b20:	41004000 	.word	0x41004000
     b24:	40000800 	.word	0x40000800
     b28:	00806024 	.word	0x00806024
     b2c:	00806028 	.word	0x00806028
     b30:	40000c00 	.word	0x40000c00
     b34:	00030700 	.word	0x00030700

00000b38 <initRTC>:
void initRTC(){
     b38:	b580      	push	{r7, lr}
     b3a:	af00      	add	r7, sp, #0
	//A generic clock (GCLK_RTC) is required to clock the RTC. This clock must be configured and enabled in the Generic Clock Controller before using the RTC(Gen Clock ID 4, and )
	
	GCLK->GENDIV.reg  = GCLK_GENDIV_ID(0)|GCLK_GENDIV_DIV(6);
     b3c:	4b0f      	ldr	r3, [pc, #60]	; (b7c <initRTC+0x44>)
     b3e:	22c0      	movs	r2, #192	; 0xc0
     b40:	00d2      	lsls	r2, r2, #3
     b42:	609a      	str	r2, [r3, #8]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_RTC | GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
     b44:	4b0d      	ldr	r3, [pc, #52]	; (b7c <initRTC+0x44>)
     b46:	4a0e      	ldr	r2, [pc, #56]	; (b80 <initRTC+0x48>)
     b48:	805a      	strh	r2, [r3, #2]
	
	/*GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(4)|  GCLK_GENCTRL_GENEN;
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_RTC |GCLK_CLKCTRL_GEN_GCLK4|GCLK_CLKCTRL_CLKEN; */
	PM->APBAMASK.reg |= PM_APBAMASK_RTC;
     b4a:	4b0e      	ldr	r3, [pc, #56]	; (b84 <initRTC+0x4c>)
     b4c:	4a0d      	ldr	r2, [pc, #52]	; (b84 <initRTC+0x4c>)
     b4e:	6992      	ldr	r2, [r2, #24]
     b50:	2120      	movs	r1, #32
     b52:	430a      	orrs	r2, r1
     b54:	619a      	str	r2, [r3, #24]
	//Setting Settings for RTC*/

	RTC->MODE0.CTRL.reg = 0x0;
     b56:	4b0c      	ldr	r3, [pc, #48]	; (b88 <initRTC+0x50>)
     b58:	2200      	movs	r2, #0
     b5a:	801a      	strh	r2, [r3, #0]
	//RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
	RTC->MODE0.INTENSET.reg |= RTC_MODE0_INTENSET_CMP(48);
     b5c:	4b0a      	ldr	r3, [pc, #40]	; (b88 <initRTC+0x50>)
     b5e:	4a0a      	ldr	r2, [pc, #40]	; (b88 <initRTC+0x50>)
     b60:	79d2      	ldrb	r2, [r2, #7]
     b62:	b2d2      	uxtb	r2, r2
     b64:	71da      	strb	r2, [r3, #7]
	//RTC->MODE0.EVCTRL.reg |= RTC_MODE0_EVCTRL_CMPEO(48);
	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     b66:	4a08      	ldr	r2, [pc, #32]	; (b88 <initRTC+0x50>)
     b68:	4b07      	ldr	r3, [pc, #28]	; (b88 <initRTC+0x50>)
     b6a:	881b      	ldrh	r3, [r3, #0]
     b6c:	b29b      	uxth	r3, r3
     b6e:	2102      	movs	r1, #2
     b70:	430b      	orrs	r3, r1
     b72:	b29b      	uxth	r3, r3
     b74:	8013      	strh	r3, [r2, #0]
	
}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	46bd      	mov	sp, r7
     b7a:	bd80      	pop	{r7, pc}
     b7c:	40000c00 	.word	0x40000c00
     b80:	00004004 	.word	0x00004004
     b84:	40000400 	.word	0x40000400
     b88:	40001400 	.word	0x40001400

00000b8c <delay_us>:
void delay_us(int num){
     b8c:	b580      	push	{r7, lr}
     b8e:	b084      	sub	sp, #16
     b90:	af00      	add	r7, sp, #0
     b92:	6078      	str	r0, [r7, #4]
	for(int i = num; i>0; i--){
     b94:	687b      	ldr	r3, [r7, #4]
     b96:	60fb      	str	r3, [r7, #12]
     b98:	e00b      	b.n	bb2 <delay_us+0x26>
		RTC->MODE0.COMP->reg=0;
     b9a:	4b09      	ldr	r3, [pc, #36]	; (bc0 <delay_us+0x34>)
     b9c:	2200      	movs	r2, #0
     b9e:	601a      	str	r2, [r3, #0]
		RTC->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP(48);
     ba0:	4b08      	ldr	r3, [pc, #32]	; (bc4 <delay_us+0x38>)
     ba2:	2200      	movs	r2, #0
     ba4:	721a      	strb	r2, [r3, #8]
		while(!RTC->MODE0.INTFLAG.reg && RTC_MODE0_INTFLAG_CMP(48));
     ba6:	46c0      	nop			; (mov r8, r8)
     ba8:	4b06      	ldr	r3, [pc, #24]	; (bc4 <delay_us+0x38>)
     baa:	7a1b      	ldrb	r3, [r3, #8]
	for(int i = num; i>0; i--){
     bac:	68fb      	ldr	r3, [r7, #12]
     bae:	3b01      	subs	r3, #1
     bb0:	60fb      	str	r3, [r7, #12]
     bb2:	68fb      	ldr	r3, [r7, #12]
     bb4:	2b00      	cmp	r3, #0
     bb6:	dcf0      	bgt.n	b9a <delay_us+0xe>
	}
	
}
     bb8:	46c0      	nop			; (mov r8, r8)
     bba:	46bd      	mov	sp, r7
     bbc:	b004      	add	sp, #16
     bbe:	bd80      	pop	{r7, pc}
     bc0:	40001418 	.word	0x40001418
     bc4:	40001400 	.word	0x40001400

00000bc8 <standalone_mode>:
bool toggle=true;
bool isStepping;
bool isStalled=false;
bool direction;

void standalone_mode(){
     bc8:	b5b0      	push	{r4, r5, r7, lr}
     bca:	af00      	add	r7, sp, #0
	setPin(CFG0,OUTPUT,NORMAL,PULL_DOWN);
     bcc:	4839      	ldr	r0, [pc, #228]	; (cb4 <standalone_mode+0xec>)
     bce:	2302      	movs	r3, #2
     bd0:	2200      	movs	r2, #0
     bd2:	2109      	movs	r1, #9
     bd4:	4c38      	ldr	r4, [pc, #224]	; (cb8 <standalone_mode+0xf0>)
     bd6:	47a0      	blx	r4
	setPin(CFG1,OUTPUT,NORMAL,PULL_DOWN);
     bd8:	4838      	ldr	r0, [pc, #224]	; (cbc <standalone_mode+0xf4>)
     bda:	2302      	movs	r3, #2
     bdc:	2200      	movs	r2, #0
     bde:	2109      	movs	r1, #9
     be0:	4c35      	ldr	r4, [pc, #212]	; (cb8 <standalone_mode+0xf0>)
     be2:	47a0      	blx	r4
	setPin(CFG2,OUTPUT,NORMAL,PULL_DOWN);
     be4:	4836      	ldr	r0, [pc, #216]	; (cc0 <standalone_mode+0xf8>)
     be6:	2302      	movs	r3, #2
     be8:	2200      	movs	r2, #0
     bea:	2109      	movs	r1, #9
     bec:	4c32      	ldr	r4, [pc, #200]	; (cb8 <standalone_mode+0xf0>)
     bee:	47a0      	blx	r4
	setPin(CFG3,OUTPUT,NORMAL,PULL_DOWN);
     bf0:	4834      	ldr	r0, [pc, #208]	; (cc4 <standalone_mode+0xfc>)
     bf2:	2302      	movs	r3, #2
     bf4:	2200      	movs	r2, #0
     bf6:	2109      	movs	r1, #9
     bf8:	4c2f      	ldr	r4, [pc, #188]	; (cb8 <standalone_mode+0xf0>)
     bfa:	47a0      	blx	r4
	setPin(CFG4,OUTPUT,NORMAL,PULL_DOWN);
     bfc:	4832      	ldr	r0, [pc, #200]	; (cc8 <standalone_mode+0x100>)
     bfe:	2302      	movs	r3, #2
     c00:	2200      	movs	r2, #0
     c02:	2109      	movs	r1, #9
     c04:	4c2c      	ldr	r4, [pc, #176]	; (cb8 <standalone_mode+0xf0>)
     c06:	47a0      	blx	r4
	setPin(CFG5,OUTPUT,NORMAL,PULL_DOWN);
     c08:	4830      	ldr	r0, [pc, #192]	; (ccc <standalone_mode+0x104>)
     c0a:	2302      	movs	r3, #2
     c0c:	2200      	movs	r2, #0
     c0e:	2109      	movs	r1, #9
     c10:	4c29      	ldr	r4, [pc, #164]	; (cb8 <standalone_mode+0xf0>)
     c12:	47a0      	blx	r4
	setPin(CFG6,OUTPUT,NORMAL,PULL_DOWN);
     c14:	482e      	ldr	r0, [pc, #184]	; (cd0 <standalone_mode+0x108>)
     c16:	2302      	movs	r3, #2
     c18:	2200      	movs	r2, #0
     c1a:	2109      	movs	r1, #9
     c1c:	4c26      	ldr	r4, [pc, #152]	; (cb8 <standalone_mode+0xf0>)
     c1e:	47a0      	blx	r4
	setPin(STEP,OUTPUT,NORMAL,PULL_DOWN);
     c20:	482c      	ldr	r0, [pc, #176]	; (cd4 <standalone_mode+0x10c>)
     c22:	2302      	movs	r3, #2
     c24:	2200      	movs	r2, #0
     c26:	2109      	movs	r1, #9
     c28:	4c23      	ldr	r4, [pc, #140]	; (cb8 <standalone_mode+0xf0>)
     c2a:	47a0      	blx	r4
	setPin(DIRPIN,OUTPUT,NORMAL,PULL_DOWN);
     c2c:	482a      	ldr	r0, [pc, #168]	; (cd8 <standalone_mode+0x110>)
     c2e:	2302      	movs	r3, #2
     c30:	2200      	movs	r2, #0
     c32:	2109      	movs	r1, #9
     c34:	4c20      	ldr	r4, [pc, #128]	; (cb8 <standalone_mode+0xf0>)
     c36:	47a0      	blx	r4
	setPin(SPI_MODE,OUTPUT,NORMAL,PULL_DOWN);
     c38:	4828      	ldr	r0, [pc, #160]	; (cdc <standalone_mode+0x114>)
     c3a:	2302      	movs	r3, #2
     c3c:	2200      	movs	r2, #0
     c3e:	2109      	movs	r1, #9
     c40:	4c1d      	ldr	r4, [pc, #116]	; (cb8 <standalone_mode+0xf0>)
     c42:	47a0      	blx	r4
	//setPin(IFA,INPUT,NORMAL,PULL_DOWN);
	//setPin(IFB,INPUT,NORMAL,PULL_DOWN);
	writePin(SPI_MODE,false);
     c44:	4b25      	ldr	r3, [pc, #148]	; (cdc <standalone_mode+0x114>)
     c46:	2100      	movs	r1, #0
     c48:	0018      	movs	r0, r3
     c4a:	4b25      	ldr	r3, [pc, #148]	; (ce0 <standalone_mode+0x118>)
     c4c:	4798      	blx	r3
	writePin(CFG0,false);//MISO =PA08
     c4e:	4b19      	ldr	r3, [pc, #100]	; (cb4 <standalone_mode+0xec>)
     c50:	2100      	movs	r1, #0
     c52:	0018      	movs	r0, r3
     c54:	4b22      	ldr	r3, [pc, #136]	; (ce0 <standalone_mode+0x118>)
     c56:	4798      	blx	r3
	writePin(CFG1,true);//MOSI = PA11
     c58:	4b18      	ldr	r3, [pc, #96]	; (cbc <standalone_mode+0xf4>)
     c5a:	2101      	movs	r1, #1
     c5c:	0018      	movs	r0, r3
     c5e:	4b20      	ldr	r3, [pc, #128]	; (ce0 <standalone_mode+0x118>)
     c60:	4798      	blx	r3
	writePin(CFG2,true);//SCK = PA09
     c62:	4b17      	ldr	r3, [pc, #92]	; (cc0 <standalone_mode+0xf8>)
     c64:	2101      	movs	r1, #1
     c66:	0018      	movs	r0, r3
     c68:	4b1d      	ldr	r3, [pc, #116]	; (ce0 <standalone_mode+0x118>)
     c6a:	4798      	blx	r3
	writePin(CFG3,true);//SS= PA10
     c6c:	4b15      	ldr	r3, [pc, #84]	; (cc4 <standalone_mode+0xfc>)
     c6e:	2101      	movs	r1, #1
     c70:	0018      	movs	r0, r3
     c72:	4b1b      	ldr	r3, [pc, #108]	; (ce0 <standalone_mode+0x118>)
     c74:	4798      	blx	r3
	writePin(CFG4,false);
     c76:	4b14      	ldr	r3, [pc, #80]	; (cc8 <standalone_mode+0x100>)
     c78:	2100      	movs	r1, #0
     c7a:	0018      	movs	r0, r3
     c7c:	4b18      	ldr	r3, [pc, #96]	; (ce0 <standalone_mode+0x118>)
     c7e:	4798      	blx	r3
	writePin(CFG5,true);
     c80:	4b12      	ldr	r3, [pc, #72]	; (ccc <standalone_mode+0x104>)
     c82:	2101      	movs	r1, #1
     c84:	0018      	movs	r0, r3
     c86:	4b16      	ldr	r3, [pc, #88]	; (ce0 <standalone_mode+0x118>)
     c88:	4798      	blx	r3
	writePin(CFG6,false);
     c8a:	4b11      	ldr	r3, [pc, #68]	; (cd0 <standalone_mode+0x108>)
     c8c:	2100      	movs	r1, #0
     c8e:	0018      	movs	r0, r3
     c90:	4b13      	ldr	r3, [pc, #76]	; (ce0 <standalone_mode+0x118>)
     c92:	4798      	blx	r3
	writePin(DIRPIN,direction);
     c94:	4b13      	ldr	r3, [pc, #76]	; (ce4 <standalone_mode+0x11c>)
     c96:	781a      	ldrb	r2, [r3, #0]
     c98:	4b0f      	ldr	r3, [pc, #60]	; (cd8 <standalone_mode+0x110>)
     c9a:	0011      	movs	r1, r2
     c9c:	0018      	movs	r0, r3
     c9e:	4b10      	ldr	r3, [pc, #64]	; (ce0 <standalone_mode+0x118>)
     ca0:	4798      	blx	r3
	writePin(STEP,false);
     ca2:	4b0c      	ldr	r3, [pc, #48]	; (cd4 <standalone_mode+0x10c>)
     ca4:	2100      	movs	r1, #0
     ca6:	0018      	movs	r0, r3
     ca8:	4b0d      	ldr	r3, [pc, #52]	; (ce0 <standalone_mode+0x118>)
     caa:	4798      	blx	r3
	return;
     cac:	46c0      	nop			; (mov r8, r8)
}
     cae:	46bd      	mov	sp, r7
     cb0:	bdb0      	pop	{r4, r5, r7, pc}
     cb2:	46c0      	nop			; (mov r8, r8)
     cb4:	200006cc 	.word	0x200006cc
     cb8:	000005a9 	.word	0x000005a9
     cbc:	20000600 	.word	0x20000600
     cc0:	200006b8 	.word	0x200006b8
     cc4:	20000558 	.word	0x20000558
     cc8:	200004c8 	.word	0x200004c8
     ccc:	20000594 	.word	0x20000594
     cd0:	20000504 	.word	0x20000504
     cd4:	20000580 	.word	0x20000580
     cd8:	2000063c 	.word	0x2000063c
     cdc:	200005a8 	.word	0x200005a8
     ce0:	00000601 	.word	0x00000601
     ce4:	200005bc 	.word	0x200005bc

00000ce8 <EIC_Handler>:
#define STEP_BUFFER_SIZE 5

//volatile int8_t directionFilter[STEP_BUFFER_SIZE] = {0};
//volatile int8_t currentDirectionIndex = 0;

void EIC_Handler(void){
     ce8:	b580      	push	{r7, lr}
     cea:	b082      	sub	sp, #8
     cec:	af00      	add	r7, sp, #0
		if((EIC->INTFLAG.reg & EIC_INTFLAG_EXTINT5)||(EIC->INTFLAG.reg & EIC_INTFLAG_EXTINT4)){
     cee:	4b25      	ldr	r3, [pc, #148]	; (d84 <EIC_Handler+0x9c>)
     cf0:	691b      	ldr	r3, [r3, #16]
     cf2:	2220      	movs	r2, #32
     cf4:	4013      	ands	r3, r2
     cf6:	d104      	bne.n	d02 <EIC_Handler+0x1a>
     cf8:	4b22      	ldr	r3, [pc, #136]	; (d84 <EIC_Handler+0x9c>)
     cfa:	691b      	ldr	r3, [r3, #16]
     cfc:	2210      	movs	r2, #16
     cfe:	4013      	ands	r3, r2
     d00:	d03b      	beq.n	d7a <EIC_Handler+0x92>
		uint32_t in = PORT->Group[0].IN.reg;
     d02:	4b21      	ldr	r3, [pc, #132]	; (d88 <EIC_Handler+0xa0>)
     d04:	6a1b      	ldr	r3, [r3, #32]
     d06:	607b      	str	r3, [r7, #4]
		uint8_t bit1 = (bool)(in & PA04.bitmask); 
     d08:	4b20      	ldr	r3, [pc, #128]	; (d8c <EIC_Handler+0xa4>)
     d0a:	681b      	ldr	r3, [r3, #0]
     d0c:	687a      	ldr	r2, [r7, #4]
     d0e:	4013      	ands	r3, r2
     d10:	1e5a      	subs	r2, r3, #1
     d12:	4193      	sbcs	r3, r2
     d14:	b2da      	uxtb	r2, r3
     d16:	1cfb      	adds	r3, r7, #3
     d18:	701a      	strb	r2, [r3, #0]
		uint8_t bit2 = (bool)(in & PA05.bitmask);
     d1a:	4b1d      	ldr	r3, [pc, #116]	; (d90 <EIC_Handler+0xa8>)
     d1c:	681b      	ldr	r3, [r3, #0]
     d1e:	687a      	ldr	r2, [r7, #4]
     d20:	4013      	ands	r3, r2
     d22:	1e5a      	subs	r2, r3, #1
     d24:	4193      	sbcs	r3, r2
     d26:	b2da      	uxtb	r2, r3
     d28:	1cbb      	adds	r3, r7, #2
     d2a:	701a      	strb	r2, [r3, #0]
		previous=current;
     d2c:	4b19      	ldr	r3, [pc, #100]	; (d94 <EIC_Handler+0xac>)
     d2e:	781a      	ldrb	r2, [r3, #0]
     d30:	4b19      	ldr	r3, [pc, #100]	; (d98 <EIC_Handler+0xb0>)
     d32:	701a      	strb	r2, [r3, #0]
		current=2*bit1+bit2;
     d34:	1cfb      	adds	r3, r7, #3
     d36:	781b      	ldrb	r3, [r3, #0]
     d38:	18db      	adds	r3, r3, r3
     d3a:	b2da      	uxtb	r2, r3
     d3c:	1cbb      	adds	r3, r7, #2
     d3e:	781b      	ldrb	r3, [r3, #0]
     d40:	18d3      	adds	r3, r2, r3
     d42:	b2da      	uxtb	r2, r3
     d44:	4b13      	ldr	r3, [pc, #76]	; (d94 <EIC_Handler+0xac>)
     d46:	701a      	strb	r2, [r3, #0]
		int8_t currentDirection = QEM[previous*4+current];
     d48:	4b13      	ldr	r3, [pc, #76]	; (d98 <EIC_Handler+0xb0>)
     d4a:	781b      	ldrb	r3, [r3, #0]
     d4c:	009b      	lsls	r3, r3, #2
     d4e:	4a11      	ldr	r2, [pc, #68]	; (d94 <EIC_Handler+0xac>)
     d50:	7812      	ldrb	r2, [r2, #0]
     d52:	189a      	adds	r2, r3, r2
     d54:	4b11      	ldr	r3, [pc, #68]	; (d9c <EIC_Handler+0xb4>)
     d56:	0092      	lsls	r2, r2, #2
     d58:	58d2      	ldr	r2, [r2, r3]
     d5a:	1c7b      	adds	r3, r7, #1
     d5c:	701a      	strb	r2, [r3, #0]
		if(currentDirection == -1 && !direction && !isStalled){
			isStalled=true;
			direction=!direction;
			//isStepping=false;
		}*/
		count += currentDirection;
     d5e:	1c7b      	adds	r3, r7, #1
     d60:	2200      	movs	r2, #0
     d62:	569a      	ldrsb	r2, [r3, r2]
     d64:	4b0e      	ldr	r3, [pc, #56]	; (da0 <EIC_Handler+0xb8>)
     d66:	681b      	ldr	r3, [r3, #0]
     d68:	18d2      	adds	r2, r2, r3
     d6a:	4b0d      	ldr	r3, [pc, #52]	; (da0 <EIC_Handler+0xb8>)
     d6c:	601a      	str	r2, [r3, #0]
		EIC->INTFLAG.reg |= EIC_INTFLAG_EXTINT4| EIC_INTFLAG_EXTINT5;
     d6e:	4b05      	ldr	r3, [pc, #20]	; (d84 <EIC_Handler+0x9c>)
     d70:	4a04      	ldr	r2, [pc, #16]	; (d84 <EIC_Handler+0x9c>)
     d72:	6912      	ldr	r2, [r2, #16]
     d74:	2130      	movs	r1, #48	; 0x30
     d76:	430a      	orrs	r2, r1
     d78:	611a      	str	r2, [r3, #16]
	}
}
     d7a:	46c0      	nop			; (mov r8, r8)
     d7c:	46bd      	mov	sp, r7
     d7e:	b002      	add	sp, #8
     d80:	bd80      	pop	{r7, pc}
     d82:	46c0      	nop			; (mov r8, r8)
     d84:	40001800 	.word	0x40001800
     d88:	41004400 	.word	0x41004400
     d8c:	200004f0 	.word	0x200004f0
     d90:	200005ec 	.word	0x200005ec
     d94:	200004bd 	.word	0x200004bd
     d98:	200004be 	.word	0x200004be
     d9c:	20000000 	.word	0x20000000
     da0:	200004c0 	.word	0x200004c0

00000da4 <EIC_setup>:
void EIC_setup(void){
     da4:	b580      	push	{r7, lr}
     da6:	af00      	add	r7, sp, #0
	PM->APBAMASK.reg |= PM_APBAMASK_EIC;
     da8:	4b1f      	ldr	r3, [pc, #124]	; (e28 <EIC_setup+0x84>)
     daa:	4a1f      	ldr	r2, [pc, #124]	; (e28 <EIC_setup+0x84>)
     dac:	6992      	ldr	r2, [r2, #24]
     dae:	2140      	movs	r1, #64	; 0x40
     db0:	430a      	orrs	r2, r1
     db2:	619a      	str	r2, [r3, #24]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_EIC | GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
     db4:	4b1d      	ldr	r3, [pc, #116]	; (e2c <EIC_setup+0x88>)
     db6:	4a1e      	ldr	r2, [pc, #120]	; (e30 <EIC_setup+0x8c>)
     db8:	805a      	strh	r2, [r3, #2]
	PORT->Group[0].WRCONFIG.reg =  PORT_WRCONFIG_WRPINCFG|PORT_WRCONFIG_WRPMUX|PORT_WRCONFIG_INEN|PORT_WRCONFIG_PMUXEN|PORT_WRCONFIG_PMUX(MUX_PA05A_EIC_EXTINT5)|PORT_WRCONFIG_PINMASK((uint16_t)PA05.bitmask);
     dba:	4a1e      	ldr	r2, [pc, #120]	; (e34 <EIC_setup+0x90>)
     dbc:	4b1e      	ldr	r3, [pc, #120]	; (e38 <EIC_setup+0x94>)
     dbe:	681b      	ldr	r3, [r3, #0]
     dc0:	b29b      	uxth	r3, r3
     dc2:	0019      	movs	r1, r3
     dc4:	4b1d      	ldr	r3, [pc, #116]	; (e3c <EIC_setup+0x98>)
     dc6:	430b      	orrs	r3, r1
     dc8:	6293      	str	r3, [r2, #40]	; 0x28
	PORT->Group[0].WRCONFIG.reg =  PORT_WRCONFIG_WRPINCFG|PORT_WRCONFIG_WRPMUX|PORT_WRCONFIG_INEN|PORT_WRCONFIG_PMUXEN|PORT_WRCONFIG_PMUX(MUX_PA04A_EIC_EXTINT4)|PORT_WRCONFIG_PINMASK((uint16_t)PA04.bitmask);
     dca:	4a1a      	ldr	r2, [pc, #104]	; (e34 <EIC_setup+0x90>)
     dcc:	4b1c      	ldr	r3, [pc, #112]	; (e40 <EIC_setup+0x9c>)
     dce:	681b      	ldr	r3, [r3, #0]
     dd0:	b29b      	uxth	r3, r3
     dd2:	0019      	movs	r1, r3
     dd4:	4b19      	ldr	r3, [pc, #100]	; (e3c <EIC_setup+0x98>)
     dd6:	430b      	orrs	r3, r1
     dd8:	6293      	str	r3, [r2, #40]	; 0x28
	EIC->EVCTRL.reg |=EIC_EVCTRL_EXTINTEO5|EIC_EVCTRL_EXTINTEO4;
     dda:	4b1a      	ldr	r3, [pc, #104]	; (e44 <EIC_setup+0xa0>)
     ddc:	4a19      	ldr	r2, [pc, #100]	; (e44 <EIC_setup+0xa0>)
     dde:	6852      	ldr	r2, [r2, #4]
     de0:	2130      	movs	r1, #48	; 0x30
     de2:	430a      	orrs	r2, r1
     de4:	605a      	str	r2, [r3, #4]
	EIC->CONFIG[0].reg |= EIC_CONFIG_FILTEN5|EIC_CONFIG_SENSE5(0x3)|EIC_CONFIG_FILTEN4|EIC_CONFIG_SENSE4(0x3);
     de6:	4b17      	ldr	r3, [pc, #92]	; (e44 <EIC_setup+0xa0>)
     de8:	4a16      	ldr	r2, [pc, #88]	; (e44 <EIC_setup+0xa0>)
     dea:	6992      	ldr	r2, [r2, #24]
     dec:	21bb      	movs	r1, #187	; 0xbb
     dee:	0409      	lsls	r1, r1, #16
     df0:	430a      	orrs	r2, r1
     df2:	619a      	str	r2, [r3, #24]
	EIC->INTENSET.reg|= EIC_INTENSET_EXTINT5| EIC_INTENSET_EXTINT4;
     df4:	4b13      	ldr	r3, [pc, #76]	; (e44 <EIC_setup+0xa0>)
     df6:	4a13      	ldr	r2, [pc, #76]	; (e44 <EIC_setup+0xa0>)
     df8:	68d2      	ldr	r2, [r2, #12]
     dfa:	2130      	movs	r1, #48	; 0x30
     dfc:	430a      	orrs	r2, r1
     dfe:	60da      	str	r2, [r3, #12]
	EIC->CTRL.reg |=  EIC_CTRL_ENABLE;
     e00:	4a10      	ldr	r2, [pc, #64]	; (e44 <EIC_setup+0xa0>)
     e02:	4b10      	ldr	r3, [pc, #64]	; (e44 <EIC_setup+0xa0>)
     e04:	781b      	ldrb	r3, [r3, #0]
     e06:	b2db      	uxtb	r3, r3
     e08:	2102      	movs	r1, #2
     e0a:	430b      	orrs	r3, r1
     e0c:	b2db      	uxtb	r3, r3
     e0e:	7013      	strb	r3, [r2, #0]
	NVIC_SetPriority(EIC_IRQn,0);
     e10:	2100      	movs	r1, #0
     e12:	2004      	movs	r0, #4
     e14:	4b0c      	ldr	r3, [pc, #48]	; (e48 <EIC_setup+0xa4>)
     e16:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_IRQn);
     e18:	2004      	movs	r0, #4
     e1a:	4b0c      	ldr	r3, [pc, #48]	; (e4c <EIC_setup+0xa8>)
     e1c:	4798      	blx	r3
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     e1e:	b662      	cpsie	i
	__enable_irq();
}
     e20:	46c0      	nop			; (mov r8, r8)
     e22:	46bd      	mov	sp, r7
     e24:	bd80      	pop	{r7, pc}
     e26:	46c0      	nop			; (mov r8, r8)
     e28:	40000400 	.word	0x40000400
     e2c:	40000c00 	.word	0x40000c00
     e30:	00004005 	.word	0x00004005
     e34:	41004400 	.word	0x41004400
     e38:	200005ec 	.word	0x200005ec
     e3c:	50030000 	.word	0x50030000
     e40:	200004f0 	.word	0x200004f0
     e44:	40001800 	.word	0x40001800
     e48:	00000249 	.word	0x00000249
     e4c:	00000215 	.word	0x00000215

00000e50 <main>:
int main(void)
{
     e50:	b580      	push	{r7, lr}
     e52:	b084      	sub	sp, #16
     e54:	af00      	add	r7, sp, #0
	changeClock();
     e56:	4b28      	ldr	r3, [pc, #160]	; (ef8 <main+0xa8>)
     e58:	4798      	blx	r3
	initPins();
     e5a:	4b28      	ldr	r3, [pc, #160]	; (efc <main+0xac>)
     e5c:	4798      	blx	r3
	EIC_setup();
     e5e:	4b28      	ldr	r3, [pc, #160]	; (f00 <main+0xb0>)
     e60:	4798      	blx	r3
	initRTC();
     e62:	4b28      	ldr	r3, [pc, #160]	; (f04 <main+0xb4>)
     e64:	4798      	blx	r3
	standalone_mode();
     e66:	4b28      	ldr	r3, [pc, #160]	; (f08 <main+0xb8>)
     e68:	4798      	blx	r3
	int counts=0;
     e6a:	2300      	movs	r3, #0
     e6c:	60fb      	str	r3, [r7, #12]
	int change = 4000;
     e6e:	23fa      	movs	r3, #250	; 0xfa
     e70:	011b      	lsls	r3, r3, #4
     e72:	60bb      	str	r3, [r7, #8]
	count=0;
     e74:	4b25      	ldr	r3, [pc, #148]	; (f0c <main+0xbc>)
     e76:	2200      	movs	r2, #0
     e78:	601a      	str	r2, [r3, #0]
	direction=false;
     e7a:	4b25      	ldr	r3, [pc, #148]	; (f10 <main+0xc0>)
     e7c:	2200      	movs	r2, #0
     e7e:	701a      	strb	r2, [r3, #0]
	unsigned long input=0;
     e80:	2300      	movs	r3, #0
     e82:	607b      	str	r3, [r7, #4]
	isStalled=false;
     e84:	4b23      	ldr	r3, [pc, #140]	; (f14 <main+0xc4>)
     e86:	2200      	movs	r2, #0
     e88:	701a      	strb	r2, [r3, #0]
	*/
	
	while (1)
    {
		//if(!isStalled){
		writePin(STEP,toggle);
     e8a:	4b23      	ldr	r3, [pc, #140]	; (f18 <main+0xc8>)
     e8c:	781a      	ldrb	r2, [r3, #0]
     e8e:	4b23      	ldr	r3, [pc, #140]	; (f1c <main+0xcc>)
     e90:	0011      	movs	r1, r2
     e92:	0018      	movs	r0, r3
     e94:	4b22      	ldr	r3, [pc, #136]	; (f20 <main+0xd0>)
     e96:	4798      	blx	r3
		toggle = !toggle;
     e98:	4b1f      	ldr	r3, [pc, #124]	; (f18 <main+0xc8>)
     e9a:	781b      	ldrb	r3, [r3, #0]
     e9c:	1e5a      	subs	r2, r3, #1
     e9e:	4193      	sbcs	r3, r2
     ea0:	b2db      	uxtb	r3, r3
     ea2:	2201      	movs	r2, #1
     ea4:	4053      	eors	r3, r2
     ea6:	b2db      	uxtb	r3, r3
     ea8:	1c1a      	adds	r2, r3, #0
     eaa:	2301      	movs	r3, #1
     eac:	4013      	ands	r3, r2
     eae:	b2da      	uxtb	r2, r3
     eb0:	4b19      	ldr	r3, [pc, #100]	; (f18 <main+0xc8>)
     eb2:	701a      	strb	r2, [r3, #0]
		delay_us(15);
     eb4:	200f      	movs	r0, #15
     eb6:	4b1b      	ldr	r3, [pc, #108]	; (f24 <main+0xd4>)
     eb8:	4798      	blx	r3
		counts++;
     eba:	68fb      	ldr	r3, [r7, #12]
     ebc:	3301      	adds	r3, #1
     ebe:	60fb      	str	r3, [r7, #12]
		if(counts>=change){
     ec0:	68fa      	ldr	r2, [r7, #12]
     ec2:	68bb      	ldr	r3, [r7, #8]
     ec4:	429a      	cmp	r2, r3
     ec6:	dbe0      	blt.n	e8a <main+0x3a>
			direction=!direction;
     ec8:	4b11      	ldr	r3, [pc, #68]	; (f10 <main+0xc0>)
     eca:	781b      	ldrb	r3, [r3, #0]
     ecc:	1e5a      	subs	r2, r3, #1
     ece:	4193      	sbcs	r3, r2
     ed0:	b2db      	uxtb	r3, r3
     ed2:	2201      	movs	r2, #1
     ed4:	4053      	eors	r3, r2
     ed6:	b2db      	uxtb	r3, r3
     ed8:	1c1a      	adds	r2, r3, #0
     eda:	2301      	movs	r3, #1
     edc:	4013      	ands	r3, r2
     ede:	b2da      	uxtb	r2, r3
     ee0:	4b0b      	ldr	r3, [pc, #44]	; (f10 <main+0xc0>)
     ee2:	701a      	strb	r2, [r3, #0]
			writePin(DIRPIN,direction);
     ee4:	4b0a      	ldr	r3, [pc, #40]	; (f10 <main+0xc0>)
     ee6:	781a      	ldrb	r2, [r3, #0]
     ee8:	4b0f      	ldr	r3, [pc, #60]	; (f28 <main+0xd8>)
     eea:	0011      	movs	r1, r2
     eec:	0018      	movs	r0, r3
     eee:	4b0c      	ldr	r3, [pc, #48]	; (f20 <main+0xd0>)
     ef0:	4798      	blx	r3
			counts=0;
     ef2:	2300      	movs	r3, #0
     ef4:	60fb      	str	r3, [r7, #12]
		writePin(STEP,toggle);
     ef6:	e7c8      	b.n	e8a <main+0x3a>
     ef8:	00000a79 	.word	0x00000a79
     efc:	00000659 	.word	0x00000659
     f00:	00000da5 	.word	0x00000da5
     f04:	00000b39 	.word	0x00000b39
     f08:	00000bc9 	.word	0x00000bc9
     f0c:	200004c0 	.word	0x200004c0
     f10:	200005bc 	.word	0x200005bc
     f14:	200004c4 	.word	0x200004c4
     f18:	20000040 	.word	0x20000040
     f1c:	20000580 	.word	0x20000580
     f20:	00000601 	.word	0x00000601
     f24:	00000b8d 	.word	0x00000b8d
     f28:	2000063c 	.word	0x2000063c

00000f2c <__libc_init_array>:
     f2c:	b570      	push	{r4, r5, r6, lr}
     f2e:	4e0d      	ldr	r6, [pc, #52]	; (f64 <__libc_init_array+0x38>)
     f30:	4d0d      	ldr	r5, [pc, #52]	; (f68 <__libc_init_array+0x3c>)
     f32:	2400      	movs	r4, #0
     f34:	1bad      	subs	r5, r5, r6
     f36:	10ad      	asrs	r5, r5, #2
     f38:	d005      	beq.n	f46 <__libc_init_array+0x1a>
     f3a:	00a3      	lsls	r3, r4, #2
     f3c:	58f3      	ldr	r3, [r6, r3]
     f3e:	3401      	adds	r4, #1
     f40:	4798      	blx	r3
     f42:	42a5      	cmp	r5, r4
     f44:	d1f9      	bne.n	f3a <__libc_init_array+0xe>
     f46:	f000 f8c3 	bl	10d0 <_init>
     f4a:	4e08      	ldr	r6, [pc, #32]	; (f6c <__libc_init_array+0x40>)
     f4c:	4d08      	ldr	r5, [pc, #32]	; (f70 <__libc_init_array+0x44>)
     f4e:	2400      	movs	r4, #0
     f50:	1bad      	subs	r5, r5, r6
     f52:	10ad      	asrs	r5, r5, #2
     f54:	d005      	beq.n	f62 <__libc_init_array+0x36>
     f56:	00a3      	lsls	r3, r4, #2
     f58:	58f3      	ldr	r3, [r6, r3]
     f5a:	3401      	adds	r4, #1
     f5c:	4798      	blx	r3
     f5e:	42a5      	cmp	r5, r4
     f60:	d1f9      	bne.n	f56 <__libc_init_array+0x2a>
     f62:	bd70      	pop	{r4, r5, r6, pc}
     f64:	000010dc 	.word	0x000010dc
     f68:	000010dc 	.word	0x000010dc
     f6c:	000010dc 	.word	0x000010dc
     f70:	000010e4 	.word	0x000010e4

00000f74 <register_fini>:
     f74:	4b03      	ldr	r3, [pc, #12]	; (f84 <register_fini+0x10>)
     f76:	b510      	push	{r4, lr}
     f78:	2b00      	cmp	r3, #0
     f7a:	d002      	beq.n	f82 <register_fini+0xe>
     f7c:	4802      	ldr	r0, [pc, #8]	; (f88 <register_fini+0x14>)
     f7e:	f000 f805 	bl	f8c <atexit>
     f82:	bd10      	pop	{r4, pc}
     f84:	00000000 	.word	0x00000000
     f88:	00000f9d 	.word	0x00000f9d

00000f8c <atexit>:
     f8c:	b510      	push	{r4, lr}
     f8e:	0001      	movs	r1, r0
     f90:	2300      	movs	r3, #0
     f92:	2200      	movs	r2, #0
     f94:	2000      	movs	r0, #0
     f96:	f000 f81f 	bl	fd8 <__register_exitproc>
     f9a:	bd10      	pop	{r4, pc}

00000f9c <__libc_fini_array>:
     f9c:	b570      	push	{r4, r5, r6, lr}
     f9e:	4b09      	ldr	r3, [pc, #36]	; (fc4 <__libc_fini_array+0x28>)
     fa0:	4c09      	ldr	r4, [pc, #36]	; (fc8 <__libc_fini_array+0x2c>)
     fa2:	1ae4      	subs	r4, r4, r3
     fa4:	10a4      	asrs	r4, r4, #2
     fa6:	d009      	beq.n	fbc <__libc_fini_array+0x20>
     fa8:	4a08      	ldr	r2, [pc, #32]	; (fcc <__libc_fini_array+0x30>)
     faa:	18a5      	adds	r5, r4, r2
     fac:	00ad      	lsls	r5, r5, #2
     fae:	18ed      	adds	r5, r5, r3
     fb0:	682b      	ldr	r3, [r5, #0]
     fb2:	3c01      	subs	r4, #1
     fb4:	4798      	blx	r3
     fb6:	3d04      	subs	r5, #4
     fb8:	2c00      	cmp	r4, #0
     fba:	d1f9      	bne.n	fb0 <__libc_fini_array+0x14>
     fbc:	f000 f892 	bl	10e4 <_fini>
     fc0:	bd70      	pop	{r4, r5, r6, pc}
     fc2:	46c0      	nop			; (mov r8, r8)
     fc4:	000010f0 	.word	0x000010f0
     fc8:	000010f4 	.word	0x000010f4
     fcc:	3fffffff 	.word	0x3fffffff

00000fd0 <__retarget_lock_acquire_recursive>:
     fd0:	4770      	bx	lr
     fd2:	46c0      	nop			; (mov r8, r8)

00000fd4 <__retarget_lock_release_recursive>:
     fd4:	4770      	bx	lr
     fd6:	46c0      	nop			; (mov r8, r8)

00000fd8 <__register_exitproc>:
     fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
     fda:	464e      	mov	r6, r9
     fdc:	4645      	mov	r5, r8
     fde:	46de      	mov	lr, fp
     fe0:	4657      	mov	r7, sl
     fe2:	b5e0      	push	{r5, r6, r7, lr}
     fe4:	4d36      	ldr	r5, [pc, #216]	; (10c0 <__register_exitproc+0xe8>)
     fe6:	b083      	sub	sp, #12
     fe8:	0006      	movs	r6, r0
     fea:	6828      	ldr	r0, [r5, #0]
     fec:	4698      	mov	r8, r3
     fee:	000f      	movs	r7, r1
     ff0:	4691      	mov	r9, r2
     ff2:	f7ff ffed 	bl	fd0 <__retarget_lock_acquire_recursive>
     ff6:	4b33      	ldr	r3, [pc, #204]	; (10c4 <__register_exitproc+0xec>)
     ff8:	681c      	ldr	r4, [r3, #0]
     ffa:	23a4      	movs	r3, #164	; 0xa4
     ffc:	005b      	lsls	r3, r3, #1
     ffe:	58e0      	ldr	r0, [r4, r3]
    1000:	2800      	cmp	r0, #0
    1002:	d052      	beq.n	10aa <__register_exitproc+0xd2>
    1004:	6843      	ldr	r3, [r0, #4]
    1006:	2b1f      	cmp	r3, #31
    1008:	dc13      	bgt.n	1032 <__register_exitproc+0x5a>
    100a:	1c5a      	adds	r2, r3, #1
    100c:	9201      	str	r2, [sp, #4]
    100e:	2e00      	cmp	r6, #0
    1010:	d128      	bne.n	1064 <__register_exitproc+0x8c>
    1012:	9a01      	ldr	r2, [sp, #4]
    1014:	3302      	adds	r3, #2
    1016:	009b      	lsls	r3, r3, #2
    1018:	6042      	str	r2, [r0, #4]
    101a:	501f      	str	r7, [r3, r0]
    101c:	6828      	ldr	r0, [r5, #0]
    101e:	f7ff ffd9 	bl	fd4 <__retarget_lock_release_recursive>
    1022:	2000      	movs	r0, #0
    1024:	b003      	add	sp, #12
    1026:	bc3c      	pop	{r2, r3, r4, r5}
    1028:	4690      	mov	r8, r2
    102a:	4699      	mov	r9, r3
    102c:	46a2      	mov	sl, r4
    102e:	46ab      	mov	fp, r5
    1030:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1032:	4b25      	ldr	r3, [pc, #148]	; (10c8 <__register_exitproc+0xf0>)
    1034:	2b00      	cmp	r3, #0
    1036:	d03d      	beq.n	10b4 <__register_exitproc+0xdc>
    1038:	20c8      	movs	r0, #200	; 0xc8
    103a:	0040      	lsls	r0, r0, #1
    103c:	e000      	b.n	1040 <__register_exitproc+0x68>
    103e:	bf00      	nop
    1040:	2800      	cmp	r0, #0
    1042:	d037      	beq.n	10b4 <__register_exitproc+0xdc>
    1044:	22a4      	movs	r2, #164	; 0xa4
    1046:	2300      	movs	r3, #0
    1048:	0052      	lsls	r2, r2, #1
    104a:	58a1      	ldr	r1, [r4, r2]
    104c:	6043      	str	r3, [r0, #4]
    104e:	6001      	str	r1, [r0, #0]
    1050:	50a0      	str	r0, [r4, r2]
    1052:	3240      	adds	r2, #64	; 0x40
    1054:	5083      	str	r3, [r0, r2]
    1056:	3204      	adds	r2, #4
    1058:	5083      	str	r3, [r0, r2]
    105a:	3301      	adds	r3, #1
    105c:	9301      	str	r3, [sp, #4]
    105e:	2300      	movs	r3, #0
    1060:	2e00      	cmp	r6, #0
    1062:	d0d6      	beq.n	1012 <__register_exitproc+0x3a>
    1064:	009a      	lsls	r2, r3, #2
    1066:	4692      	mov	sl, r2
    1068:	4482      	add	sl, r0
    106a:	464a      	mov	r2, r9
    106c:	2188      	movs	r1, #136	; 0x88
    106e:	4654      	mov	r4, sl
    1070:	5062      	str	r2, [r4, r1]
    1072:	22c4      	movs	r2, #196	; 0xc4
    1074:	0052      	lsls	r2, r2, #1
    1076:	4691      	mov	r9, r2
    1078:	4481      	add	r9, r0
    107a:	464a      	mov	r2, r9
    107c:	3987      	subs	r1, #135	; 0x87
    107e:	4099      	lsls	r1, r3
    1080:	6812      	ldr	r2, [r2, #0]
    1082:	468b      	mov	fp, r1
    1084:	430a      	orrs	r2, r1
    1086:	4694      	mov	ip, r2
    1088:	464a      	mov	r2, r9
    108a:	4661      	mov	r1, ip
    108c:	6011      	str	r1, [r2, #0]
    108e:	2284      	movs	r2, #132	; 0x84
    1090:	4641      	mov	r1, r8
    1092:	0052      	lsls	r2, r2, #1
    1094:	50a1      	str	r1, [r4, r2]
    1096:	2e02      	cmp	r6, #2
    1098:	d1bb      	bne.n	1012 <__register_exitproc+0x3a>
    109a:	0002      	movs	r2, r0
    109c:	465c      	mov	r4, fp
    109e:	328d      	adds	r2, #141	; 0x8d
    10a0:	32ff      	adds	r2, #255	; 0xff
    10a2:	6811      	ldr	r1, [r2, #0]
    10a4:	430c      	orrs	r4, r1
    10a6:	6014      	str	r4, [r2, #0]
    10a8:	e7b3      	b.n	1012 <__register_exitproc+0x3a>
    10aa:	0020      	movs	r0, r4
    10ac:	304d      	adds	r0, #77	; 0x4d
    10ae:	30ff      	adds	r0, #255	; 0xff
    10b0:	50e0      	str	r0, [r4, r3]
    10b2:	e7a7      	b.n	1004 <__register_exitproc+0x2c>
    10b4:	6828      	ldr	r0, [r5, #0]
    10b6:	f7ff ff8d 	bl	fd4 <__retarget_lock_release_recursive>
    10ba:	2001      	movs	r0, #1
    10bc:	4240      	negs	r0, r0
    10be:	e7b1      	b.n	1024 <__register_exitproc+0x4c>
    10c0:	20000470 	.word	0x20000470
    10c4:	000010cc 	.word	0x000010cc
    10c8:	00000000 	.word	0x00000000

000010cc <_global_impure_ptr>:
    10cc:	20000048                                H.. 

000010d0 <_init>:
    10d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10d2:	46c0      	nop			; (mov r8, r8)
    10d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    10d6:	bc08      	pop	{r3}
    10d8:	469e      	mov	lr, r3
    10da:	4770      	bx	lr

000010dc <__init_array_start>:
    10dc:	00000f75 	.word	0x00000f75

000010e0 <__frame_dummy_init_array_entry>:
    10e0:	000000dd                                ....

000010e4 <_fini>:
    10e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    10ea:	bc08      	pop	{r3}
    10ec:	469e      	mov	lr, r3
    10ee:	4770      	bx	lr

000010f0 <__fini_array_start>:
    10f0:	000000b5 	.word	0x000000b5
