// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AMPEDUPPRESETS_AMPEDUPPRESETS_H_
#define FLATBUFFERS_GENERATED_AMPEDUPPRESETS_AMPEDUPPRESETS_H_

#include "flatbuffers/flatbuffers.h"

#include "AmpedUpNodes_generated.h"

namespace AmpedUpPresets {

struct FixedKnobValues;
struct FixedKnobValuesBuilder;

struct Preset;
struct PresetBuilder;

enum class KnobValues : uint8_t {
  NONE = 0,
  FixedKnobValues = 1,
  AmpedUpNodes_NodeGraph = 2,
  MIN = NONE,
  MAX = AmpedUpNodes_NodeGraph
};

inline const KnobValues (&EnumValuesKnobValues())[3] {
  static const KnobValues values[] = {
    KnobValues::NONE,
    KnobValues::FixedKnobValues,
    KnobValues::AmpedUpNodes_NodeGraph
  };
  return values;
}

inline const char * const *EnumNamesKnobValues() {
  static const char * const names[4] = {
    "NONE",
    "FixedKnobValues",
    "AmpedUpNodes_NodeGraph",
    nullptr
  };
  return names;
}

inline const char *EnumNameKnobValues(KnobValues e) {
  if (flatbuffers::IsOutRange(e, KnobValues::NONE, KnobValues::AmpedUpNodes_NodeGraph)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesKnobValues()[index];
}

template<typename T> struct KnobValuesTraits {
  static const KnobValues enum_value = KnobValues::NONE;
};

template<> struct KnobValuesTraits<AmpedUpPresets::FixedKnobValues> {
  static const KnobValues enum_value = KnobValues::FixedKnobValues;
};

template<> struct KnobValuesTraits<AmpedUpNodes::NodeGraph> {
  static const KnobValues enum_value = KnobValues::AmpedUpNodes_NodeGraph;
};

bool VerifyKnobValues(flatbuffers::Verifier &verifier, const void *obj, KnobValues type);
bool VerifyKnobValuesVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct FixedKnobValues FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FixedKnobValuesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KNOBVALUES = 4
  };
  const flatbuffers::Vector<float> *knobValues() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_KNOBVALUES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KNOBVALUES) &&
           verifier.VerifyVector(knobValues()) &&
           verifier.EndTable();
  }
};

struct FixedKnobValuesBuilder {
  typedef FixedKnobValues Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_knobValues(flatbuffers::Offset<flatbuffers::Vector<float>> knobValues) {
    fbb_.AddOffset(FixedKnobValues::VT_KNOBVALUES, knobValues);
  }
  explicit FixedKnobValuesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FixedKnobValues> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FixedKnobValues>(end);
    return o;
  }
};

inline flatbuffers::Offset<FixedKnobValues> CreateFixedKnobValues(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> knobValues = 0) {
  FixedKnobValuesBuilder builder_(_fbb);
  builder_.add_knobValues(knobValues);
  return builder_.Finish();
}

inline flatbuffers::Offset<FixedKnobValues> CreateFixedKnobValuesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *knobValues = nullptr) {
  auto knobValues__ = knobValues ? _fbb.CreateVector<float>(*knobValues) : 0;
  return AmpedUpPresets::CreateFixedKnobValues(
      _fbb,
      knobValues__);
}

struct Preset FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PresetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_DATA_TYPE = 6,
    VT_DATA = 8
  };
  uint16_t id() const {
    return GetField<uint16_t>(VT_ID, 0);
  }
  AmpedUpPresets::KnobValues data_type() const {
    return static_cast<AmpedUpPresets::KnobValues>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const AmpedUpPresets::FixedKnobValues *data_as_FixedKnobValues() const {
    return data_type() == AmpedUpPresets::KnobValues::FixedKnobValues ? static_cast<const AmpedUpPresets::FixedKnobValues *>(data()) : nullptr;
  }
  const AmpedUpNodes::NodeGraph *data_as_AmpedUpNodes_NodeGraph() const {
    return data_type() == AmpedUpPresets::KnobValues::AmpedUpNodes_NodeGraph ? static_cast<const AmpedUpNodes::NodeGraph *>(data()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_ID) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE) &&
           VerifyOffset(verifier, VT_DATA) &&
           VerifyKnobValues(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const AmpedUpPresets::FixedKnobValues *Preset::data_as<AmpedUpPresets::FixedKnobValues>() const {
  return data_as_FixedKnobValues();
}

template<> inline const AmpedUpNodes::NodeGraph *Preset::data_as<AmpedUpNodes::NodeGraph>() const {
  return data_as_AmpedUpNodes_NodeGraph();
}

struct PresetBuilder {
  typedef Preset Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint16_t id) {
    fbb_.AddElement<uint16_t>(Preset::VT_ID, id, 0);
  }
  void add_data_type(AmpedUpPresets::KnobValues data_type) {
    fbb_.AddElement<uint8_t>(Preset::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(flatbuffers::Offset<void> data) {
    fbb_.AddOffset(Preset::VT_DATA, data);
  }
  explicit PresetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Preset> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Preset>(end);
    return o;
  }
};

inline flatbuffers::Offset<Preset> CreatePreset(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t id = 0,
    AmpedUpPresets::KnobValues data_type = AmpedUpPresets::KnobValues::NONE,
    flatbuffers::Offset<void> data = 0) {
  PresetBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_id(id);
  builder_.add_data_type(data_type);
  return builder_.Finish();
}

inline bool VerifyKnobValues(flatbuffers::Verifier &verifier, const void *obj, KnobValues type) {
  switch (type) {
    case KnobValues::NONE: {
      return true;
    }
    case KnobValues::FixedKnobValues: {
      auto ptr = reinterpret_cast<const AmpedUpPresets::FixedKnobValues *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case KnobValues::AmpedUpNodes_NodeGraph: {
      auto ptr = reinterpret_cast<const AmpedUpNodes::NodeGraph *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyKnobValuesVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyKnobValues(
        verifier,  values->Get(i), types->GetEnum<KnobValues>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace AmpedUpPresets

#endif  // FLATBUFFERS_GENERATED_AMPEDUPPRESETS_AMPEDUPPRESETS_H_
